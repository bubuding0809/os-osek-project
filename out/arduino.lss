
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ba  00800100  00003cda  00003d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003cda  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001aa  008004ba  008004ba  00004128  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00004128  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000413c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000688  00000000  00000000  00004180  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000185d4  00000000  00000000  00004808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003725  00000000  00000000  0001cddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004db1  00000000  00000000  00020501  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000107c  00000000  00000000  000252b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004358  00000000  00000000  00026330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000078c1  00000000  00000000  0002a688  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e8  00000000  00000000  00031f49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      24:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_9>
      28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      2c:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__vector_11>
      30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      40:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_16>
      44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      48:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__vector_18>
      4c:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__vector_19>
      50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      54:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      58:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      5c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      60:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      64:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <idle_hook+0x10>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	00 00       	nop
      ec:	00 08       	sbc	r0, r0
      ee:	00 02       	muls	r16, r16
      f0:	01 00       	.word	0x0001	; ????
      f2:	00 03       	mulsu	r16, r16
      f4:	04 07       	cpc	r16, r20
	...

000000fe <digital_pin_to_bit_mask_PGM>:
      fe:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     10e:	04 08 10 20                                         ... 

00000112 <digital_pin_to_port_PGM>:
     112:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     122:	03 03 03 03                                         ....

00000126 <port_to_input_PGM>:
     126:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000130 <port_to_output_PGM>:
     130:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000013a <port_to_mode_PGM>:
     13a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000144 <__ctors_start>:
     144:	97 09       	sbc	r25, r7
     146:	b7 0c       	add	r11, r7

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d8 e0       	ldi	r29, 0x08	; 8
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	14 e0       	ldi	r17, 0x04	; 4
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	ea ed       	ldi	r30, 0xDA	; 218
     15c:	fc e3       	ldi	r31, 0x3C	; 60
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x10>
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	aa 3b       	cpi	r26, 0xBA	; 186
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0xc>

0000016a <__do_clear_bss>:
     16a:	26 e0       	ldi	r18, 0x06	; 6
     16c:	aa eb       	ldi	r26, 0xBA	; 186
     16e:	b4 e0       	ldi	r27, 0x04	; 4
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a4 36       	cpi	r26, 0x64	; 100
     176:	b2 07       	cpc	r27, r18
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>

0000017a <__do_global_ctors>:
     17a:	10 e0       	ldi	r17, 0x00	; 0
     17c:	c4 ea       	ldi	r28, 0xA4	; 164
     17e:	d0 e0       	ldi	r29, 0x00	; 0
     180:	04 c0       	rjmp	.+8      	; 0x18a <__do_global_ctors+0x10>
     182:	21 97       	sbiw	r28, 0x01	; 1
     184:	fe 01       	movw	r30, r28
     186:	0e 94 8d 1b 	call	0x371a	; 0x371a <__tablejump2__>
     18a:	c2 3a       	cpi	r28, 0xA2	; 162
     18c:	d1 07       	cpc	r29, r17
     18e:	c9 f7       	brne	.-14     	; 0x182 <__do_global_ctors+0x8>
     190:	0e 94 18 05 	call	0xa30	; 0xa30 <main>
     194:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <_exit>

00000198 <__bad_interrupt>:
     198:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__vector_default>

0000019c <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     19c:	2f 92       	push	r2
     19e:	3f 92       	push	r3
     1a0:	4f 92       	push	r4
     1a2:	5f 92       	push	r5
     1a4:	6f 92       	push	r6
     1a6:	7f 92       	push	r7
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	bf 92       	push	r11
     1b0:	cf 92       	push	r12
     1b2:	df 92       	push	r13
     1b4:	ef 92       	push	r14
     1b6:	ff 92       	push	r15
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	e4 2f       	mov	r30, r20
     1c2:	f5 2f       	mov	r31, r21
     1c4:	41 90       	ld	r4, Z+
     1c6:	50 80       	ld	r5, Z
     1c8:	4f 92       	push	r4
     1ca:	5f 92       	push	r5
     1cc:	e4 2f       	mov	r30, r20
     1ce:	f5 2f       	mov	r31, r21
     1d0:	4d b6       	in	r4, 0x3d	; 61
     1d2:	5e b6       	in	r5, 0x3e	; 62
     1d4:	41 92       	st	Z+, r4
     1d6:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     1d8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>

000001dc <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     1dc:	e6 2f       	mov	r30, r22
     1de:	f7 2f       	mov	r31, r23
     1e0:	41 90       	ld	r4, Z+
     1e2:	50 80       	ld	r5, Z
     1e4:	4d be       	out	0x3d, r4	; 61
     1e6:	5e be       	out	0x3e, r5	; 62
     1e8:	5f 90       	pop	r5
     1ea:	4f 90       	pop	r4
     1ec:	e6 2f       	mov	r30, r22
     1ee:	f7 2f       	mov	r31, r23
     1f0:	41 92       	st	Z+, r4
     1f2:	50 82       	st	Z, r5
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	bf 90       	pop	r11
     206:	af 90       	pop	r10
     208:	9f 90       	pop	r9
     20a:	8f 90       	pop	r8
     20c:	7f 90       	pop	r7
     20e:	6f 90       	pop	r6
     210:	5f 90       	pop	r5
     212:	4f 90       	pop	r4
     214:	3f 90       	pop	r3
     216:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     218:	0c 94 46 12 	jmp	0x248c	; 0x248c <osEE_scheduler_task_wrapper_restore>

0000021c <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     21c:	e6 2f       	mov	r30, r22
    mov r31, r23
     21e:	f7 2f       	mov	r31, r23
    ld  r20, z+
     220:	41 91       	ld	r20, Z+
    ld  r21, z
     222:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     224:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     226:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     228:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <osEE_scheduler_task_wrapper_run>

0000022c <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     22c:	2f 92       	push	r2
     22e:	3f 92       	push	r3
     230:	4f 92       	push	r4
     232:	5f 92       	push	r5
     234:	6f 92       	push	r6
     236:	7f 92       	push	r7
     238:	8f 92       	push	r8
     23a:	9f 92       	push	r9
     23c:	af 92       	push	r10
     23e:	bf 92       	push	r11
     240:	cf 92       	push	r12
     242:	df 92       	push	r13
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	e4 2f       	mov	r30, r20
     252:	f5 2f       	mov	r31, r21
     254:	41 90       	ld	r4, Z+
     256:	50 80       	ld	r5, Z
     258:	4f 92       	push	r4
     25a:	5f 92       	push	r5
     25c:	e4 2f       	mov	r30, r20
     25e:	f5 2f       	mov	r31, r21
     260:	4d b6       	in	r4, 0x3d	; 61
     262:	5e b6       	in	r5, 0x3e	; 62
     264:	41 92       	st	Z+, r4
     266:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     268:	0c 94 0e 01 	jmp	0x21c	; 0x21c <osEE_hal_ready2stacked>

0000026c <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     26c:	e8 2f       	mov	r30, r24
    mov r31, r25
     26e:	f9 2f       	mov	r31, r25
    ld  r20, z+
     270:	41 91       	ld	r20, Z+
    ld  r21, z
     272:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     274:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     276:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     278:	e6 2f       	mov	r30, r22
    mov r31, r23
     27a:	f7 2f       	mov	r31, r23

    ijmp
     27c:	09 94       	ijmp
	...

00000280 <_ZN5Print17availableForWriteEv>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 95       	ret

00000286 <_ZN5Print5flushEv>:
     286:	08 95       	ret

00000288 <_ZN13LiquidCrystal11pulseEnableEv>:
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	ec 01       	movw	r28, r24
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	8e 81       	ldd	r24, Y+6	; 0x06
     292:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <delayMicroseconds>
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	8e 81       	ldd	r24, Y+6	; 0x06
     2a2:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <delayMicroseconds>
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	8e 81       	ldd	r24, Y+6	; 0x06
     2b2:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     2b6:	84 e6       	ldi	r24, 0x64	; 100
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <delayMicroseconds>

000002c2 <_ZN13LiquidCrystal10write4bitsEh>:
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	6c 01       	movw	r12, r24
     2d4:	7c 01       	movw	r14, r24
     2d6:	87 e0       	ldi	r24, 0x07	; 7
     2d8:	e8 0e       	add	r14, r24
     2da:	f1 1c       	adc	r15, r1
     2dc:	d0 e0       	ldi	r29, 0x00	; 0
     2de:	c0 e0       	ldi	r28, 0x00	; 0
     2e0:	06 2f       	mov	r16, r22
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	b8 01       	movw	r22, r16
     2e6:	0c 2e       	mov	r0, r28
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     2ea:	75 95       	asr	r23
     2ec:	67 95       	ror	r22
     2ee:	0a 94       	dec	r0
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <_ZN13LiquidCrystal10write4bitsEh+0x28>
     2f2:	61 70       	andi	r22, 0x01	; 1
     2f4:	f7 01       	movw	r30, r14
     2f6:	81 91       	ld	r24, Z+
     2f8:	7f 01       	movw	r14, r30
     2fa:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     2fe:	21 96       	adiw	r28, 0x01	; 1
     300:	c4 30       	cpi	r28, 0x04	; 4
     302:	d1 05       	cpc	r29, r1
     304:	79 f7       	brne	.-34     	; 0x2e4 <_ZN13LiquidCrystal10write4bitsEh+0x22>
     306:	c6 01       	movw	r24, r12
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	0c 94 44 01 	jmp	0x288	; 0x288 <_ZN13LiquidCrystal11pulseEnableEv>

0000031c <_ZN13LiquidCrystal10write8bitsEh>:
     31c:	cf 92       	push	r12
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	6c 01       	movw	r12, r24
     32e:	7c 01       	movw	r14, r24
     330:	87 e0       	ldi	r24, 0x07	; 7
     332:	e8 0e       	add	r14, r24
     334:	f1 1c       	adc	r15, r1
     336:	d0 e0       	ldi	r29, 0x00	; 0
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	06 2f       	mov	r16, r22
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	b8 01       	movw	r22, r16
     340:	0c 2e       	mov	r0, r28
     342:	02 c0       	rjmp	.+4      	; 0x348 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     344:	75 95       	asr	r23
     346:	67 95       	ror	r22
     348:	0a 94       	dec	r0
     34a:	e2 f7       	brpl	.-8      	; 0x344 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     34c:	61 70       	andi	r22, 0x01	; 1
     34e:	f7 01       	movw	r30, r14
     350:	81 91       	ld	r24, Z+
     352:	7f 01       	movw	r14, r30
     354:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     358:	21 96       	adiw	r28, 0x01	; 1
     35a:	c8 30       	cpi	r28, 0x08	; 8
     35c:	d1 05       	cpc	r29, r1
     35e:	79 f7       	brne	.-34     	; 0x33e <_ZN13LiquidCrystal10write8bitsEh+0x22>
     360:	c6 01       	movw	r24, r12
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	df 90       	pop	r13
     370:	cf 90       	pop	r12
     372:	0c 94 44 01 	jmp	0x288	; 0x288 <_ZN13LiquidCrystal11pulseEnableEv>

00000376 <_ZN13LiquidCrystal4sendEhh>:
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	ec 01       	movw	r28, r24
     37e:	16 2f       	mov	r17, r22
     380:	64 2f       	mov	r22, r20
     382:	8c 81       	ldd	r24, Y+4	; 0x04
     384:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	8f 3f       	cpi	r24, 0xFF	; 255
     38c:	19 f0       	breq	.+6      	; 0x394 <_ZN13LiquidCrystal4sendEhh+0x1e>
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     394:	8f 85       	ldd	r24, Y+15	; 0x0f
     396:	61 2f       	mov	r22, r17
     398:	84 ff       	sbrs	r24, 4
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <_ZN13LiquidCrystal4sendEhh+0x32>
     39c:	ce 01       	movw	r24, r28
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_ZN13LiquidCrystal10write8bitsEh>
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	75 95       	asr	r23
     3ae:	67 95       	ror	r22
     3b0:	8a 95       	dec	r24
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <_ZN13LiquidCrystal4sendEhh+0x36>
     3b4:	ce 01       	movw	r24, r28
     3b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     3ba:	61 2f       	mov	r22, r17
     3bc:	ce 01       	movw	r24, r28
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>

000003c8 <_ZN13LiquidCrystal7commandEh>:
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	0c 94 bb 01 	jmp	0x376	; 0x376 <_ZN13LiquidCrystal4sendEhh>

000003ce <_ZN13LiquidCrystal5clearEv>:
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     3d4:	80 ed       	ldi	r24, 0xD0	; 208
     3d6:	97 e0       	ldi	r25, 0x07	; 7
     3d8:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <delayMicroseconds>

000003dc <_ZN13LiquidCrystal9setCursorEhh>:
     3dc:	44 30       	cpi	r20, 0x04	; 4
     3de:	08 f0       	brcs	.+2      	; 0x3e2 <_ZN13LiquidCrystal9setCursorEhh+0x6>
     3e0:	43 e0       	ldi	r20, 0x03	; 3
     3e2:	fc 01       	movw	r30, r24
     3e4:	23 89       	ldd	r18, Z+19	; 0x13
     3e6:	42 17       	cp	r20, r18
     3e8:	10 f0       	brcs	.+4      	; 0x3ee <_ZN13LiquidCrystal9setCursorEhh+0x12>
     3ea:	4f ef       	ldi	r20, 0xFF	; 255
     3ec:	42 0f       	add	r20, r18
     3ee:	fc 01       	movw	r30, r24
     3f0:	e4 0f       	add	r30, r20
     3f2:	f1 1d       	adc	r31, r1
     3f4:	24 89       	ldd	r18, Z+20	; 0x14
     3f6:	62 0f       	add	r22, r18
     3f8:	60 68       	ori	r22, 0x80	; 128
     3fa:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>

000003fe <_ZN13LiquidCrystal7displayEv>:
     3fe:	fc 01       	movw	r30, r24
     400:	60 89       	ldd	r22, Z+16	; 0x10
     402:	26 2f       	mov	r18, r22
     404:	24 60       	ori	r18, 0x04	; 4
     406:	20 8b       	std	Z+16, r18	; 0x10
     408:	6c 60       	ori	r22, 0x0C	; 12
     40a:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>

0000040e <_ZN13LiquidCrystal5beginEhhh>:
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	ec 01       	movw	r28, r24
     418:	42 30       	cpi	r20, 0x02	; 2
     41a:	18 f0       	brcs	.+6      	; 0x422 <_ZN13LiquidCrystal5beginEhhh+0x14>
     41c:	8f 85       	ldd	r24, Y+15	; 0x0f
     41e:	88 60       	ori	r24, 0x08	; 8
     420:	8f 87       	std	Y+15, r24	; 0x0f
     422:	4b 8b       	std	Y+19, r20	; 0x13
     424:	1c 8a       	std	Y+20, r1	; 0x14
     426:	80 e4       	ldi	r24, 0x40	; 64
     428:	8d 8b       	std	Y+21, r24	; 0x15
     42a:	6e 8b       	std	Y+22, r22	; 0x16
     42c:	60 5c       	subi	r22, 0xC0	; 192
     42e:	6f 8b       	std	Y+23, r22	; 0x17
     430:	22 23       	and	r18, r18
     432:	29 f0       	breq	.+10     	; 0x43e <_ZN13LiquidCrystal5beginEhhh+0x30>
     434:	41 30       	cpi	r20, 0x01	; 1
     436:	19 f4       	brne	.+6      	; 0x43e <_ZN13LiquidCrystal5beginEhhh+0x30>
     438:	8f 85       	ldd	r24, Y+15	; 0x0f
     43a:	84 60       	ori	r24, 0x04	; 4
     43c:	8f 87       	std	Y+15, r24	; 0x0f
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	8c 81       	ldd	r24, Y+4	; 0x04
     442:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <pinMode>
     446:	8d 81       	ldd	r24, Y+5	; 0x05
     448:	8f 3f       	cpi	r24, 0xFF	; 255
     44a:	19 f0       	breq	.+6      	; 0x452 <_ZN13LiquidCrystal5beginEhhh+0x44>
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <pinMode>
     452:	61 e0       	ldi	r22, 0x01	; 1
     454:	8e 81       	ldd	r24, Y+6	; 0x06
     456:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <pinMode>
     45a:	8e 01       	movw	r16, r28
     45c:	98 01       	movw	r18, r16
     45e:	2c 1b       	sub	r18, r28
     460:	3d 0b       	sbc	r19, r29
     462:	8f 85       	ldd	r24, Y+15	; 0x0f
     464:	84 fd       	sbrc	r24, 4
     466:	0d c0       	rjmp	.+26     	; 0x482 <_ZN13LiquidCrystal5beginEhhh+0x74>
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0f 5f       	subi	r16, 0xFF	; 255
     46e:	1f 4f       	sbci	r17, 0xFF	; 255
     470:	28 17       	cp	r18, r24
     472:	39 07       	cpc	r19, r25
     474:	4c f4       	brge	.+18     	; 0x488 <_ZN13LiquidCrystal5beginEhhh+0x7a>
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	f8 01       	movw	r30, r16
     47a:	86 81       	ldd	r24, Z+6	; 0x06
     47c:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <pinMode>
     480:	ed cf       	rjmp	.-38     	; 0x45c <_ZN13LiquidCrystal5beginEhhh+0x4e>
     482:	88 e0       	ldi	r24, 0x08	; 8
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	f2 cf       	rjmp	.-28     	; 0x46c <_ZN13LiquidCrystal5beginEhhh+0x5e>
     488:	80 e5       	ldi	r24, 0x50	; 80
     48a:	93 ec       	ldi	r25, 0xC3	; 195
     48c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <delayMicroseconds>
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	8c 81       	ldd	r24, Y+4	; 0x04
     494:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	8e 81       	ldd	r24, Y+6	; 0x06
     49c:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     4a0:	8d 81       	ldd	r24, Y+5	; 0x05
     4a2:	8f 3f       	cpi	r24, 0xFF	; 255
     4a4:	19 f0       	breq	.+6      	; 0x4ac <_ZN13LiquidCrystal5beginEhhh+0x9e>
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     4ac:	6f 85       	ldd	r22, Y+15	; 0x0f
     4ae:	64 fd       	sbrc	r22, 4
     4b0:	33 c0       	rjmp	.+102    	; 0x518 <_ZN13LiquidCrystal5beginEhhh+0x10a>
     4b2:	63 e0       	ldi	r22, 0x03	; 3
     4b4:	ce 01       	movw	r24, r28
     4b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ba:	84 e9       	ldi	r24, 0x94	; 148
     4bc:	91 e1       	ldi	r25, 0x11	; 17
     4be:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <delayMicroseconds>
     4c2:	63 e0       	ldi	r22, 0x03	; 3
     4c4:	ce 01       	movw	r24, r28
     4c6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ca:	84 e9       	ldi	r24, 0x94	; 148
     4cc:	91 e1       	ldi	r25, 0x11	; 17
     4ce:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <delayMicroseconds>
     4d2:	63 e0       	ldi	r22, 0x03	; 3
     4d4:	ce 01       	movw	r24, r28
     4d6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4da:	86 e9       	ldi	r24, 0x96	; 150
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <delayMicroseconds>
     4e2:	62 e0       	ldi	r22, 0x02	; 2
     4e4:	ce 01       	movw	r24, r28
     4e6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ea:	6f 85       	ldd	r22, Y+15	; 0x0f
     4ec:	60 62       	ori	r22, 0x20	; 32
     4ee:	ce 01       	movw	r24, r28
     4f0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     4f4:	84 e0       	ldi	r24, 0x04	; 4
     4f6:	88 8b       	std	Y+16, r24	; 0x10
     4f8:	ce 01       	movw	r24, r28
     4fa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN13LiquidCrystal7displayEv>
     4fe:	ce 01       	movw	r24, r28
     500:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN13LiquidCrystal5clearEv>
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	89 8b       	std	Y+17, r24	; 0x11
     508:	66 e0       	ldi	r22, 0x06	; 6
     50a:	ce 01       	movw	r24, r28
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     518:	60 62       	ori	r22, 0x20	; 32
     51a:	ce 01       	movw	r24, r28
     51c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     520:	84 e9       	ldi	r24, 0x94	; 148
     522:	91 e1       	ldi	r25, 0x11	; 17
     524:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <delayMicroseconds>
     528:	6f 85       	ldd	r22, Y+15	; 0x0f
     52a:	60 62       	ori	r22, 0x20	; 32
     52c:	ce 01       	movw	r24, r28
     52e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     532:	86 e9       	ldi	r24, 0x96	; 150
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <delayMicroseconds>
     53a:	6f 85       	ldd	r22, Y+15	; 0x0f
     53c:	60 62       	ori	r22, 0x20	; 32
     53e:	ce 01       	movw	r24, r28
     540:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     544:	d2 cf       	rjmp	.-92     	; 0x4ea <_ZN13LiquidCrystal5beginEhhh+0xdc>

00000546 <_ZN13LiquidCrystalC1Ehhhhhh>:
     546:	cf 92       	push	r12
     548:	ef 92       	push	r14
     54a:	0f 93       	push	r16
     54c:	fc 01       	movw	r30, r24
     54e:	13 82       	std	Z+3, r1	; 0x03
     550:	12 82       	std	Z+2, r1	; 0x02
     552:	83 eb       	ldi	r24, 0xB3	; 179
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	91 83       	std	Z+1, r25	; 0x01
     558:	80 83       	st	Z, r24
     55a:	64 83       	std	Z+4, r22	; 0x04
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	85 83       	std	Z+5, r24	; 0x05
     560:	46 83       	std	Z+6, r20	; 0x06
     562:	27 83       	std	Z+7, r18	; 0x07
     564:	00 87       	std	Z+8, r16	; 0x08
     566:	e1 86       	std	Z+9, r14	; 0x09
     568:	c2 86       	std	Z+10, r12	; 0x0a
     56a:	13 86       	std	Z+11, r1	; 0x0b
     56c:	14 86       	std	Z+12, r1	; 0x0c
     56e:	15 86       	std	Z+13, r1	; 0x0d
     570:	16 86       	std	Z+14, r1	; 0x0e
     572:	17 86       	std	Z+15, r1	; 0x0f
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	60 e1       	ldi	r22, 0x10	; 16
     57a:	cf 01       	movw	r24, r30
     57c:	0f 91       	pop	r16
     57e:	ef 90       	pop	r14
     580:	cf 90       	pop	r12
     582:	0c 94 07 02 	jmp	0x40e	; 0x40e <_ZN13LiquidCrystal5beginEhhh>

00000586 <_ZN13LiquidCrystal10createCharEhPh>:
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	8c 01       	movw	r16, r24
     594:	7a 01       	movw	r14, r20
     596:	67 70       	andi	r22, 0x07	; 7
     598:	88 e0       	ldi	r24, 0x08	; 8
     59a:	68 9f       	mul	r22, r24
     59c:	b0 01       	movw	r22, r0
     59e:	11 24       	eor	r1, r1
     5a0:	60 64       	ori	r22, 0x40	; 64
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     5a8:	e7 01       	movw	r28, r14
     5aa:	a8 e0       	ldi	r26, 0x08	; 8
     5ac:	ea 0e       	add	r14, r26
     5ae:	f1 1c       	adc	r15, r1
     5b0:	69 91       	ld	r22, Y+
     5b2:	d8 01       	movw	r26, r16
     5b4:	ed 91       	ld	r30, X+
     5b6:	fc 91       	ld	r31, X
     5b8:	01 90       	ld	r0, Z+
     5ba:	f0 81       	ld	r31, Z
     5bc:	e0 2d       	mov	r30, r0
     5be:	c8 01       	movw	r24, r16
     5c0:	09 95       	icall
     5c2:	ce 15       	cp	r28, r14
     5c4:	df 05       	cpc	r29, r15
     5c6:	a1 f7       	brne	.-24     	; 0x5b0 <_ZN13LiquidCrystal10createCharEhPh+0x2a>
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	08 95       	ret

000005d6 <_ZN13LiquidCrystal5writeEh>:
     5d6:	41 e0       	ldi	r20, 0x01	; 1
     5d8:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN13LiquidCrystal4sendEhh>
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	08 95       	ret

000005e2 <__vector_9>:
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
     604:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <_ZL8ISRCount>
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <_ZL8ISRCount>
     60e:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     612:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <_ZL8ISRCount>
     616:	8e 2f       	mov	r24, r30
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	fc 01       	movw	r30, r24
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	e8 0f       	add	r30, r24
     622:	f9 1f       	adc	r31, r25
     624:	e2 54       	subi	r30, 0x42	; 66
     626:	fb 4f       	sbci	r31, 0xFB	; 251
     628:	81 81       	ldd	r24, Z+1	; 0x01
     62a:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     62e:	82 13       	cpse	r24, r18
     630:	1d c0       	rjmp	.+58     	; 0x66c <__vector_9+0x8a>
     632:	8e 2f       	mov	r24, r30
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	fc 01       	movw	r30, r24
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	e8 0f       	add	r30, r24
     63e:	f9 1f       	adc	r31, r25
     640:	e2 54       	subi	r30, 0x42	; 66
     642:	fb 4f       	sbci	r31, 0xFB	; 251
     644:	82 81       	ldd	r24, Z+2	; 0x02
     646:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0f be       	out	0x3f, r0	; 63
     666:	0f 90       	pop	r0
     668:	1f 90       	pop	r1
     66a:	18 95       	reti
     66c:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <_ZL8ISRCount>
     670:	8e 2f       	mov	r24, r30
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	fc 01       	movw	r30, r24
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	e8 0f       	add	r30, r24
     67c:	f9 1f       	adc	r31, r25
     67e:	e2 54       	subi	r30, 0x42	; 66
     680:	fb 4f       	sbci	r31, 0xFB	; 251
     682:	81 81       	ldd	r24, Z+1	; 0x01
     684:	82 17       	cp	r24, r18
     686:	08 f7       	brcc	.-62     	; 0x64a <__vector_9+0x68>
     688:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     68c:	8e 2f       	mov	r24, r30
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	fc 01       	movw	r30, r24
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	e8 0f       	add	r30, r24
     698:	f9 1f       	adc	r31, r25
     69a:	e2 54       	subi	r30, 0x42	; 66
     69c:	fb 4f       	sbci	r31, 0xFB	; 251
     69e:	80 81       	ld	r24, Z
     6a0:	85 ff       	sbrs	r24, 5
     6a2:	10 c0       	rjmp	.+32     	; 0x6c4 <__vector_9+0xe2>
     6a4:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     6a8:	8e 2f       	mov	r24, r30
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	fc 01       	movw	r30, r24
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	e8 0f       	add	r30, r24
     6b4:	f9 1f       	adc	r31, r25
     6b6:	e2 54       	subi	r30, 0x42	; 66
     6b8:	fb 4f       	sbci	r31, 0xFB	; 251
     6ba:	80 81       	ld	r24, Z
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	8f 71       	andi	r24, 0x1F	; 31
     6c0:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     6c4:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <_ZL7Channel>
     6c8:	8f 5f       	subi	r24, 0xFF	; 255
     6ca:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <_ZL7Channel>
     6ce:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <_ZL8ISRCount>
     6d2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     6d6:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <_ZL7Channel>
     6da:	88 23       	and	r24, r24
     6dc:	19 f1       	breq	.+70     	; 0x724 <__vector_9+0x142>
     6de:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <_ZL7Channel>
     6e2:	89 30       	cpi	r24, 0x09	; 9
     6e4:	f8 f4       	brcc	.+62     	; 0x724 <__vector_9+0x142>
     6e6:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     6ea:	8e 2f       	mov	r24, r30
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	fc 01       	movw	r30, r24
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	e8 0f       	add	r30, r24
     6f6:	f9 1f       	adc	r31, r25
     6f8:	e2 54       	subi	r30, 0x42	; 66
     6fa:	fb 4f       	sbci	r31, 0xFB	; 251
     6fc:	80 81       	ld	r24, Z
     6fe:	85 ff       	sbrs	r24, 5
     700:	a4 cf       	rjmp	.-184    	; 0x64a <__vector_9+0x68>
     702:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     706:	8e 2f       	mov	r24, r30
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	fc 01       	movw	r30, r24
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	e8 0f       	add	r30, r24
     712:	f9 1f       	adc	r31, r25
     714:	e2 54       	subi	r30, 0x42	; 66
     716:	fb 4f       	sbci	r31, 0xFB	; 251
     718:	80 81       	ld	r24, Z
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	8f 71       	andi	r24, 0x1F	; 31
     71e:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     722:	93 cf       	rjmp	.-218    	; 0x64a <__vector_9+0x68>
     724:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <_ZL7Channel>
     728:	89 30       	cpi	r24, 0x09	; 9
     72a:	08 f4       	brcc	.+2      	; 0x72e <__vector_9+0x14c>
     72c:	8e cf       	rjmp	.-228    	; 0x64a <__vector_9+0x68>
     72e:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <_ZL7Channel>
     732:	8b cf       	rjmp	.-234    	; 0x64a <__vector_9+0x68>

00000734 <_ZN11ServoTimer2C1Ev>:
     734:	fc 01       	movw	r30, r24
     736:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <ChannelCount>
     73a:	98 30       	cpi	r25, 0x08	; 8
     73c:	28 f4       	brcc	.+10     	; 0x748 <_ZN11ServoTimer2C1Ev+0x14>
     73e:	9f 5f       	subi	r25, 0xFF	; 255
     740:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <ChannelCount>
     744:	90 83       	st	Z, r25
     746:	08 95       	ret
     748:	10 82       	st	Z, r1
     74a:	08 95       	ret

0000074c <_ZN11ServoTimer26attachEi>:
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
     754:	16 2f       	mov	r17, r22
     756:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <__data_end>
     75a:	81 11       	cpse	r24, r1
     75c:	22 c0       	rjmp	.+68     	; 0x7a2 <_ZN11ServoTimer26attachEi+0x56>
     75e:	ee eb       	ldi	r30, 0xBE	; 190
     760:	f4 e0       	ldi	r31, 0x04	; 4
     762:	86 ed       	ldi	r24, 0xD6	; 214
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	3b e0       	ldi	r19, 0x0B	; 11
     768:	27 e5       	ldi	r18, 0x57	; 87
     76a:	34 83       	std	Z+4, r19	; 0x04
     76c:	25 83       	std	Z+5, r18	; 0x05
     76e:	33 96       	adiw	r30, 0x03	; 3
     770:	8e 17       	cp	r24, r30
     772:	9f 07       	cpc	r25, r31
     774:	d1 f7       	brne	.-12     	; 0x76a <_ZN11ServoTimer26attachEi+0x1e>
     776:	8e e3       	ldi	r24, 0x3E	; 62
     778:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <_ZL6servos+0x1>
     77c:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <_ZL7Channel>
     780:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <_ZL8ISRCount>
     784:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     788:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     792:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	87 bb       	out	0x17, r24	; 23
     79a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     79e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <__data_end>
     7a2:	88 81       	ld	r24, Y
     7a4:	88 23       	and	r24, r24
     7a6:	a1 f0       	breq	.+40     	; 0x7d0 <_ZN11ServoTimer26attachEi+0x84>
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	81 2f       	mov	r24, r17
     7ac:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <pinMode>
     7b0:	e8 81       	ld	r30, Y
     7b2:	8e 2f       	mov	r24, r30
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	fc 01       	movw	r30, r24
     7b8:	ee 0f       	add	r30, r30
     7ba:	ff 1f       	adc	r31, r31
     7bc:	e8 0f       	add	r30, r24
     7be:	f9 1f       	adc	r31, r25
     7c0:	e2 54       	subi	r30, 0x42	; 66
     7c2:	fb 4f       	sbci	r31, 0xFB	; 251
     7c4:	1f 71       	andi	r17, 0x1F	; 31
     7c6:	60 81       	ld	r22, Z
     7c8:	60 7e       	andi	r22, 0xE0	; 224
     7ca:	61 2b       	or	r22, r17
     7cc:	60 62       	ori	r22, 0x20	; 32
     7ce:	60 83       	st	Z, r22
     7d0:	88 81       	ld	r24, Y
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	08 95       	ret

000007da <_ZN11ServoTimer25writeEi>:
     7da:	dc 01       	movw	r26, r24
     7dc:	ec 91       	ld	r30, X
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	8e 0f       	add	r24, r30
     7e2:	88 30       	cpi	r24, 0x08	; 8
     7e4:	f8 f4       	brcc	.+62     	; 0x824 <_ZN11ServoTimer25writeEi+0x4a>
     7e6:	cb 01       	movw	r24, r22
     7e8:	6b 3c       	cpi	r22, 0xCB	; 203
     7ea:	78 40       	sbci	r23, 0x08	; 8
     7ec:	14 f0       	brlt	.+4      	; 0x7f2 <_ZN11ServoTimer25writeEi+0x18>
     7ee:	8a ec       	ldi	r24, 0xCA	; 202
     7f0:	98 e0       	ldi	r25, 0x08	; 8
     7f2:	8e 3e       	cpi	r24, 0xEE	; 238
     7f4:	22 e0       	ldi	r18, 0x02	; 2
     7f6:	92 07       	cpc	r25, r18
     7f8:	14 f4       	brge	.+4      	; 0x7fe <_ZN11ServoTimer25writeEi+0x24>
     7fa:	8e ee       	ldi	r24, 0xEE	; 238
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	08 97       	sbiw	r24, 0x08	; 8
     800:	ac 01       	movw	r20, r24
     802:	44 0f       	add	r20, r20
     804:	45 2f       	mov	r20, r21
     806:	44 1f       	adc	r20, r20
     808:	55 0b       	sbc	r21, r21
     80a:	2e 2f       	mov	r18, r30
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	f9 01       	movw	r30, r18
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	e2 0f       	add	r30, r18
     816:	f3 1f       	adc	r31, r19
     818:	e2 54       	subi	r30, 0x42	; 66
     81a:	fb 4f       	sbci	r31, 0xFB	; 251
     81c:	41 83       	std	Z+1, r20	; 0x01
     81e:	88 0f       	add	r24, r24
     820:	80 95       	com	r24
     822:	82 83       	std	Z+2, r24	; 0x02
     824:	08 95       	ret

00000826 <StartupHook>:
     826:	65 e0       	ldi	r22, 0x05	; 5
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	8b e1       	ldi	r24, 0x1B	; 27
     82c:	95 e0       	ldi	r25, 0x05	; 5
     82e:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN11ServoTimer26attachEi>
     832:	6e ee       	ldi	r22, 0xEE	; 238
     834:	72 e0       	ldi	r23, 0x02	; 2
     836:	8b e1       	ldi	r24, 0x1B	; 27
     838:	95 e0       	ldi	r25, 0x05	; 5
     83a:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     83e:	64 e0       	ldi	r22, 0x04	; 4
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	8a e1       	ldi	r24, 0x1A	; 26
     844:	95 e0       	ldi	r25, 0x05	; 5
     846:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN11ServoTimer26attachEi>
     84a:	6e ee       	ldi	r22, 0xEE	; 238
     84c:	72 e0       	ldi	r23, 0x02	; 2
     84e:	8a e1       	ldi	r24, 0x1A	; 26
     850:	95 e0       	ldi	r25, 0x05	; 5
     852:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	44 e0       	ldi	r20, 0x04	; 4
     85a:	64 e1       	ldi	r22, 0x14	; 20
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	95 e0       	ldi	r25, 0x05	; 5
     860:	0e 94 07 02 	call	0x40e	; 0x40e <_ZN13LiquidCrystal5beginEhhh>
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	51 e0       	ldi	r21, 0x01	; 1
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN13LiquidCrystal10createCharEhPh>
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	95 e0       	ldi	r25, 0x05	; 5
     876:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN13LiquidCrystal5clearEv>
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	83 e1       	ldi	r24, 0x13	; 19
     87e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <pinMode>
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	82 e1       	ldi	r24, 0x12	; 18
     886:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <pinMode>
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <pinMode>
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	87 e0       	ldi	r24, 0x07	; 7
     896:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <pinMode>
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	87 e0       	ldi	r24, 0x07	; 7
     8a6:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
     8aa:	e9 e6       	ldi	r30, 0x69	; 105
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	82 60       	ori	r24, 0x02	; 2
     8b2:	80 83       	st	Z, r24
     8b4:	e8 9a       	sbi	0x1d, 0	; 29
     8b6:	26 e0       	ldi	r18, 0x06	; 6
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	52 ec       	ldi	r21, 0xC2	; 194
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	85 e2       	ldi	r24, 0x25	; 37
     8c2:	95 e0       	ldi	r25, 0x05	; 5
     8c4:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN14HardwareSerial5beginEmh>
     8c8:	6b eb       	ldi	r22, 0xBB	; 187
     8ca:	71 e0       	ldi	r23, 0x01	; 1
     8cc:	85 e2       	ldi	r24, 0x25	; 37
     8ce:	95 e0       	ldi	r25, 0x05	; 5
     8d0:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>

000008d4 <idle_hook>:
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	00 d0       	rcall	.+0      	; 0x8de <idle_hook+0xa>
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	8d b7       	in	r24, 0x3d	; 61
     8e4:	9e b7       	in	r25, 0x3e	; 62
     8e6:	9a 83       	std	Y+2, r25	; 0x02
     8e8:	89 83       	std	Y+1, r24	; 0x01
     8ea:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <main_sp>
     8ee:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <main_sp+0x1>
     8f2:	89 2b       	or	r24, r25
     8f4:	a9 f4       	brne	.+42     	; 0x920 <__stack+0x21>
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <main_sp+0x1>
     8fe:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <main_sp>
     902:	f8 94       	cli
     904:	86 e5       	ldi	r24, 0x56	; 86
     906:	9b e0       	ldi	r25, 0x0B	; 11
     908:	89 2b       	or	r24, r25
     90a:	11 f0       	breq	.+4      	; 0x910 <__stack+0x11>
     90c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_Z14serialEventRunv>
     910:	78 94       	sei
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	08 95       	ret
     920:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <main_sp>
     924:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <main_sp+0x1>
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	28 17       	cp	r18, r24
     92e:	39 07       	cpc	r19, r25
     930:	41 f3       	breq	.-48     	; 0x902 <__stack+0x3>
     932:	f8 94       	cli
     934:	80 ed       	ldi	r24, 0xD0	; 208
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 20 05 	call	0xa40	; 0xa40 <serial_print>
     93c:	06 e5       	ldi	r16, 0x56	; 86
     93e:	1b e0       	ldi	r17, 0x0B	; 11
     940:	01 15       	cp	r16, r1
     942:	11 05       	cpc	r17, r1
     944:	e9 f3       	breq	.-6      	; 0x940 <__stack+0x41>
     946:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_Z14serialEventRunv>
     94a:	fa cf       	rjmp	.-12     	; 0x940 <__stack+0x41>

0000094c <ErrorHook>:
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	ec 01       	movw	r28, r24
     956:	0e 94 27 12 	call	0x244e	; 0x244e <osEE_get_service_id>
     95a:	8c 01       	movw	r16, r24
     95c:	c4 30       	cpi	r28, 0x04	; 4
     95e:	d1 05       	cpc	r29, r1
     960:	09 f4       	brne	.+2      	; 0x964 <ErrorHook+0x18>
     962:	4c c0       	rjmp	.+152    	; 0x9fc <ErrorHook+0xb0>
     964:	c8 f4       	brcc	.+50     	; 0x998 <ErrorHook+0x4c>
     966:	c1 30       	cpi	r28, 0x01	; 1
     968:	d1 05       	cpc	r29, r1
     96a:	79 f1       	breq	.+94     	; 0x9ca <ErrorHook+0x7e>
     96c:	c3 30       	cpi	r28, 0x03	; 3
     96e:	d1 05       	cpc	r29, r1
     970:	c1 f1       	breq	.+112    	; 0x9e2 <ErrorHook+0x96>
     972:	4a e0       	ldi	r20, 0x0A	; 10
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	be 01       	movw	r22, r28
     978:	85 e2       	ldi	r24, 0x25	; 37
     97a:	95 e0       	ldi	r25, 0x05	; 5
     97c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN5Print5printEii>
     980:	63 ef       	ldi	r22, 0xF3	; 243
     982:	71 e0       	ldi	r23, 0x01	; 1
     984:	85 e2       	ldi	r24, 0x25	; 37
     986:	95 e0       	ldi	r25, 0x05	; 5
     988:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     98c:	0e 94 27 12 	call	0x244e	; 0x244e <osEE_get_service_id>
     990:	4a e0       	ldi	r20, 0x0A	; 10
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	bc 01       	movw	r22, r24
     996:	1d c0       	rjmp	.+58     	; 0x9d2 <ErrorHook+0x86>
     998:	c7 30       	cpi	r28, 0x07	; 7
     99a:	d1 05       	cpc	r29, r1
     99c:	c9 f1       	breq	.+114    	; 0xa10 <ErrorHook+0xc4>
     99e:	ce 30       	cpi	r28, 0x0E	; 14
     9a0:	d1 05       	cpc	r29, r1
     9a2:	39 f7       	brne	.-50     	; 0x972 <ErrorHook+0x26>
     9a4:	64 e2       	ldi	r22, 0x24	; 36
     9a6:	72 e0       	ldi	r23, 0x02	; 2
     9a8:	85 e2       	ldi	r24, 0x25	; 37
     9aa:	95 e0       	ldi	r25, 0x05	; 5
     9ac:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     9b0:	06 32       	cpi	r16, 0x26	; 38
     9b2:	11 05       	cpc	r17, r1
     9b4:	c1 f5       	brne	.+112    	; 0xa26 <ErrorHook+0xda>
     9b6:	68 e3       	ldi	r22, 0x38	; 56
     9b8:	72 e0       	ldi	r23, 0x02	; 2
     9ba:	85 e2       	ldi	r24, 0x25	; 37
     9bc:	95 e0       	ldi	r25, 0x05	; 5
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     9ca:	4a e0       	ldi	r20, 0x0A	; 10
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	85 e2       	ldi	r24, 0x25	; 37
     9d4:	95 e0       	ldi	r25, 0x05	; 5
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <_ZN5Print7printlnEii>
     9e2:	6c ee       	ldi	r22, 0xEC	; 236
     9e4:	71 e0       	ldi	r23, 0x01	; 1
     9e6:	85 e2       	ldi	r24, 0x25	; 37
     9e8:	95 e0       	ldi	r25, 0x05	; 5
     9ea:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     9ee:	4a e0       	ldi	r20, 0x0A	; 10
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	b8 01       	movw	r22, r16
     9f4:	85 e2       	ldi	r24, 0x25	; 37
     9f6:	95 e0       	ldi	r25, 0x05	; 5
     9f8:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN5Print7printlnEii>
     9fc:	65 ef       	ldi	r22, 0xF5	; 245
     9fe:	71 e0       	ldi	r23, 0x01	; 1
     a00:	85 e2       	ldi	r24, 0x25	; 37
     a02:	95 e0       	ldi	r25, 0x05	; 5
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	72 e0       	ldi	r23, 0x02	; 2
     a14:	85 e2       	ldi	r24, 0x25	; 37
     a16:	95 e0       	ldi	r25, 0x05	; 5
     a18:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     a1c:	6c e0       	ldi	r22, 0x0C	; 12
     a1e:	72 e0       	ldi	r23, 0x02	; 2
     a20:	08 32       	cpi	r16, 0x28	; 40
     a22:	11 05       	cpc	r17, r1
     a24:	51 f2       	breq	.-108    	; 0x9ba <ErrorHook+0x6e>
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	08 95       	ret

00000a30 <main>:
     a30:	0e 94 07 0a 	call	0x140e	; 0x140e <init>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <StartOS>
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	08 95       	ret

00000a40 <serial_print>:
     a40:	f8 94       	cli
     a42:	fc 01       	movw	r30, r24
     a44:	01 90       	ld	r0, Z+
     a46:	00 20       	and	r0, r0
     a48:	e9 f7       	brne	.-6      	; 0xa44 <serial_print+0x4>
     a4a:	31 97       	sbiw	r30, 0x01	; 1
     a4c:	af 01       	movw	r20, r30
     a4e:	48 1b       	sub	r20, r24
     a50:	59 0b       	sbc	r21, r25
     a52:	bc 01       	movw	r22, r24
     a54:	85 e2       	ldi	r24, 0x25	; 37
     a56:	95 e0       	ldi	r25, 0x05	; 5
     a58:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_ZN5Print5writeEPKhj>
     a5c:	78 94       	sei
     a5e:	08 95       	ret

00000a60 <FuncClockTask>:
     a60:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <second>
     a64:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <second+0x1>
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	8c 33       	cpi	r24, 0x3C	; 60
     a6c:	91 05       	cpc	r25, r1
     a6e:	41 f0       	breq	.+16     	; 0xa80 <FuncClockTask+0x20>
     a70:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <second+0x1>
     a74:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <second>
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <isNewTime>
     a7e:	08 95       	ret
     a80:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <second+0x1>
     a84:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <second>
     a88:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <minute>
     a8c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <minute+0x1>
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	8c 33       	cpi	r24, 0x3C	; 60
     a94:	91 05       	cpc	r25, r1
     a96:	29 f0       	breq	.+10     	; 0xaa2 <FuncClockTask+0x42>
     a98:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <minute+0x1>
     a9c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <minute>
     aa0:	eb cf       	rjmp	.-42     	; 0xa78 <FuncClockTask+0x18>
     aa2:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <minute+0x1>
     aa6:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <minute>
     aaa:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <hour>
     aae:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <hour+0x1>
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	88 31       	cpi	r24, 0x18	; 24
     ab6:	91 05       	cpc	r25, r1
     ab8:	29 f0       	breq	.+10     	; 0xac4 <FuncClockTask+0x64>
     aba:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <hour+0x1>
     abe:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <hour>
     ac2:	da cf       	rjmp	.-76     	; 0xa78 <FuncClockTask+0x18>
     ac4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <hour+0x1>
     ac8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <hour>
     acc:	d5 cf       	rjmp	.-86     	; 0xa78 <FuncClockTask+0x18>

00000ace <FuncToggleEastServoTask>:
     ace:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
     ad2:	88 23       	and	r24, r24
     ad4:	c9 f0       	breq	.+50     	; 0xb08 <FuncToggleEastServoTask+0x3a>
     ad6:	6c e5       	ldi	r22, 0x5C	; 92
     ad8:	73 e0       	ldi	r23, 0x03	; 3
     ada:	85 e2       	ldi	r24, 0x25	; 37
     adc:	95 e0       	ldi	r25, 0x05	; 5
     ade:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     ae2:	6a ec       	ldi	r22, 0xCA	; 202
     ae4:	78 e0       	ldi	r23, 0x08	; 8
     ae6:	8b e1       	ldi	r24, 0x1B	; 27
     ae8:	95 e0       	ldi	r25, 0x05	; 5
     aea:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     aee:	60 e7       	ldi	r22, 0x70	; 112
     af0:	73 e0       	ldi	r23, 0x03	; 3
     af2:	85 e2       	ldi	r24, 0x25	; 37
     af4:	95 e0       	ldi	r25, 0x05	; 5
     af6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     afa:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	89 27       	eor	r24, r25
     b02:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <eastContracted>
     b06:	08 95       	ret
     b08:	63 e8       	ldi	r22, 0x83	; 131
     b0a:	73 e0       	ldi	r23, 0x03	; 3
     b0c:	85 e2       	ldi	r24, 0x25	; 37
     b0e:	95 e0       	ldi	r25, 0x05	; 5
     b10:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     b14:	6e ee       	ldi	r22, 0xEE	; 238
     b16:	72 e0       	ldi	r23, 0x02	; 2
     b18:	8b e1       	ldi	r24, 0x1B	; 27
     b1a:	95 e0       	ldi	r25, 0x05	; 5
     b1c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     b20:	6b e9       	ldi	r22, 0x9B	; 155
     b22:	73 e0       	ldi	r23, 0x03	; 3
     b24:	e6 cf       	rjmp	.-52     	; 0xaf2 <FuncToggleEastServoTask+0x24>

00000b26 <FuncToggleWestServoTask>:
     b26:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
     b2a:	88 23       	and	r24, r24
     b2c:	c9 f0       	breq	.+50     	; 0xb60 <FuncToggleWestServoTask+0x3a>
     b2e:	62 eb       	ldi	r22, 0xB2	; 178
     b30:	73 e0       	ldi	r23, 0x03	; 3
     b32:	85 e2       	ldi	r24, 0x25	; 37
     b34:	95 e0       	ldi	r25, 0x05	; 5
     b36:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     b3a:	6a ec       	ldi	r22, 0xCA	; 202
     b3c:	78 e0       	ldi	r23, 0x08	; 8
     b3e:	8a e1       	ldi	r24, 0x1A	; 26
     b40:	95 e0       	ldi	r25, 0x05	; 5
     b42:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     b46:	66 ec       	ldi	r22, 0xC6	; 198
     b48:	73 e0       	ldi	r23, 0x03	; 3
     b4a:	85 e2       	ldi	r24, 0x25	; 37
     b4c:	95 e0       	ldi	r25, 0x05	; 5
     b4e:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     b52:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	89 27       	eor	r24, r25
     b5a:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <westContracted>
     b5e:	08 95       	ret
     b60:	69 ed       	ldi	r22, 0xD9	; 217
     b62:	73 e0       	ldi	r23, 0x03	; 3
     b64:	85 e2       	ldi	r24, 0x25	; 37
     b66:	95 e0       	ldi	r25, 0x05	; 5
     b68:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     b6c:	6e ee       	ldi	r22, 0xEE	; 238
     b6e:	72 e0       	ldi	r23, 0x02	; 2
     b70:	8a e1       	ldi	r24, 0x1A	; 26
     b72:	95 e0       	ldi	r25, 0x05	; 5
     b74:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     b78:	6b e9       	ldi	r22, 0x9B	; 155
     b7a:	73 e0       	ldi	r23, 0x03	; 3
     b7c:	e6 cf       	rjmp	.-52     	; 0xb4a <FuncToggleWestServoTask+0x24>

00000b7e <FuncToggleServoTask>:
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	00 d0       	rcall	.+0      	; 0xb84 <FuncToggleServoTask+0x6>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	11 e0       	ldi	r17, 0x01	; 1
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <WaitEvent>
     b92:	be 01       	movw	r22, r28
     b94:	6f 5f       	subi	r22, 0xFF	; 255
     b96:	7f 4f       	sbci	r23, 0xFF	; 255
     b98:	86 e0       	ldi	r24, 0x06	; 6
     b9a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <GetEvent>
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	81 ff       	sbrs	r24, 1
     ba2:	1f c0       	rjmp	.+62     	; 0xbe2 <FuncToggleServoTask+0x64>
     ba4:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
     ba8:	88 23       	and	r24, r24
     baa:	f1 f1       	breq	.+124    	; 0xc28 <FuncToggleServoTask+0xaa>
     bac:	6c e5       	ldi	r22, 0x5C	; 92
     bae:	73 e0       	ldi	r23, 0x03	; 3
     bb0:	85 e2       	ldi	r24, 0x25	; 37
     bb2:	95 e0       	ldi	r25, 0x05	; 5
     bb4:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     bb8:	6a ec       	ldi	r22, 0xCA	; 202
     bba:	78 e0       	ldi	r23, 0x08	; 8
     bbc:	8b e1       	ldi	r24, 0x1B	; 27
     bbe:	95 e0       	ldi	r25, 0x05	; 5
     bc0:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     bc4:	60 e7       	ldi	r22, 0x70	; 112
     bc6:	73 e0       	ldi	r23, 0x03	; 3
     bc8:	85 e2       	ldi	r24, 0x25	; 37
     bca:	95 e0       	ldi	r25, 0x05	; 5
     bcc:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     bd0:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
     bd4:	81 27       	eor	r24, r17
     bd6:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <eastContracted>
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <ClearEvent>
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	80 ff       	sbrs	r24, 0
     be6:	d1 cf       	rjmp	.-94     	; 0xb8a <FuncToggleServoTask+0xc>
     be8:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
     bec:	88 23       	and	r24, r24
     bee:	59 f1       	breq	.+86     	; 0xc46 <FuncToggleServoTask+0xc8>
     bf0:	62 eb       	ldi	r22, 0xB2	; 178
     bf2:	73 e0       	ldi	r23, 0x03	; 3
     bf4:	85 e2       	ldi	r24, 0x25	; 37
     bf6:	95 e0       	ldi	r25, 0x05	; 5
     bf8:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     bfc:	6a ec       	ldi	r22, 0xCA	; 202
     bfe:	78 e0       	ldi	r23, 0x08	; 8
     c00:	8a e1       	ldi	r24, 0x1A	; 26
     c02:	95 e0       	ldi	r25, 0x05	; 5
     c04:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     c08:	66 ec       	ldi	r22, 0xC6	; 198
     c0a:	73 e0       	ldi	r23, 0x03	; 3
     c0c:	85 e2       	ldi	r24, 0x25	; 37
     c0e:	95 e0       	ldi	r25, 0x05	; 5
     c10:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     c14:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
     c18:	81 27       	eor	r24, r17
     c1a:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <westContracted>
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <ClearEvent>
     c26:	b1 cf       	rjmp	.-158    	; 0xb8a <FuncToggleServoTask+0xc>
     c28:	63 e8       	ldi	r22, 0x83	; 131
     c2a:	73 e0       	ldi	r23, 0x03	; 3
     c2c:	85 e2       	ldi	r24, 0x25	; 37
     c2e:	95 e0       	ldi	r25, 0x05	; 5
     c30:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     c34:	6e ee       	ldi	r22, 0xEE	; 238
     c36:	72 e0       	ldi	r23, 0x02	; 2
     c38:	8b e1       	ldi	r24, 0x1B	; 27
     c3a:	95 e0       	ldi	r25, 0x05	; 5
     c3c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     c40:	6b e9       	ldi	r22, 0x9B	; 155
     c42:	73 e0       	ldi	r23, 0x03	; 3
     c44:	c1 cf       	rjmp	.-126    	; 0xbc8 <FuncToggleServoTask+0x4a>
     c46:	69 ed       	ldi	r22, 0xD9	; 217
     c48:	73 e0       	ldi	r23, 0x03	; 3
     c4a:	85 e2       	ldi	r24, 0x25	; 37
     c4c:	95 e0       	ldi	r25, 0x05	; 5
     c4e:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN5Print7printlnEPKc>
     c52:	6e ee       	ldi	r22, 0xEE	; 238
     c54:	72 e0       	ldi	r23, 0x02	; 2
     c56:	8a e1       	ldi	r24, 0x1A	; 26
     c58:	95 e0       	ldi	r25, 0x05	; 5
     c5a:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     c5e:	6b e9       	ldi	r22, 0x9B	; 155
     c60:	73 e0       	ldi	r23, 0x03	; 3
     c62:	d4 cf       	rjmp	.-88     	; 0xc0c <FuncToggleServoTask+0x8e>

00000c64 <FuncDisplayTask>:
     c64:	8f 92       	push	r8
     c66:	9f 92       	push	r9
     c68:	af 92       	push	r10
     c6a:	bf 92       	push	r11
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	64 97       	sbiw	r28, 0x14	; 20
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	95 e0       	ldi	r25, 0x05	; 5
     c94:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     c98:	80 90 e6 04 	lds	r8, 0x04E6	; 0x8004e6 <avgEast>
     c9c:	90 90 e7 04 	lds	r9, 0x04E7	; 0x8004e7 <avgEast+0x1>
     ca0:	a0 90 e8 04 	lds	r10, 0x04E8	; 0x8004e8 <avgEast+0x2>
     ca4:	b0 90 e9 04 	lds	r11, 0x04E9	; 0x8004e9 <avgEast+0x3>
     ca8:	c0 90 e2 04 	lds	r12, 0x04E2	; 0x8004e2 <avgWest>
     cac:	d0 90 e3 04 	lds	r13, 0x04E3	; 0x8004e3 <avgWest+0x1>
     cb0:	e0 90 e4 04 	lds	r14, 0x04E4	; 0x8004e4 <avgWest+0x2>
     cb4:	f0 90 e5 04 	lds	r15, 0x04E5	; 0x8004e5 <avgWest+0x3>
     cb8:	c5 01       	movw	r24, r10
     cba:	b4 01       	movw	r22, r8
     cbc:	0e 94 87 18 	call	0x310e	; 0x310e <__fixsfsi>
     cc0:	7f 93       	push	r23
     cc2:	6f 93       	push	r22
     cc4:	a7 01       	movw	r20, r14
     cc6:	96 01       	movw	r18, r12
     cc8:	c5 01       	movw	r24, r10
     cca:	b4 01       	movw	r22, r8
     ccc:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__addsf3>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	5f e3       	ldi	r21, 0x3F	; 63
     cd8:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsf3>
     cdc:	0e 94 87 18 	call	0x310e	; 0x310e <__fixsfsi>
     ce0:	7f 93       	push	r23
     ce2:	6f 93       	push	r22
     ce4:	c7 01       	movw	r24, r14
     ce6:	b6 01       	movw	r22, r12
     ce8:	0e 94 87 18 	call	0x310e	; 0x310e <__fixsfsi>
     cec:	7f 93       	push	r23
     cee:	6f 93       	push	r22
     cf0:	89 ef       	ldi	r24, 0xF9	; 249
     cf2:	93 e0       	ldi	r25, 0x03	; 3
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	8e 01       	movw	r16, r28
     cfa:	0f 5f       	subi	r16, 0xFF	; 255
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	1f 93       	push	r17
     d00:	0f 93       	push	r16
     d02:	0e 94 93 1b 	call	0x3726	; 0x3726 <sprintf>
     d06:	b8 01       	movw	r22, r16
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	95 e0       	ldi	r25, 0x05	; 5
     d0c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	95 e0       	ldi	r25, 0x05	; 5
     d18:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
     d2a:	25 ef       	ldi	r18, 0xF5	; 245
     d2c:	33 e0       	ldi	r19, 0x03	; 3
     d2e:	88 23       	and	r24, r24
     d30:	11 f0       	breq	.+4      	; 0xd36 <FuncDisplayTask+0xd2>
     d32:	21 ef       	ldi	r18, 0xF1	; 241
     d34:	33 e0       	ldi	r19, 0x03	; 3
     d36:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
     d3a:	81 11       	cpse	r24, r1
     d3c:	89 c0       	rjmp	.+274    	; 0xe50 <FuncDisplayTask+0x1ec>
     d3e:	85 ef       	ldi	r24, 0xF5	; 245
     d40:	93 e0       	ldi	r25, 0x03	; 3
     d42:	3f 93       	push	r19
     d44:	2f 93       	push	r18
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	8e e0       	ldi	r24, 0x0E	; 14
     d4c:	94 e0       	ldi	r25, 0x04	; 4
     d4e:	9f 93       	push	r25
     d50:	8f 93       	push	r24
     d52:	1f 93       	push	r17
     d54:	0f 93       	push	r16
     d56:	0e 94 93 1b 	call	0x3726	; 0x3726 <sprintf>
     d5a:	b8 01       	movw	r22, r16
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	95 e0       	ldi	r25, 0x05	; 5
     d60:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     d64:	42 e0       	ldi	r20, 0x02	; 2
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	95 e0       	ldi	r25, 0x05	; 5
     d6c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     d70:	87 e0       	ldi	r24, 0x07	; 7
     d72:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <digitalRead>
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	89 2b       	or	r24, r25
     d82:	09 f0       	breq	.+2      	; 0xd86 <FuncDisplayTask+0x122>
     d84:	68 c0       	rjmp	.+208    	; 0xe56 <FuncDisplayTask+0x1f2>
     d86:	95 ef       	ldi	r25, 0xF5	; 245
     d88:	e9 2e       	mov	r14, r25
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	f9 2e       	mov	r15, r25
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <digitalRead>
     d94:	89 2b       	or	r24, r25
     d96:	09 f0       	breq	.+2      	; 0xd9a <FuncDisplayTask+0x136>
     d98:	63 c0       	rjmp	.+198    	; 0xe60 <FuncDisplayTask+0x1fc>
     d9a:	85 ef       	ldi	r24, 0xF5	; 245
     d9c:	93 e0       	ldi	r25, 0x03	; 3
     d9e:	ff 92       	push	r15
     da0:	ef 92       	push	r14
     da2:	9f 93       	push	r25
     da4:	8f 93       	push	r24
     da6:	80 e2       	ldi	r24, 0x20	; 32
     da8:	94 e0       	ldi	r25, 0x04	; 4
     daa:	9f 93       	push	r25
     dac:	8f 93       	push	r24
     dae:	1f 93       	push	r17
     db0:	0f 93       	push	r16
     db2:	0e 94 93 1b 	call	0x3726	; 0x3726 <sprintf>
     db6:	b8 01       	movw	r22, r16
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	95 e0       	ldi	r25, 0x05	; 5
     dbc:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <isNewTime>
     dce:	88 23       	and	r24, r24
     dd0:	51 f1       	breq	.+84     	; 0xe26 <FuncDisplayTask+0x1c2>
     dd2:	43 e0       	ldi	r20, 0x03	; 3
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	95 e0       	ldi	r25, 0x05	; 5
     dda:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     dde:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <second+0x1>
     de2:	8f 93       	push	r24
     de4:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <second>
     de8:	8f 93       	push	r24
     dea:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <minute+0x1>
     dee:	8f 93       	push	r24
     df0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <minute>
     df4:	8f 93       	push	r24
     df6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <hour+0x1>
     dfa:	8f 93       	push	r24
     dfc:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <hour>
     e00:	8f 93       	push	r24
     e02:	82 e3       	ldi	r24, 0x32	; 50
     e04:	94 e0       	ldi	r25, 0x04	; 4
     e06:	9f 93       	push	r25
     e08:	8f 93       	push	r24
     e0a:	1f 93       	push	r17
     e0c:	0f 93       	push	r16
     e0e:	0e 94 93 1b 	call	0x3726	; 0x3726 <sprintf>
     e12:	b8 01       	movw	r22, r16
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	95 e0       	ldi	r25, 0x05	; 5
     e18:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	0e 94 1f 10 	call	0x203e	; 0x203e <TerminateTask>
     e2a:	64 96       	adiw	r28, 0x14	; 20
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	9f 90       	pop	r9
     e4c:	8f 90       	pop	r8
     e4e:	08 95       	ret
     e50:	81 ef       	ldi	r24, 0xF1	; 241
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	76 cf       	rjmp	.-276    	; 0xd42 <FuncDisplayTask+0xde>
     e56:	81 ef       	ldi	r24, 0xF1	; 241
     e58:	e8 2e       	mov	r14, r24
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	f8 2e       	mov	r15, r24
     e5e:	97 cf       	rjmp	.-210    	; 0xd8e <FuncDisplayTask+0x12a>
     e60:	81 ef       	ldi	r24, 0xF1	; 241
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	9c cf       	rjmp	.-200    	; 0xd9e <FuncDisplayTask+0x13a>

00000e66 <getLux>:
     e66:	cf 92       	push	r12
     e68:	df 92       	push	r13
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	bc 01       	movw	r22, r24
     e70:	99 0f       	add	r25, r25
     e72:	88 0b       	sbc	r24, r24
     e74:	99 0b       	sbc	r25, r25
     e76:	0e 94 bf 18 	call	0x317e	; 0x317e <__floatsisf>
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 ec       	ldi	r19, 0xC0	; 192
     e7e:	4f e7       	ldi	r20, 0x7F	; 127
     e80:	54 e4       	ldi	r21, 0x44	; 68
     e82:	0e 94 15 18 	call	0x302a	; 0x302a <__divsf3>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 ea       	ldi	r20, 0xA0	; 160
     e8c:	50 e4       	ldi	r21, 0x40	; 64
     e8e:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsf3>
     e92:	6b 01       	movw	r12, r22
     e94:	7c 01       	movw	r14, r24
     e96:	ac 01       	movw	r20, r24
     e98:	9b 01       	movw	r18, r22
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 ea       	ldi	r24, 0xA0	; 160
     ea0:	90 e4       	ldi	r25, 0x40	; 64
     ea2:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__subsf3>
     ea6:	a7 01       	movw	r20, r14
     ea8:	96 01       	movw	r18, r12
     eaa:	0e 94 15 18 	call	0x302a	; 0x302a <__divsf3>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e4       	ldi	r19, 0x40	; 64
     eb2:	4c e9       	ldi	r20, 0x9C	; 156
     eb4:	55 e4       	ldi	r21, 0x45	; 69
     eb6:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsf3>
     eba:	22 ec       	ldi	r18, 0xC2	; 194
     ebc:	3f e2       	ldi	r19, 0x2F	; 47
     ebe:	45 e9       	ldi	r20, 0x95	; 149
     ec0:	5f eb       	ldi	r21, 0xBF	; 191
     ec2:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <pow>
     ec6:	2e e1       	ldi	r18, 0x1E	; 30
     ec8:	38 e4       	ldi	r19, 0x48	; 72
     eca:	49 e5       	ldi	r20, 0x59	; 89
     ecc:	59 e4       	ldi	r21, 0x49	; 73
     ece:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsf3>
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	08 95       	ret

00000edc <FuncDetectTask>:
     edc:	cf 92       	push	r12
     ede:	df 92       	push	r13
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <countEast>
     eec:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <countEast+0x1>
     ef0:	04 97       	sbiw	r24, 0x04	; 4
     ef2:	0c f0       	brlt	.+2      	; 0xef6 <FuncDetectTask+0x1a>
     ef4:	5d c0       	rjmp	.+186    	; 0xfb0 <FuncDetectTask+0xd4>
     ef6:	6a e4       	ldi	r22, 0x4A	; 74
     ef8:	74 e0       	ldi	r23, 0x04	; 4
     efa:	85 e2       	ldi	r24, 0x25	; 37
     efc:	95 e0       	ldi	r25, 0x05	; 5
     efe:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     f02:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <countEast>
     f06:	f0 91 df 04 	lds	r31, 0x04DF	; 0x8004df <countEast+0x1>
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	e8 55       	subi	r30, 0x58	; 88
     f10:	fe 4f       	sbci	r31, 0xFE	; 254
     f12:	60 81       	ld	r22, Z
     f14:	71 81       	ldd	r23, Z+1	; 0x01
     f16:	4a e0       	ldi	r20, 0x0A	; 10
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	85 e2       	ldi	r24, 0x25	; 37
     f1c:	95 e0       	ldi	r25, 0x05	; 5
     f1e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN5Print7printlnEii>
     f22:	c0 91 de 04 	lds	r28, 0x04DE	; 0x8004de <countEast>
     f26:	d0 91 df 04 	lds	r29, 0x04DF	; 0x8004df <countEast+0x1>
     f2a:	83 e1       	ldi	r24, 0x13	; 19
     f2c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <analogRead>
     f30:	cc 0f       	add	r28, r28
     f32:	dd 1f       	adc	r29, r29
     f34:	c8 55       	subi	r28, 0x58	; 88
     f36:	de 4f       	sbci	r29, 0xFE	; 254
     f38:	99 83       	std	Y+1, r25	; 0x01
     f3a:	88 83       	st	Y, r24
     f3c:	c0 91 de 04 	lds	r28, 0x04DE	; 0x8004de <countEast>
     f40:	d0 91 df 04 	lds	r29, 0x04DF	; 0x8004df <countEast+0x1>
     f44:	fe 01       	movw	r30, r28
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	e8 55       	subi	r30, 0x58	; 88
     f4c:	fe 4f       	sbci	r31, 0xFE	; 254
     f4e:	80 81       	ld	r24, Z
     f50:	91 81       	ldd	r25, Z+1	; 0x01
     f52:	0e 94 33 07 	call	0xe66	; 0xe66 <getLux>
     f56:	cc 0f       	add	r28, r28
     f58:	dd 1f       	adc	r29, r29
     f5a:	cc 0f       	add	r28, r28
     f5c:	dd 1f       	adc	r29, r29
     f5e:	ca 50       	subi	r28, 0x0A	; 10
     f60:	db 4f       	sbci	r29, 0xFB	; 251
     f62:	68 83       	st	Y, r22
     f64:	79 83       	std	Y+1, r23	; 0x01
     f66:	8a 83       	std	Y+2, r24	; 0x02
     f68:	9b 83       	std	Y+3, r25	; 0x03
     f6a:	69 e5       	ldi	r22, 0x59	; 89
     f6c:	74 e0       	ldi	r23, 0x04	; 4
     f6e:	85 e2       	ldi	r24, 0x25	; 37
     f70:	95 e0       	ldi	r25, 0x05	; 5
     f72:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     f76:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <countEast>
     f7a:	f0 91 df 04 	lds	r31, 0x04DF	; 0x8004df <countEast+0x1>
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ea 50       	subi	r30, 0x0A	; 10
     f88:	fb 4f       	sbci	r31, 0xFB	; 251
     f8a:	40 81       	ld	r20, Z
     f8c:	51 81       	ldd	r21, Z+1	; 0x01
     f8e:	62 81       	ldd	r22, Z+2	; 0x02
     f90:	73 81       	ldd	r23, Z+3	; 0x03
     f92:	22 e0       	ldi	r18, 0x02	; 2
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	85 e2       	ldi	r24, 0x25	; 37
     f98:	95 e0       	ldi	r25, 0x05	; 5
     f9a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print7printlnEdi>
     f9e:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <countEast>
     fa2:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <countEast+0x1>
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <countEast+0x1>
     fac:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <countEast>
     fb0:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <countWest>
     fb4:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <countWest+0x1>
     fb8:	04 97       	sbiw	r24, 0x04	; 4
     fba:	0c f0       	brlt	.+2      	; 0xfbe <FuncDetectTask+0xe2>
     fbc:	5d c0       	rjmp	.+186    	; 0x1078 <FuncDetectTask+0x19c>
     fbe:	64 e6       	ldi	r22, 0x64	; 100
     fc0:	74 e0       	ldi	r23, 0x04	; 4
     fc2:	85 e2       	ldi	r24, 0x25	; 37
     fc4:	95 e0       	ldi	r25, 0x05	; 5
     fc6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
     fca:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <countWest>
     fce:	f0 91 dd 04 	lds	r31, 0x04DD	; 0x8004dd <countWest+0x1>
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	ee 55       	subi	r30, 0x5E	; 94
     fd8:	fe 4f       	sbci	r31, 0xFE	; 254
     fda:	60 81       	ld	r22, Z
     fdc:	71 81       	ldd	r23, Z+1	; 0x01
     fde:	4a e0       	ldi	r20, 0x0A	; 10
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	85 e2       	ldi	r24, 0x25	; 37
     fe4:	95 e0       	ldi	r25, 0x05	; 5
     fe6:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN5Print7printlnEii>
     fea:	c0 91 dc 04 	lds	r28, 0x04DC	; 0x8004dc <countWest>
     fee:	d0 91 dd 04 	lds	r29, 0x04DD	; 0x8004dd <countWest+0x1>
     ff2:	82 e1       	ldi	r24, 0x12	; 18
     ff4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <analogRead>
     ff8:	cc 0f       	add	r28, r28
     ffa:	dd 1f       	adc	r29, r29
     ffc:	ce 55       	subi	r28, 0x5E	; 94
     ffe:	de 4f       	sbci	r29, 0xFE	; 254
    1000:	99 83       	std	Y+1, r25	; 0x01
    1002:	88 83       	st	Y, r24
    1004:	c0 91 dc 04 	lds	r28, 0x04DC	; 0x8004dc <countWest>
    1008:	d0 91 dd 04 	lds	r29, 0x04DD	; 0x8004dd <countWest+0x1>
    100c:	fe 01       	movw	r30, r28
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	ee 55       	subi	r30, 0x5E	; 94
    1014:	fe 4f       	sbci	r31, 0xFE	; 254
    1016:	80 81       	ld	r24, Z
    1018:	91 81       	ldd	r25, Z+1	; 0x01
    101a:	0e 94 33 07 	call	0xe66	; 0xe66 <getLux>
    101e:	cc 0f       	add	r28, r28
    1020:	dd 1f       	adc	r29, r29
    1022:	cc 0f       	add	r28, r28
    1024:	dd 1f       	adc	r29, r29
    1026:	c6 51       	subi	r28, 0x16	; 22
    1028:	db 4f       	sbci	r29, 0xFB	; 251
    102a:	68 83       	st	Y, r22
    102c:	79 83       	std	Y+1, r23	; 0x01
    102e:	8a 83       	std	Y+2, r24	; 0x02
    1030:	9b 83       	std	Y+3, r25	; 0x03
    1032:	63 e7       	ldi	r22, 0x73	; 115
    1034:	74 e0       	ldi	r23, 0x04	; 4
    1036:	85 e2       	ldi	r24, 0x25	; 37
    1038:	95 e0       	ldi	r25, 0x05	; 5
    103a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
    103e:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <countWest>
    1042:	f0 91 dd 04 	lds	r31, 0x04DD	; 0x8004dd <countWest+0x1>
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	e6 51       	subi	r30, 0x16	; 22
    1050:	fb 4f       	sbci	r31, 0xFB	; 251
    1052:	40 81       	ld	r20, Z
    1054:	51 81       	ldd	r21, Z+1	; 0x01
    1056:	62 81       	ldd	r22, Z+2	; 0x02
    1058:	73 81       	ldd	r23, Z+3	; 0x03
    105a:	22 e0       	ldi	r18, 0x02	; 2
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	85 e2       	ldi	r24, 0x25	; 37
    1060:	95 e0       	ldi	r25, 0x05	; 5
    1062:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print7printlnEdi>
    1066:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <countWest>
    106a:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <countWest+0x1>
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <countWest+0x1>
    1074:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <countWest>
    1078:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <dataLuxEast+0x4>
    107c:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <dataLuxEast+0x5>
    1080:	40 91 fc 04 	lds	r20, 0x04FC	; 0x8004fc <dataLuxEast+0x6>
    1084:	50 91 fd 04 	lds	r21, 0x04FD	; 0x8004fd <dataLuxEast+0x7>
    1088:	60 91 f6 04 	lds	r22, 0x04F6	; 0x8004f6 <dataLuxEast>
    108c:	70 91 f7 04 	lds	r23, 0x04F7	; 0x8004f7 <dataLuxEast+0x1>
    1090:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <dataLuxEast+0x2>
    1094:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <dataLuxEast+0x3>
    1098:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__addsf3>
    109c:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <dataLuxEast+0x8>
    10a0:	30 91 ff 04 	lds	r19, 0x04FF	; 0x8004ff <dataLuxEast+0x9>
    10a4:	40 91 00 05 	lds	r20, 0x0500	; 0x800500 <dataLuxEast+0xa>
    10a8:	50 91 01 05 	lds	r21, 0x0501	; 0x800501 <dataLuxEast+0xb>
    10ac:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__addsf3>
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e4       	ldi	r20, 0x40	; 64
    10b6:	50 e4       	ldi	r21, 0x40	; 64
    10b8:	0e 94 15 18 	call	0x302a	; 0x302a <__divsf3>
    10bc:	60 93 e6 04 	sts	0x04E6, r22	; 0x8004e6 <avgEast>
    10c0:	70 93 e7 04 	sts	0x04E7, r23	; 0x8004e7 <avgEast+0x1>
    10c4:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <avgEast+0x2>
    10c8:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <avgEast+0x3>
    10cc:	6e e7       	ldi	r22, 0x7E	; 126
    10ce:	74 e0       	ldi	r23, 0x04	; 4
    10d0:	85 e2       	ldi	r24, 0x25	; 37
    10d2:	95 e0       	ldi	r25, 0x05	; 5
    10d4:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
    10d8:	40 91 e6 04 	lds	r20, 0x04E6	; 0x8004e6 <avgEast>
    10dc:	50 91 e7 04 	lds	r21, 0x04E7	; 0x8004e7 <avgEast+0x1>
    10e0:	60 91 e8 04 	lds	r22, 0x04E8	; 0x8004e8 <avgEast+0x2>
    10e4:	70 91 e9 04 	lds	r23, 0x04E9	; 0x8004e9 <avgEast+0x3>
    10e8:	22 e0       	ldi	r18, 0x02	; 2
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	85 e2       	ldi	r24, 0x25	; 37
    10ee:	95 e0       	ldi	r25, 0x05	; 5
    10f0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print7printlnEdi>
    10f4:	20 91 ee 04 	lds	r18, 0x04EE	; 0x8004ee <dataLuxWest+0x4>
    10f8:	30 91 ef 04 	lds	r19, 0x04EF	; 0x8004ef <dataLuxWest+0x5>
    10fc:	40 91 f0 04 	lds	r20, 0x04F0	; 0x8004f0 <dataLuxWest+0x6>
    1100:	50 91 f1 04 	lds	r21, 0x04F1	; 0x8004f1 <dataLuxWest+0x7>
    1104:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <dataLuxWest>
    1108:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <dataLuxWest+0x1>
    110c:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <dataLuxWest+0x2>
    1110:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <dataLuxWest+0x3>
    1114:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__addsf3>
    1118:	20 91 f2 04 	lds	r18, 0x04F2	; 0x8004f2 <dataLuxWest+0x8>
    111c:	30 91 f3 04 	lds	r19, 0x04F3	; 0x8004f3 <dataLuxWest+0x9>
    1120:	40 91 f4 04 	lds	r20, 0x04F4	; 0x8004f4 <dataLuxWest+0xa>
    1124:	50 91 f5 04 	lds	r21, 0x04F5	; 0x8004f5 <dataLuxWest+0xb>
    1128:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__addsf3>
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e4       	ldi	r20, 0x40	; 64
    1132:	50 e4       	ldi	r21, 0x40	; 64
    1134:	0e 94 15 18 	call	0x302a	; 0x302a <__divsf3>
    1138:	60 93 e2 04 	sts	0x04E2, r22	; 0x8004e2 <avgWest>
    113c:	70 93 e3 04 	sts	0x04E3, r23	; 0x8004e3 <avgWest+0x1>
    1140:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <avgWest+0x2>
    1144:	90 93 e5 04 	sts	0x04E5, r25	; 0x8004e5 <avgWest+0x3>
    1148:	6d e8       	ldi	r22, 0x8D	; 141
    114a:	74 e0       	ldi	r23, 0x04	; 4
    114c:	85 e2       	ldi	r24, 0x25	; 37
    114e:	95 e0       	ldi	r25, 0x05	; 5
    1150:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print5printEPKc>
    1154:	40 91 e2 04 	lds	r20, 0x04E2	; 0x8004e2 <avgWest>
    1158:	50 91 e3 04 	lds	r21, 0x04E3	; 0x8004e3 <avgWest+0x1>
    115c:	60 91 e4 04 	lds	r22, 0x04E4	; 0x8004e4 <avgWest+0x2>
    1160:	70 91 e5 04 	lds	r23, 0x04E5	; 0x8004e5 <avgWest+0x3>
    1164:	22 e0       	ldi	r18, 0x02	; 2
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	85 e2       	ldi	r24, 0x25	; 37
    116a:	95 e0       	ldi	r25, 0x05	; 5
    116c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print7printlnEdi>
    1170:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <countEast>
    1174:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <countEast+0x1>
    1178:	03 97       	sbiw	r24, 0x03	; 3
    117a:	21 f4       	brne	.+8      	; 0x1184 <FuncDetectTask+0x2a8>
    117c:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <countEast+0x1>
    1180:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <countEast>
    1184:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <countWest>
    1188:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <countWest+0x1>
    118c:	03 97       	sbiw	r24, 0x03	; 3
    118e:	21 f4       	brne	.+8      	; 0x1198 <FuncDetectTask+0x2bc>
    1190:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <countWest+0x1>
    1194:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <countWest>
    1198:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <hour>
    119c:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <hour+0x1>
    11a0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <minute>
    11a4:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <minute+0x1>
    11a8:	22 31       	cpi	r18, 0x12	; 18
    11aa:	31 05       	cpc	r19, r1
    11ac:	0c f4       	brge	.+2      	; 0x11b0 <FuncDetectTask+0x2d4>
    11ae:	41 c0       	rjmp	.+130    	; 0x1232 <FuncDetectTask+0x356>
    11b0:	4e 97       	sbiw	r24, 0x1e	; 30
    11b2:	0c f0       	brlt	.+2      	; 0x11b6 <FuncDetectTask+0x2da>
    11b4:	44 c0       	rjmp	.+136    	; 0x123e <FuncDetectTask+0x362>
    11b6:	c0 90 e6 04 	lds	r12, 0x04E6	; 0x8004e6 <avgEast>
    11ba:	d0 90 e7 04 	lds	r13, 0x04E7	; 0x8004e7 <avgEast+0x1>
    11be:	e0 90 e8 04 	lds	r14, 0x04E8	; 0x8004e8 <avgEast+0x2>
    11c2:	f0 90 e9 04 	lds	r15, 0x04E9	; 0x8004e9 <avgEast+0x3>
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	4a ef       	ldi	r20, 0xFA	; 250
    11cc:	53 e4       	ldi	r21, 0x43	; 67
    11ce:	c7 01       	movw	r24, r14
    11d0:	b6 01       	movw	r22, r12
    11d2:	0e 94 10 18 	call	0x3020	; 0x3020 <__cmpsf2>
    11d6:	87 ff       	sbrs	r24, 7
    11d8:	74 c0       	rjmp	.+232    	; 0x12c2 <FuncDetectTask+0x3e6>
    11da:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
    11de:	81 11       	cpse	r24, r1
    11e0:	90 c0       	rjmp	.+288    	; 0x1302 <FuncDetectTask+0x426>
    11e2:	62 e0       	ldi	r22, 0x02	; 2
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	86 e0       	ldi	r24, 0x06	; 6
    11e8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <SetEvent>
    11ec:	c0 90 e2 04 	lds	r12, 0x04E2	; 0x8004e2 <avgWest>
    11f0:	d0 90 e3 04 	lds	r13, 0x04E3	; 0x8004e3 <avgWest+0x1>
    11f4:	e0 90 e4 04 	lds	r14, 0x04E4	; 0x8004e4 <avgWest+0x2>
    11f8:	f0 90 e5 04 	lds	r15, 0x04E5	; 0x8004e5 <avgWest+0x3>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a ef       	ldi	r20, 0xFA	; 250
    1202:	53 e4       	ldi	r21, 0x43	; 67
    1204:	c7 01       	movw	r24, r14
    1206:	b6 01       	movw	r22, r12
    1208:	0e 94 10 18 	call	0x3020	; 0x3020 <__cmpsf2>
    120c:	87 ff       	sbrs	r24, 7
    120e:	69 c0       	rjmp	.+210    	; 0x12e2 <FuncDetectTask+0x406>
    1210:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
    1214:	81 11       	cpse	r24, r1
    1216:	80 c0       	rjmp	.+256    	; 0x1318 <FuncDetectTask+0x43c>
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	86 e0       	ldi	r24, 0x06	; 6
    121e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <SetEvent>
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	0c 94 1f 10 	jmp	0x203e	; 0x203e <TerminateTask>
    1232:	27 30       	cpi	r18, 0x07	; 7
    1234:	31 05       	cpc	r19, r1
    1236:	0c f0       	brlt	.+2      	; 0x123a <FuncDetectTask+0x35e>
    1238:	41 c0       	rjmp	.+130    	; 0x12bc <FuncDetectTask+0x3e0>
    123a:	4e 97       	sbiw	r24, 0x1e	; 30
    123c:	a4 f4       	brge	.+40     	; 0x1266 <FuncDetectTask+0x38a>
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <digitalRead>
    1244:	89 2b       	or	r24, r25
    1246:	21 f4       	brne	.+8      	; 0x1250 <FuncDetectTask+0x374>
    1248:	61 e0       	ldi	r22, 0x01	; 1
    124a:	83 e0       	ldi	r24, 0x03	; 3
    124c:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
    1250:	87 e0       	ldi	r24, 0x07	; 7
    1252:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <digitalRead>
    1256:	89 2b       	or	r24, r25
    1258:	09 f0       	breq	.+2      	; 0x125c <FuncDetectTask+0x380>
    125a:	ad cf       	rjmp	.-166    	; 0x11b6 <FuncDetectTask+0x2da>
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	87 e0       	ldi	r24, 0x07	; 7
    1260:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
    1264:	a8 cf       	rjmp	.-176    	; 0x11b6 <FuncDetectTask+0x2da>
    1266:	26 30       	cpi	r18, 0x06	; 6
    1268:	31 05       	cpc	r19, r1
    126a:	09 f0       	breq	.+2      	; 0x126e <FuncDetectTask+0x392>
    126c:	a4 cf       	rjmp	.-184    	; 0x11b6 <FuncDetectTask+0x2da>
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	48 e4       	ldi	r20, 0x48	; 72
    1274:	53 e4       	ldi	r21, 0x43	; 67
    1276:	60 91 e6 04 	lds	r22, 0x04E6	; 0x8004e6 <avgEast>
    127a:	70 91 e7 04 	lds	r23, 0x04E7	; 0x8004e7 <avgEast+0x1>
    127e:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <avgEast+0x2>
    1282:	90 91 e9 04 	lds	r25, 0x04E9	; 0x8004e9 <avgEast+0x3>
    1286:	0e 94 10 18 	call	0x3020	; 0x3020 <__cmpsf2>
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	18 16       	cp	r1, r24
    128e:	0c f4       	brge	.+2      	; 0x1292 <FuncDetectTask+0x3b6>
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	83 e0       	ldi	r24, 0x03	; 3
    1294:	0e 94 a7 0a 	call	0x154e	; 0x154e <digitalWrite>
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	48 e4       	ldi	r20, 0x48	; 72
    129e:	53 e4       	ldi	r21, 0x43	; 67
    12a0:	60 91 e2 04 	lds	r22, 0x04E2	; 0x8004e2 <avgWest>
    12a4:	70 91 e3 04 	lds	r23, 0x04E3	; 0x8004e3 <avgWest+0x1>
    12a8:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <avgWest+0x2>
    12ac:	90 91 e5 04 	lds	r25, 0x04E5	; 0x8004e5 <avgWest+0x3>
    12b0:	0e 94 10 18 	call	0x3020	; 0x3020 <__cmpsf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	94 f6       	brge	.-92     	; 0x125c <FuncDetectTask+0x380>
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	d1 cf       	rjmp	.-94     	; 0x125e <FuncDetectTask+0x382>
    12bc:	4e 97       	sbiw	r24, 0x1e	; 30
    12be:	bc f6       	brge	.-82     	; 0x126e <FuncDetectTask+0x392>
    12c0:	7a cf       	rjmp	.-268    	; 0x11b6 <FuncDetectTask+0x2da>
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	4a ef       	ldi	r20, 0xFA	; 250
    12c8:	53 e4       	ldi	r21, 0x43	; 67
    12ca:	c7 01       	movw	r24, r14
    12cc:	b6 01       	movw	r22, r12
    12ce:	0e 94 6f 19 	call	0x32de	; 0x32de <__gesf2>
    12d2:	87 fd       	sbrc	r24, 7
    12d4:	8b cf       	rjmp	.-234    	; 0x11ec <FuncDetectTask+0x310>
    12d6:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
    12da:	88 23       	and	r24, r24
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <FuncDetectTask+0x404>
    12de:	86 cf       	rjmp	.-244    	; 0x11ec <FuncDetectTask+0x310>
    12e0:	80 cf       	rjmp	.-256    	; 0x11e2 <FuncDetectTask+0x306>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	4a ef       	ldi	r20, 0xFA	; 250
    12e8:	53 e4       	ldi	r21, 0x43	; 67
    12ea:	c7 01       	movw	r24, r14
    12ec:	b6 01       	movw	r22, r12
    12ee:	0e 94 6f 19 	call	0x32de	; 0x32de <__gesf2>
    12f2:	87 fd       	sbrc	r24, 7
    12f4:	96 cf       	rjmp	.-212    	; 0x1222 <FuncDetectTask+0x346>
    12f6:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
    12fa:	88 23       	and	r24, r24
    12fc:	09 f4       	brne	.+2      	; 0x1300 <FuncDetectTask+0x424>
    12fe:	91 cf       	rjmp	.-222    	; 0x1222 <FuncDetectTask+0x346>
    1300:	8b cf       	rjmp	.-234    	; 0x1218 <FuncDetectTask+0x33c>
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4a ef       	ldi	r20, 0xFA	; 250
    1308:	53 e4       	ldi	r21, 0x43	; 67
    130a:	c7 01       	movw	r24, r14
    130c:	b6 01       	movw	r22, r12
    130e:	0e 94 6f 19 	call	0x32de	; 0x32de <__gesf2>
    1312:	87 fd       	sbrc	r24, 7
    1314:	6b cf       	rjmp	.-298    	; 0x11ec <FuncDetectTask+0x310>
    1316:	65 cf       	rjmp	.-310    	; 0x11e2 <FuncDetectTask+0x306>
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4a ef       	ldi	r20, 0xFA	; 250
    131e:	53 e4       	ldi	r21, 0x43	; 67
    1320:	c7 01       	movw	r24, r14
    1322:	b6 01       	movw	r22, r12
    1324:	0e 94 6f 19 	call	0x32de	; 0x32de <__gesf2>
    1328:	87 fd       	sbrc	r24, 7
    132a:	7b cf       	rjmp	.-266    	; 0x1222 <FuncDetectTask+0x346>
    132c:	75 cf       	rjmp	.-278    	; 0x1218 <FuncDetectTask+0x33c>

0000132e <_GLOBAL__sub_I_eastServo>:
    132e:	cf 92       	push	r12
    1330:	ef 92       	push	r14
    1332:	0f 93       	push	r16
    1334:	8b e1       	ldi	r24, 0x1B	; 27
    1336:	95 e0       	ldi	r25, 0x05	; 5
    1338:	0e 94 9a 03 	call	0x734	; 0x734 <_ZN11ServoTimer2C1Ev>
    133c:	8a e1       	ldi	r24, 0x1A	; 26
    133e:	95 e0       	ldi	r25, 0x05	; 5
    1340:	0e 94 9a 03 	call	0x734	; 0x734 <_ZN11ServoTimer2C1Ev>
    1344:	8d e0       	ldi	r24, 0x0D	; 13
    1346:	c8 2e       	mov	r12, r24
    1348:	9c e0       	ldi	r25, 0x0C	; 12
    134a:	e9 2e       	mov	r14, r25
    134c:	0b e0       	ldi	r16, 0x0B	; 11
    134e:	2a e0       	ldi	r18, 0x0A	; 10
    1350:	49 e0       	ldi	r20, 0x09	; 9
    1352:	68 e0       	ldi	r22, 0x08	; 8
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	95 e0       	ldi	r25, 0x05	; 5
    1358:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN13LiquidCrystalC1Ehhhhhh>
    135c:	0f 91       	pop	r16
    135e:	ef 90       	pop	r14
    1360:	cf 90       	pop	r12
    1362:	08 95       	ret

00001364 <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	2f 93       	push	r18
    1370:	3f 93       	push	r19
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <timer0_millis>
    137e:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <timer0_millis+0x1>
    1382:	a0 91 1f 05 	lds	r26, 0x051F	; 0x80051f <timer0_millis+0x2>
    1386:	b0 91 20 05 	lds	r27, 0x0520	; 0x800520 <timer0_millis+0x3>
    138a:	30 91 1c 05 	lds	r19, 0x051C	; 0x80051c <timer0_fract>
    138e:	23 e0       	ldi	r18, 0x03	; 3
    1390:	23 0f       	add	r18, r19
    1392:	2d 37       	cpi	r18, 0x7D	; 125
    1394:	58 f5       	brcc	.+86     	; 0x13ec <__vector_16+0x88>
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	a1 1d       	adc	r26, r1
    139a:	b1 1d       	adc	r27, r1
    139c:	20 93 1c 05 	sts	0x051C, r18	; 0x80051c <timer0_fract>
    13a0:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <timer0_millis>
    13a4:	90 93 1e 05 	sts	0x051E, r25	; 0x80051e <timer0_millis+0x1>
    13a8:	a0 93 1f 05 	sts	0x051F, r26	; 0x80051f <timer0_millis+0x2>
    13ac:	b0 93 20 05 	sts	0x0520, r27	; 0x800520 <timer0_millis+0x3>
    13b0:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <timer0_overflow_count>
    13b4:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <timer0_overflow_count+0x1>
    13b8:	a0 91 23 05 	lds	r26, 0x0523	; 0x800523 <timer0_overflow_count+0x2>
    13bc:	b0 91 24 05 	lds	r27, 0x0524	; 0x800524 <timer0_overflow_count+0x3>
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	a1 1d       	adc	r26, r1
    13c4:	b1 1d       	adc	r27, r1
    13c6:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <timer0_overflow_count>
    13ca:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <timer0_overflow_count+0x1>
    13ce:	a0 93 23 05 	sts	0x0523, r26	; 0x800523 <timer0_overflow_count+0x2>
    13d2:	b0 93 24 05 	sts	0x0524, r27	; 0x800524 <timer0_overflow_count+0x3>
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	0f 90       	pop	r0
    13e8:	1f 90       	pop	r1
    13ea:	18 95       	reti
    13ec:	26 e8       	ldi	r18, 0x86	; 134
    13ee:	23 0f       	add	r18, r19
    13f0:	02 96       	adiw	r24, 0x02	; 2
    13f2:	a1 1d       	adc	r26, r1
    13f4:	b1 1d       	adc	r27, r1
    13f6:	d2 cf       	rjmp	.-92     	; 0x139c <__vector_16+0x38>

000013f8 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	91 05       	cpc	r25, r1
    13fc:	38 f0       	brcs	.+14     	; 0x140c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1406:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <delayMicroseconds+0x10>
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
    140c:	08 95       	ret

0000140e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    140e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1410:	84 b5       	in	r24, 0x24	; 36
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1416:	84 b5       	in	r24, 0x24	; 36
    1418:	81 60       	ori	r24, 0x01	; 1
    141a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    141c:	85 b5       	in	r24, 0x25	; 37
    141e:	82 60       	ori	r24, 0x02	; 2
    1420:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1422:	85 b5       	in	r24, 0x25	; 37
    1424:	81 60       	ori	r24, 0x01	; 1
    1426:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1428:	ee e6       	ldi	r30, 0x6E	; 110
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	81 60       	ori	r24, 0x01	; 1
    1430:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1432:	e1 e8       	ldi	r30, 0x81	; 129
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1438:	80 81       	ld	r24, Z
    143a:	82 60       	ori	r24, 0x02	; 2
    143c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    143e:	80 81       	ld	r24, Z
    1440:	81 60       	ori	r24, 0x01	; 1
    1442:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1444:	e0 e8       	ldi	r30, 0x80	; 128
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	81 60       	ori	r24, 0x01	; 1
    144c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    144e:	e1 eb       	ldi	r30, 0xB1	; 177
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	84 60       	ori	r24, 0x04	; 4
    1456:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1458:	e0 eb       	ldi	r30, 0xB0	; 176
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	81 60       	ori	r24, 0x01	; 1
    1460:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1462:	ea e7       	ldi	r30, 0x7A	; 122
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	84 60       	ori	r24, 0x04	; 4
    146a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    146c:	80 81       	ld	r24, Z
    146e:	82 60       	ori	r24, 0x02	; 2
    1470:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1472:	80 81       	ld	r24, Z
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1478:	80 81       	ld	r24, Z
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    147e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
#endif
}
    1482:	08 95       	ret

00001484 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	81 f0       	breq	.+32     	; 0x14a8 <turnOffPWM+0x24>
    1488:	28 f4       	brcc	.+10     	; 0x1494 <turnOffPWM+0x10>
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	99 f0       	breq	.+38     	; 0x14b4 <turnOffPWM+0x30>
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	a9 f0       	breq	.+42     	; 0x14bc <turnOffPWM+0x38>
    1492:	08 95       	ret
    1494:	87 30       	cpi	r24, 0x07	; 7
    1496:	a9 f0       	breq	.+42     	; 0x14c2 <turnOffPWM+0x3e>
    1498:	88 30       	cpi	r24, 0x08	; 8
    149a:	c9 f0       	breq	.+50     	; 0x14ce <turnOffPWM+0x4a>
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	b1 f4       	brne	.+44     	; 0x14cc <turnOffPWM+0x48>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    14a0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    14a4:	8f 7d       	andi	r24, 0xDF	; 223
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    14a8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    14ac:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    14ae:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    14b2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    14b4:	84 b5       	in	r24, 0x24	; 36
    14b6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    14b8:	84 bd       	out	0x24, r24	; 36
    14ba:	08 95       	ret
    14bc:	84 b5       	in	r24, 0x24	; 36
    14be:	8f 7d       	andi	r24, 0xDF	; 223
    14c0:	fb cf       	rjmp	.-10     	; 0x14b8 <turnOffPWM+0x34>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    14c2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    14c6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    14c8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
    14cc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    14ce:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    14d2:	8f 7d       	andi	r24, 0xDF	; 223
    14d4:	f9 cf       	rjmp	.-14     	; 0x14c8 <turnOffPWM+0x44>

000014d6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	fc 01       	movw	r30, r24
    14de:	e2 50       	subi	r30, 0x02	; 2
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    14e4:	8e 5e       	subi	r24, 0xEE	; 238
    14e6:	9e 4f       	sbci	r25, 0xFE	; 254
    14e8:	fc 01       	movw	r30, r24
    14ea:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    14ec:	88 23       	and	r24, r24
    14ee:	c9 f0       	breq	.+50     	; 0x1522 <pinMode+0x4c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	fc 01       	movw	r30, r24
    14f8:	e6 5c       	subi	r30, 0xC6	; 198
    14fa:	fe 4f       	sbci	r31, 0xFE	; 254
    14fc:	a5 91       	lpm	r26, Z+
    14fe:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    1500:	fc 01       	movw	r30, r24
    1502:	e0 5d       	subi	r30, 0xD0	; 208
    1504:	fe 4f       	sbci	r31, 0xFE	; 254
    1506:	c5 91       	lpm	r28, Z+
    1508:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    150a:	61 11       	cpse	r22, r1
    150c:	0d c0       	rjmp	.+26     	; 0x1528 <pinMode+0x52>
		uint8_t oldSREG = SREG;
    150e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1510:	f8 94       	cli
		*reg &= ~bit;
    1512:	8c 91       	ld	r24, X
    1514:	20 95       	com	r18
    1516:	82 23       	and	r24, r18
    1518:	8c 93       	st	X, r24
		*out &= ~bit;
    151a:	88 81       	ld	r24, Y
    151c:	28 23       	and	r18, r24
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out |= bit;
    151e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1520:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	08 95       	ret
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1528:	62 30       	cpi	r22, 0x02	; 2
    152a:	51 f4       	brne	.+20     	; 0x1540 <pinMode+0x6a>
		uint8_t oldSREG = SREG;
    152c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    152e:	f8 94       	cli
		*reg &= ~bit;
    1530:	3c 91       	ld	r19, X
    1532:	82 2f       	mov	r24, r18
    1534:	80 95       	com	r24
    1536:	83 23       	and	r24, r19
    1538:	8c 93       	st	X, r24
		*out |= bit;
    153a:	e8 81       	ld	r30, Y
    153c:	2e 2b       	or	r18, r30
    153e:	ef cf       	rjmp	.-34     	; 0x151e <pinMode+0x48>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    1540:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1542:	f8 94       	cli
		*reg |= bit;
    1544:	ec 91       	ld	r30, X
    1546:	2e 2b       	or	r18, r30
    1548:	2c 93       	st	X, r18
		SREG = oldSREG;
    154a:	8f bf       	out	0x3f, r24	; 63
    154c:	ea cf       	rjmp	.-44     	; 0x1522 <pinMode+0x4c>

0000154e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	f9 01       	movw	r30, r18
    155a:	e6 51       	subi	r30, 0x16	; 22
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1560:	f9 01       	movw	r30, r18
    1562:	e2 50       	subi	r30, 0x02	; 2
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1568:	f9 01       	movw	r30, r18
    156a:	ee 5e       	subi	r30, 0xEE	; 238
    156c:	fe 4f       	sbci	r31, 0xFE	; 254
    156e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1570:	cc 23       	and	r28, r28
    1572:	a9 f0       	breq	.+42     	; 0x159e <digitalWrite+0x50>
    1574:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1576:	81 11       	cpse	r24, r1
    1578:	0e 94 42 0a 	call	0x1484	; 0x1484 <turnOffPWM>

	out = portOutputRegister(port);
    157c:	ec 2f       	mov	r30, r28
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	e0 5d       	subi	r30, 0xD0	; 208
    1586:	fe 4f       	sbci	r31, 0xFE	; 254
    1588:	a5 91       	lpm	r26, Z+
    158a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    158c:	8f b7       	in	r24, 0x3f	; 63
	cli();
    158e:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    1590:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    1592:	11 11       	cpse	r17, r1
    1594:	08 c0       	rjmp	.+16     	; 0x15a6 <digitalWrite+0x58>
		*out &= ~bit;
    1596:	d0 95       	com	r29
    1598:	de 23       	and	r29, r30
	} else {
		*out |= bit;
    159a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    159c:	8f bf       	out	0x3f, r24	; 63
}
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	08 95       	ret
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
    15a6:	de 2b       	or	r29, r30
    15a8:	f8 cf       	rjmp	.-16     	; 0x159a <digitalWrite+0x4c>

000015aa <digitalRead>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	f9 01       	movw	r30, r18
    15b4:	e6 51       	subi	r30, 0x16	; 22
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    15ba:	f9 01       	movw	r30, r18
    15bc:	e2 50       	subi	r30, 0x02	; 2
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    15c2:	f9 01       	movw	r30, r18
    15c4:	ee 5e       	subi	r30, 0xEE	; 238
    15c6:	fe 4f       	sbci	r31, 0xFE	; 254
    15c8:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    15ca:	cc 23       	and	r28, r28
    15cc:	a1 f0       	breq	.+40     	; 0x15f6 <digitalRead+0x4c>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    15ce:	81 11       	cpse	r24, r1
    15d0:	0e 94 42 0a 	call	0x1484	; 0x1484 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    15d4:	ec 2f       	mov	r30, r28
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	ea 5d       	subi	r30, 0xDA	; 218
    15de:	fe 4f       	sbci	r31, 0xFE	; 254
    15e0:	a5 91       	lpm	r26, Z+
    15e2:	b4 91       	lpm	r27, Z
    15e4:	ec 91       	ld	r30, X
    15e6:	ed 23       	and	r30, r29
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <digitalRead+0x46>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
	return LOW;
}
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	08 95       	ret
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	fa cf       	rjmp	.-12     	; 0x15f0 <digitalRead+0x46>

000015fc <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    15fc:	8e 30       	cpi	r24, 0x0E	; 14
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <analogRead+0x6>
    1600:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1602:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <analog_reference>
    1606:	90 e4       	ldi	r25, 0x40	; 64
    1608:	29 9f       	mul	r18, r25
    160a:	90 01       	movw	r18, r0
    160c:	11 24       	eor	r1, r1
    160e:	87 70       	andi	r24, 0x07	; 7
    1610:	82 2b       	or	r24, r18
    1612:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1616:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    161a:	80 64       	ori	r24, 0x40	; 64
    161c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1620:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1624:	86 fd       	sbrc	r24, 6
    1626:	fc cf       	rjmp	.-8      	; 0x1620 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1628:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    162c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    1630:	08 95       	ret

00001632 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1632:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1634:	91 8d       	ldd	r25, Z+25	; 0x19
    1636:	22 8d       	ldd	r18, Z+26	; 0x1a
    1638:	89 2f       	mov	r24, r25
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	80 5c       	subi	r24, 0xC0	; 192
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	82 1b       	sub	r24, r18
    1642:	91 09       	sbc	r25, r1
}
    1644:	8f 73       	andi	r24, 0x3F	; 63
    1646:	99 27       	eor	r25, r25
    1648:	08 95       	ret

0000164a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    164a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    164c:	91 8d       	ldd	r25, Z+25	; 0x19
    164e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1650:	98 17       	cp	r25, r24
    1652:	31 f0       	breq	.+12     	; 0x1660 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1654:	82 8d       	ldd	r24, Z+26	; 0x1a
    1656:	e8 0f       	add	r30, r24
    1658:	f1 1d       	adc	r31, r1
    165a:	85 8d       	ldd	r24, Z+29	; 0x1d
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1664:	08 95       	ret

00001666 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1666:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1668:	91 8d       	ldd	r25, Z+25	; 0x19
    166a:	82 8d       	ldd	r24, Z+26	; 0x1a
    166c:	98 17       	cp	r25, r24
    166e:	61 f0       	breq	.+24     	; 0x1688 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1670:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1672:	ae 0f       	add	r26, r30
    1674:	bf 2f       	mov	r27, r31
    1676:	b1 1d       	adc	r27, r1
    1678:	5d 96       	adiw	r26, 0x1d	; 29
    167a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    167c:	92 8d       	ldd	r25, Z+26	; 0x1a
    167e:	9f 5f       	subi	r25, 0xFF	; 255
    1680:	9f 73       	andi	r25, 0x3F	; 63
    1682:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    168c:	08 95       	ret

0000168e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    168e:	fc 01       	movw	r30, r24
    1690:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1692:	44 8d       	ldd	r20, Z+28	; 0x1c
    1694:	25 2f       	mov	r18, r21
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	84 2f       	mov	r24, r20
    169a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    169c:	82 1b       	sub	r24, r18
    169e:	93 0b       	sbc	r25, r19
    16a0:	54 17       	cp	r21, r20
    16a2:	10 f0       	brcs	.+4      	; 0x16a8 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    16a4:	cf 96       	adiw	r24, 0x3f	; 63
    16a6:	08 95       	ret
  return tail - head - 1;
    16a8:	01 97       	sbiw	r24, 0x01	; 1
}
    16aa:	08 95       	ret

000016ac <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    16ac:	8d ea       	ldi	r24, 0xAD	; 173
    16ae:	9c e0       	ldi	r25, 0x0C	; 12
    16b0:	89 2b       	or	r24, r25
    16b2:	49 f0       	breq	.+18     	; 0x16c6 <_Z14serialEventRunv+0x1a>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	89 2b       	or	r24, r25
    16ba:	29 f0       	breq	.+10     	; 0x16c6 <_Z14serialEventRunv+0x1a>
    16bc:	0e 94 ad 0c 	call	0x195a	; 0x195a <_Z17Serial0_availablev>
    16c0:	81 11       	cpse	r24, r1
    16c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    16c6:	08 95       	ret

000016c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    16c8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    16ca:	a4 8d       	ldd	r26, Z+28	; 0x1c
    16cc:	a8 0f       	add	r26, r24
    16ce:	b9 2f       	mov	r27, r25
    16d0:	b1 1d       	adc	r27, r1
    16d2:	a3 5a       	subi	r26, 0xA3	; 163
    16d4:	bf 4f       	sbci	r27, 0xFF	; 255
    16d6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    16d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	8f 73       	andi	r24, 0x3F	; 63
    16e0:	99 27       	eor	r25, r25
    16e2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    16e4:	a6 89       	ldd	r26, Z+22	; 0x16
    16e6:	b7 89       	ldd	r27, Z+23	; 0x17
    16e8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    16ea:	a0 89       	ldd	r26, Z+16	; 0x10
    16ec:	b1 89       	ldd	r27, Z+17	; 0x11
    16ee:	8c 91       	ld	r24, X
    16f0:	83 70       	andi	r24, 0x03	; 3
    16f2:	80 64       	ori	r24, 0x40	; 64
    16f4:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    16f6:	93 8d       	ldd	r25, Z+27	; 0x1b
    16f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    16fa:	98 13       	cpse	r25, r24
    16fc:	06 c0       	rjmp	.+12     	; 0x170a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    16fe:	02 88       	ldd	r0, Z+18	; 0x12
    1700:	f3 89       	ldd	r31, Z+19	; 0x13
    1702:	e0 2d       	mov	r30, r0
    1704:	80 81       	ld	r24, Z
    1706:	8f 7d       	andi	r24, 0xDF	; 223
    1708:	80 83       	st	Z, r24
  }
}
    170a:	08 95       	ret

0000170c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1712:	88 8d       	ldd	r24, Y+24	; 0x18
    1714:	88 23       	and	r24, r24
    1716:	b9 f0       	breq	.+46     	; 0x1746 <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1718:	aa 89       	ldd	r26, Y+18	; 0x12
    171a:	bb 89       	ldd	r27, Y+19	; 0x13
    171c:	e8 89       	ldd	r30, Y+16	; 0x10
    171e:	f9 89       	ldd	r31, Y+17	; 0x11
    1720:	8c 91       	ld	r24, X
    1722:	85 fd       	sbrc	r24, 5
    1724:	03 c0       	rjmp	.+6      	; 0x172c <_ZN14HardwareSerial5flushEv+0x20>
    1726:	80 81       	ld	r24, Z
    1728:	86 fd       	sbrc	r24, 6
    172a:	0d c0       	rjmp	.+26     	; 0x1746 <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	07 fc       	sbrc	r0, 7
    1730:	f7 cf       	rjmp	.-18     	; 0x1720 <_ZN14HardwareSerial5flushEv+0x14>
    1732:	8c 91       	ld	r24, X
    1734:	85 ff       	sbrs	r24, 5
    1736:	f2 cf       	rjmp	.-28     	; 0x171c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1738:	80 81       	ld	r24, Z
    173a:	85 ff       	sbrs	r24, 5
    173c:	ed cf       	rjmp	.-38     	; 0x1718 <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
    173e:	ce 01       	movw	r24, r28
    1740:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1744:	e9 cf       	rjmp	.-46     	; 0x1718 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	ec 01       	movw	r28, r24
  _written = true;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    175e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1760:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1762:	98 13       	cpse	r25, r24
    1764:	1a c0       	rjmp	.+52     	; 0x179a <_ZN14HardwareSerial5writeEh+0x4e>
    1766:	e8 89       	ldd	r30, Y+16	; 0x10
    1768:	f9 89       	ldd	r31, Y+17	; 0x11
    176a:	80 81       	ld	r24, Z
    176c:	85 ff       	sbrs	r24, 5
    176e:	15 c0       	rjmp	.+42     	; 0x179a <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1770:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1772:	f8 94       	cli
      *_udr = c;
    1774:	ee 89       	ldd	r30, Y+22	; 0x16
    1776:	ff 89       	ldd	r31, Y+23	; 0x17
    1778:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    177a:	e8 89       	ldd	r30, Y+16	; 0x10
    177c:	f9 89       	ldd	r31, Y+17	; 0x11
    177e:	80 81       	ld	r24, Z
    1780:	83 70       	andi	r24, 0x03	; 3
    1782:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
    1784:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1786:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	08 95       	ret
    179a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    179c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	0f 5f       	subi	r16, 0xFF	; 255
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
    17a4:	0f 73       	andi	r16, 0x3F	; 63
    17a6:	11 27       	eor	r17, r17
    17a8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    17aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17ac:	8e 11       	cpse	r24, r14
    17ae:	0c c0       	rjmp	.+24     	; 0x17c8 <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	07 fc       	sbrc	r0, 7
    17b4:	fa cf       	rjmp	.-12     	; 0x17aa <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    17b6:	e8 89       	ldd	r30, Y+16	; 0x10
    17b8:	f9 89       	ldd	r31, Y+17	; 0x11
    17ba:	80 81       	ld	r24, Z
    17bc:	85 ff       	sbrs	r24, 5
    17be:	f5 cf       	rjmp	.-22     	; 0x17aa <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
    17c0:	ce 01       	movw	r24, r28
    17c2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    17c6:	f1 cf       	rjmp	.-30     	; 0x17aa <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    17c8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    17ca:	ec 0f       	add	r30, r28
    17cc:	fd 2f       	mov	r31, r29
    17ce:	f1 1d       	adc	r31, r1
    17d0:	e3 5a       	subi	r30, 0xA3	; 163
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    17d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17d8:	f8 94       	cli
    _tx_buffer_head = i;
    17da:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    17dc:	ea 89       	ldd	r30, Y+18	; 0x12
    17de:	fb 89       	ldd	r31, Y+19	; 0x13
    17e0:	80 81       	ld	r24, Z
    17e2:	80 62       	ori	r24, 0x20	; 32
    17e4:	cf cf       	rjmp	.-98     	; 0x1784 <_ZN14HardwareSerial5writeEh+0x38>

000017e6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	ec 01       	movw	r28, r24
    17f6:	6a 01       	movw	r12, r20
    17f8:	7b 01       	movw	r14, r22
    17fa:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    17fc:	e8 89       	ldd	r30, Y+16	; 0x10
    17fe:	f9 89       	ldd	r31, Y+17	; 0x11
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1804:	c1 14       	cp	r12, r1
    1806:	81 ee       	ldi	r24, 0xE1	; 225
    1808:	d8 06       	cpc	r13, r24
    180a:	e1 04       	cpc	r14, r1
    180c:	f1 04       	cpc	r15, r1
    180e:	a1 f0       	breq	.+40     	; 0x1838 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	79 e0       	ldi	r23, 0x09	; 9
    1814:	8d e3       	ldi	r24, 0x3D	; 61
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a7 01       	movw	r20, r14
    181a:	96 01       	movw	r18, r12
    181c:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__udivmodsi4>
    1820:	21 50       	subi	r18, 0x01	; 1
    1822:	31 09       	sbc	r19, r1
    1824:	41 09       	sbc	r20, r1
    1826:	51 09       	sbc	r21, r1
    1828:	56 95       	lsr	r21
    182a:	47 95       	ror	r20
    182c:	37 95       	ror	r19
    182e:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1830:	21 15       	cp	r18, r1
    1832:	80 e1       	ldi	r24, 0x10	; 16
    1834:	38 07       	cpc	r19, r24
    1836:	98 f0       	brcs	.+38     	; 0x185e <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    1838:	e8 89       	ldd	r30, Y+16	; 0x10
    183a:	f9 89       	ldd	r31, Y+17	; 0x11
    183c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    183e:	60 e8       	ldi	r22, 0x80	; 128
    1840:	74 e8       	ldi	r23, 0x84	; 132
    1842:	8e e1       	ldi	r24, 0x1E	; 30
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	a7 01       	movw	r20, r14
    1848:	96 01       	movw	r18, r12
    184a:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__udivmodsi4>
    184e:	21 50       	subi	r18, 0x01	; 1
    1850:	31 09       	sbc	r19, r1
    1852:	41 09       	sbc	r20, r1
    1854:	51 09       	sbc	r21, r1
    1856:	56 95       	lsr	r21
    1858:	47 95       	ror	r20
    185a:	37 95       	ror	r19
    185c:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    185e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1860:	fd 85       	ldd	r31, Y+13	; 0x0d
    1862:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1864:	ee 85       	ldd	r30, Y+14	; 0x0e
    1866:	ff 85       	ldd	r31, Y+15	; 0x0f
    1868:	20 83       	st	Z, r18

  _written = false;
    186a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    186c:	ec 89       	ldd	r30, Y+20	; 0x14
    186e:	fd 89       	ldd	r31, Y+21	; 0x15
    1870:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1872:	ea 89       	ldd	r30, Y+18	; 0x12
    1874:	fb 89       	ldd	r31, Y+19	; 0x13
    1876:	80 81       	ld	r24, Z
    1878:	80 61       	ori	r24, 0x10	; 16
    187a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    187c:	ea 89       	ldd	r30, Y+18	; 0x12
    187e:	fb 89       	ldd	r31, Y+19	; 0x13
    1880:	80 81       	ld	r24, Z
    1882:	88 60       	ori	r24, 0x08	; 8
    1884:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1886:	ea 89       	ldd	r30, Y+18	; 0x12
    1888:	fb 89       	ldd	r31, Y+19	; 0x13
    188a:	80 81       	ld	r24, Z
    188c:	80 68       	ori	r24, 0x80	; 128
    188e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1890:	ea 89       	ldd	r30, Y+18	; 0x12
    1892:	fb 89       	ldd	r31, Y+19	; 0x13
    1894:	80 81       	ld	r24, Z
    1896:	8f 7d       	andi	r24, 0xDF	; 223
    1898:	80 83       	st	Z, r24
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	08 95       	ret

000018aa <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    18aa:	1f 92       	push	r1
    18ac:	0f 92       	push	r0
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	0f 92       	push	r0
    18b2:	11 24       	eor	r1, r1
    18b4:	2f 93       	push	r18
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    18be:	e0 91 35 05 	lds	r30, 0x0535	; 0x800535 <Serial+0x10>
    18c2:	f0 91 36 05 	lds	r31, 0x0536	; 0x800536 <Serial+0x11>
    18c6:	80 81       	ld	r24, Z
    18c8:	e0 91 3b 05 	lds	r30, 0x053B	; 0x80053b <Serial+0x16>
    18cc:	f0 91 3c 05 	lds	r31, 0x053C	; 0x80053c <Serial+0x17>
    18d0:	82 fd       	sbrc	r24, 2
    18d2:	1b c0       	rjmp	.+54     	; 0x190a <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    18d4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    18d6:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <Serial+0x19>
    18da:	8f 5f       	subi	r24, 0xFF	; 255
    18dc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    18de:	20 91 3f 05 	lds	r18, 0x053F	; 0x80053f <Serial+0x1a>
    18e2:	82 17       	cp	r24, r18
    18e4:	41 f0       	breq	.+16     	; 0x18f6 <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
    18e6:	e0 91 3e 05 	lds	r30, 0x053E	; 0x80053e <Serial+0x19>
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	eb 5d       	subi	r30, 0xDB	; 219
    18ee:	fa 4f       	sbci	r31, 0xFA	; 250
    18f0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    18f2:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <Serial+0x19>
    Serial._rx_complete_irq();
  }
    18f6:	ff 91       	pop	r31
    18f8:	ef 91       	pop	r30
    18fa:	9f 91       	pop	r25
    18fc:	8f 91       	pop	r24
    18fe:	2f 91       	pop	r18
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    190a:	80 81       	ld	r24, Z
    190c:	f4 cf       	rjmp	.-24     	; 0x18f6 <__vector_18+0x4c>

0000190e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    190e:	1f 92       	push	r1
    1910:	0f 92       	push	r0
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	0f 92       	push	r0
    1916:	11 24       	eor	r1, r1
    1918:	2f 93       	push	r18
    191a:	3f 93       	push	r19
    191c:	4f 93       	push	r20
    191e:	5f 93       	push	r21
    1920:	6f 93       	push	r22
    1922:	7f 93       	push	r23
    1924:	8f 93       	push	r24
    1926:	9f 93       	push	r25
    1928:	af 93       	push	r26
    192a:	bf 93       	push	r27
    192c:	ef 93       	push	r30
    192e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1930:	85 e2       	ldi	r24, 0x25	; 37
    1932:	95 e0       	ldi	r25, 0x05	; 5
    1934:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1938:	ff 91       	pop	r31
    193a:	ef 91       	pop	r30
    193c:	bf 91       	pop	r27
    193e:	af 91       	pop	r26
    1940:	9f 91       	pop	r25
    1942:	8f 91       	pop	r24
    1944:	7f 91       	pop	r23
    1946:	6f 91       	pop	r22
    1948:	5f 91       	pop	r21
    194a:	4f 91       	pop	r20
    194c:	3f 91       	pop	r19
    194e:	2f 91       	pop	r18
    1950:	0f 90       	pop	r0
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	0f 90       	pop	r0
    1956:	1f 90       	pop	r1
    1958:	18 95       	reti

0000195a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    195a:	85 e2       	ldi	r24, 0x25	; 37
    195c:	95 e0       	ldi	r25, 0x05	; 5
    195e:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN14HardwareSerial9availableEv>
    1962:	21 e0       	ldi	r18, 0x01	; 1
    1964:	89 2b       	or	r24, r25
    1966:	09 f4       	brne	.+2      	; 0x196a <_Z17Serial0_availablev+0x10>
    1968:	20 e0       	ldi	r18, 0x00	; 0
}
    196a:	82 2f       	mov	r24, r18
    196c:	08 95       	ret

0000196e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    196e:	e5 e2       	ldi	r30, 0x25	; 37
    1970:	f5 e0       	ldi	r31, 0x05	; 5
    1972:	13 82       	std	Z+3, r1	; 0x03
    1974:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1976:	88 ee       	ldi	r24, 0xE8	; 232
    1978:	93 e0       	ldi	r25, 0x03	; 3
    197a:	a0 e0       	ldi	r26, 0x00	; 0
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	84 83       	std	Z+4, r24	; 0x04
    1980:	95 83       	std	Z+5, r25	; 0x05
    1982:	a6 83       	std	Z+6, r26	; 0x06
    1984:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1986:	80 ea       	ldi	r24, 0xA0	; 160
    1988:	94 e0       	ldi	r25, 0x04	; 4
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
    198e:	85 ec       	ldi	r24, 0xC5	; 197
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	95 87       	std	Z+13, r25	; 0x0d
    1994:	84 87       	std	Z+12, r24	; 0x0c
    1996:	84 ec       	ldi	r24, 0xC4	; 196
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	97 87       	std	Z+15, r25	; 0x0f
    199c:	86 87       	std	Z+14, r24	; 0x0e
    199e:	80 ec       	ldi	r24, 0xC0	; 192
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	91 8b       	std	Z+17, r25	; 0x11
    19a4:	80 8b       	std	Z+16, r24	; 0x10
    19a6:	81 ec       	ldi	r24, 0xC1	; 193
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	93 8b       	std	Z+19, r25	; 0x13
    19ac:	82 8b       	std	Z+18, r24	; 0x12
    19ae:	82 ec       	ldi	r24, 0xC2	; 194
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	95 8b       	std	Z+21, r25	; 0x15
    19b4:	84 8b       	std	Z+20, r24	; 0x14
    19b6:	86 ec       	ldi	r24, 0xC6	; 198
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	97 8b       	std	Z+23, r25	; 0x17
    19bc:	86 8b       	std	Z+22, r24	; 0x16
    19be:	11 8e       	std	Z+25, r1	; 0x19
    19c0:	12 8e       	std	Z+26, r1	; 0x1a
    19c2:	13 8e       	std	Z+27, r1	; 0x1b
    19c4:	14 8e       	std	Z+28, r1	; 0x1c
    19c6:	08 95       	ret

000019c8 <_ZN5Print5writeEPKhj>:
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	6c 01       	movw	r12, r24
    19de:	7b 01       	movw	r14, r22
    19e0:	8b 01       	movw	r16, r22
    19e2:	04 0f       	add	r16, r20
    19e4:	15 1f       	adc	r17, r21
    19e6:	eb 01       	movw	r28, r22
    19e8:	5e 01       	movw	r10, r28
    19ea:	ae 18       	sub	r10, r14
    19ec:	bf 08       	sbc	r11, r15
    19ee:	c0 17       	cp	r28, r16
    19f0:	d1 07       	cpc	r29, r17
    19f2:	59 f0       	breq	.+22     	; 0x1a0a <_ZN5Print5writeEPKhj+0x42>
    19f4:	69 91       	ld	r22, Y+
    19f6:	d6 01       	movw	r26, r12
    19f8:	ed 91       	ld	r30, X+
    19fa:	fc 91       	ld	r31, X
    19fc:	01 90       	ld	r0, Z+
    19fe:	f0 81       	ld	r31, Z
    1a00:	e0 2d       	mov	r30, r0
    1a02:	c6 01       	movw	r24, r12
    1a04:	09 95       	icall
    1a06:	89 2b       	or	r24, r25
    1a08:	79 f7       	brne	.-34     	; 0x19e8 <_ZN5Print5writeEPKhj+0x20>
    1a0a:	c5 01       	movw	r24, r10
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	df 90       	pop	r13
    1a1a:	cf 90       	pop	r12
    1a1c:	bf 90       	pop	r11
    1a1e:	af 90       	pop	r10
    1a20:	08 95       	ret

00001a22 <_ZN5Print5writeEPKc.part.2>:
    1a22:	fb 01       	movw	r30, r22
    1a24:	01 90       	ld	r0, Z+
    1a26:	00 20       	and	r0, r0
    1a28:	e9 f7       	brne	.-6      	; 0x1a24 <_ZN5Print5writeEPKc.part.2+0x2>
    1a2a:	31 97       	sbiw	r30, 0x01	; 1
    1a2c:	af 01       	movw	r20, r30
    1a2e:	46 1b       	sub	r20, r22
    1a30:	57 0b       	sbc	r21, r23
    1a32:	dc 01       	movw	r26, r24
    1a34:	ed 91       	ld	r30, X+
    1a36:	fc 91       	ld	r31, X
    1a38:	02 80       	ldd	r0, Z+2	; 0x02
    1a3a:	f3 81       	ldd	r31, Z+3	; 0x03
    1a3c:	e0 2d       	mov	r30, r0
    1a3e:	09 94       	ijmp

00001a40 <_ZN5Print5printEPKc>:
    1a40:	61 15       	cp	r22, r1
    1a42:	71 05       	cpc	r23, r1
    1a44:	11 f0       	breq	.+4      	; 0x1a4a <_ZN5Print5printEPKc+0xa>
    1a46:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN5Print5writeEPKc.part.2>
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	08 95       	ret

00001a50 <_ZN5Print5printEc>:
    1a50:	dc 01       	movw	r26, r24
    1a52:	ed 91       	ld	r30, X+
    1a54:	fc 91       	ld	r31, X
    1a56:	01 90       	ld	r0, Z+
    1a58:	f0 81       	ld	r31, Z
    1a5a:	e0 2d       	mov	r30, r0
    1a5c:	09 94       	ijmp

00001a5e <_ZN5Print7printlnEv>:
    1a5e:	69 ee       	ldi	r22, 0xE9	; 233
    1a60:	71 e0       	ldi	r23, 0x01	; 1
    1a62:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN5Print5writeEPKc.part.2>

00001a66 <_ZN5Print7printlnEPKc>:
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	8c 01       	movw	r16, r24
    1a70:	d0 e0       	ldi	r29, 0x00	; 0
    1a72:	c0 e0       	ldi	r28, 0x00	; 0
    1a74:	61 15       	cp	r22, r1
    1a76:	71 05       	cpc	r23, r1
    1a78:	19 f0       	breq	.+6      	; 0x1a80 <_ZN5Print7printlnEPKc+0x1a>
    1a7a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN5Print5writeEPKc.part.2>
    1a7e:	ec 01       	movw	r28, r24
    1a80:	c8 01       	movw	r24, r16
    1a82:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZN5Print7printlnEv>
    1a86:	8c 0f       	add	r24, r28
    1a88:	9d 1f       	adc	r25, r29
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	08 95       	ret

00001a94 <_ZN5Print11printNumberEmh>:
    1a94:	8f 92       	push	r8
    1a96:	9f 92       	push	r9
    1a98:	af 92       	push	r10
    1a9a:	bf 92       	push	r11
    1a9c:	ef 92       	push	r14
    1a9e:	ff 92       	push	r15
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	a1 97       	sbiw	r28, 0x21	; 33
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	7c 01       	movw	r14, r24
    1aba:	fa 01       	movw	r30, r20
    1abc:	cb 01       	movw	r24, r22
    1abe:	19 a2       	std	Y+33, r1	; 0x21
    1ac0:	22 30       	cpi	r18, 0x02	; 2
    1ac2:	08 f4       	brcc	.+2      	; 0x1ac6 <_ZN5Print11printNumberEmh+0x32>
    1ac4:	2a e0       	ldi	r18, 0x0A	; 10
    1ac6:	8e 01       	movw	r16, r28
    1ac8:	0f 5d       	subi	r16, 0xDF	; 223
    1aca:	1f 4f       	sbci	r17, 0xFF	; 255
    1acc:	82 2e       	mov	r8, r18
    1ace:	91 2c       	mov	r9, r1
    1ad0:	b1 2c       	mov	r11, r1
    1ad2:	a1 2c       	mov	r10, r1
    1ad4:	bf 01       	movw	r22, r30
    1ad6:	a5 01       	movw	r20, r10
    1ad8:	94 01       	movw	r18, r8
    1ada:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__udivmodsi4>
    1ade:	f9 01       	movw	r30, r18
    1ae0:	ca 01       	movw	r24, r20
    1ae2:	6a 30       	cpi	r22, 0x0A	; 10
    1ae4:	0c f5       	brge	.+66     	; 0x1b28 <_ZN5Print11printNumberEmh+0x94>
    1ae6:	60 5d       	subi	r22, 0xD0	; 208
    1ae8:	d8 01       	movw	r26, r16
    1aea:	6e 93       	st	-X, r22
    1aec:	8d 01       	movw	r16, r26
    1aee:	23 2b       	or	r18, r19
    1af0:	24 2b       	or	r18, r20
    1af2:	25 2b       	or	r18, r21
    1af4:	79 f7       	brne	.-34     	; 0x1ad4 <_ZN5Print11printNumberEmh+0x40>
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	10 97       	sbiw	r26, 0x00	; 0
    1afc:	21 f0       	breq	.+8      	; 0x1b06 <_ZN5Print11printNumberEmh+0x72>
    1afe:	bd 01       	movw	r22, r26
    1b00:	c7 01       	movw	r24, r14
    1b02:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN5Print5writeEPKc.part.2>
    1b06:	a1 96       	adiw	r28, 0x21	; 33
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	9f 90       	pop	r9
    1b24:	8f 90       	pop	r8
    1b26:	08 95       	ret
    1b28:	69 5c       	subi	r22, 0xC9	; 201
    1b2a:	de cf       	rjmp	.-68     	; 0x1ae8 <_ZN5Print11printNumberEmh+0x54>

00001b2c <_ZN5Print5printEli>:
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	21 15       	cp	r18, r1
    1b3e:	31 05       	cpc	r19, r1
    1b40:	81 f4       	brne	.+32     	; 0x1b62 <_ZN5Print5printEli+0x36>
    1b42:	dc 01       	movw	r26, r24
    1b44:	ed 91       	ld	r30, X+
    1b46:	fc 91       	ld	r31, X
    1b48:	01 90       	ld	r0, Z+
    1b4a:	f0 81       	ld	r31, Z
    1b4c:	e0 2d       	mov	r30, r0
    1b4e:	64 2f       	mov	r22, r20
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	ff 90       	pop	r15
    1b5a:	ef 90       	pop	r14
    1b5c:	df 90       	pop	r13
    1b5e:	cf 90       	pop	r12
    1b60:	09 94       	ijmp
    1b62:	2a 30       	cpi	r18, 0x0A	; 10
    1b64:	31 05       	cpc	r19, r1
    1b66:	01 f5       	brne	.+64     	; 0x1ba8 <_ZN5Print5printEli+0x7c>
    1b68:	2a e0       	ldi	r18, 0x0A	; 10
    1b6a:	77 ff       	sbrs	r23, 7
    1b6c:	1d c0       	rjmp	.+58     	; 0x1ba8 <_ZN5Print5printEli+0x7c>
    1b6e:	6a 01       	movw	r12, r20
    1b70:	7b 01       	movw	r14, r22
    1b72:	ec 01       	movw	r28, r24
    1b74:	6d e2       	ldi	r22, 0x2D	; 45
    1b76:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN5Print5printEc>
    1b7a:	8c 01       	movw	r16, r24
    1b7c:	44 27       	eor	r20, r20
    1b7e:	55 27       	eor	r21, r21
    1b80:	ba 01       	movw	r22, r20
    1b82:	4c 19       	sub	r20, r12
    1b84:	5d 09       	sbc	r21, r13
    1b86:	6e 09       	sbc	r22, r14
    1b88:	7f 09       	sbc	r23, r15
    1b8a:	2a e0       	ldi	r18, 0x0A	; 10
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN5Print11printNumberEmh>
    1b92:	80 0f       	add	r24, r16
    1b94:	91 1f       	adc	r25, r17
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	df 90       	pop	r13
    1ba4:	cf 90       	pop	r12
    1ba6:	08 95       	ret
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	df 90       	pop	r13
    1bb6:	cf 90       	pop	r12
    1bb8:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <_ZN5Print11printNumberEmh>

00001bbc <_ZN5Print5printEii>:
    1bbc:	9a 01       	movw	r18, r20
    1bbe:	ab 01       	movw	r20, r22
    1bc0:	77 0f       	add	r23, r23
    1bc2:	66 0b       	sbc	r22, r22
    1bc4:	77 0b       	sbc	r23, r23
    1bc6:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <_ZN5Print5printEli>

00001bca <_ZN5Print7printlnEii>:
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	ec 01       	movw	r28, r24
    1bd4:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN5Print5printEii>
    1bd8:	8c 01       	movw	r16, r24
    1bda:	ce 01       	movw	r24, r28
    1bdc:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZN5Print7printlnEv>
    1be0:	80 0f       	add	r24, r16
    1be2:	91 1f       	adc	r25, r17
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	08 95       	ret

00001bee <_ZN5Print5printEmi>:
    1bee:	21 15       	cp	r18, r1
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	41 f4       	brne	.+16     	; 0x1c04 <_ZN5Print5printEmi+0x16>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	ed 91       	ld	r30, X+
    1bf8:	fc 91       	ld	r31, X
    1bfa:	01 90       	ld	r0, Z+
    1bfc:	f0 81       	ld	r31, Z
    1bfe:	e0 2d       	mov	r30, r0
    1c00:	64 2f       	mov	r22, r20
    1c02:	09 94       	ijmp
    1c04:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <_ZN5Print11printNumberEmh>

00001c08 <_ZN5Print5printEji>:
    1c08:	9a 01       	movw	r18, r20
    1c0a:	ab 01       	movw	r20, r22
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <_ZN5Print5printEmi>

00001c14 <_ZN5Print10printFloatEdh>:
    1c14:	2f 92       	push	r2
    1c16:	3f 92       	push	r3
    1c18:	4f 92       	push	r4
    1c1a:	5f 92       	push	r5
    1c1c:	6f 92       	push	r6
    1c1e:	7f 92       	push	r7
    1c20:	8f 92       	push	r8
    1c22:	9f 92       	push	r9
    1c24:	af 92       	push	r10
    1c26:	bf 92       	push	r11
    1c28:	cf 92       	push	r12
    1c2a:	df 92       	push	r13
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	ec 01       	movw	r28, r24
    1c38:	6a 01       	movw	r12, r20
    1c3a:	7b 01       	movw	r14, r22
    1c3c:	72 2e       	mov	r7, r18
    1c3e:	ab 01       	movw	r20, r22
    1c40:	96 01       	movw	r18, r12
    1c42:	cb 01       	movw	r24, r22
    1c44:	b6 01       	movw	r22, r12
    1c46:	0e 94 31 1a 	call	0x3462	; 0x3462 <__unordsf2>
    1c4a:	6e ea       	ldi	r22, 0xAE	; 174
    1c4c:	74 e0       	ldi	r23, 0x04	; 4
    1c4e:	81 11       	cpse	r24, r1
    1c50:	26 c0       	rjmp	.+76     	; 0x1c9e <_ZN5Print10printFloatEdh+0x8a>
    1c52:	46 01       	movw	r8, r12
    1c54:	57 01       	movw	r10, r14
    1c56:	e8 94       	clt
    1c58:	b7 f8       	bld	r11, 7
    1c5a:	2f ef       	ldi	r18, 0xFF	; 255
    1c5c:	3f ef       	ldi	r19, 0xFF	; 255
    1c5e:	4f e7       	ldi	r20, 0x7F	; 127
    1c60:	5f e7       	ldi	r21, 0x7F	; 127
    1c62:	c5 01       	movw	r24, r10
    1c64:	b4 01       	movw	r22, r8
    1c66:	0e 94 31 1a 	call	0x3462	; 0x3462 <__unordsf2>
    1c6a:	81 11       	cpse	r24, r1
    1c6c:	0c c0       	rjmp	.+24     	; 0x1c86 <_ZN5Print10printFloatEdh+0x72>
    1c6e:	2f ef       	ldi	r18, 0xFF	; 255
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	4f e7       	ldi	r20, 0x7F	; 127
    1c74:	5f e7       	ldi	r21, 0x7F	; 127
    1c76:	c5 01       	movw	r24, r10
    1c78:	b4 01       	movw	r22, r8
    1c7a:	0e 94 10 18 	call	0x3020	; 0x3020 <__cmpsf2>
    1c7e:	62 eb       	ldi	r22, 0xB2	; 178
    1c80:	74 e0       	ldi	r23, 0x04	; 4
    1c82:	18 16       	cp	r1, r24
    1c84:	64 f0       	brlt	.+24     	; 0x1c9e <_ZN5Print10printFloatEdh+0x8a>
    1c86:	2f ef       	ldi	r18, 0xFF	; 255
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	5f e4       	ldi	r21, 0x4F	; 79
    1c8e:	c7 01       	movw	r24, r14
    1c90:	b6 01       	movw	r22, r12
    1c92:	0e 94 6f 19 	call	0x32de	; 0x32de <__gesf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	b4 f4       	brge	.+44     	; 0x1cc6 <_ZN5Print10printFloatEdh+0xb2>
    1c9a:	66 eb       	ldi	r22, 0xB6	; 182
    1c9c:	74 e0       	ldi	r23, 0x04	; 4
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	cf 90       	pop	r12
    1cae:	bf 90       	pop	r11
    1cb0:	af 90       	pop	r10
    1cb2:	9f 90       	pop	r9
    1cb4:	8f 90       	pop	r8
    1cb6:	7f 90       	pop	r7
    1cb8:	6f 90       	pop	r6
    1cba:	5f 90       	pop	r5
    1cbc:	4f 90       	pop	r4
    1cbe:	3f 90       	pop	r3
    1cc0:	2f 90       	pop	r2
    1cc2:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN5Print5writeEPKc.part.2>
    1cc6:	2f ef       	ldi	r18, 0xFF	; 255
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	5f ec       	ldi	r21, 0xCF	; 207
    1cce:	c7 01       	movw	r24, r14
    1cd0:	b6 01       	movw	r22, r12
    1cd2:	0e 94 10 18 	call	0x3020	; 0x3020 <__cmpsf2>
    1cd6:	87 fd       	sbrc	r24, 7
    1cd8:	e0 cf       	rjmp	.-64     	; 0x1c9a <_ZN5Print10printFloatEdh+0x86>
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	a9 01       	movw	r20, r18
    1ce0:	c7 01       	movw	r24, r14
    1ce2:	b6 01       	movw	r22, r12
    1ce4:	0e 94 10 18 	call	0x3020	; 0x3020 <__cmpsf2>
    1ce8:	31 2c       	mov	r3, r1
    1cea:	21 2c       	mov	r2, r1
    1cec:	87 ff       	sbrs	r24, 7
    1cee:	09 c0       	rjmp	.+18     	; 0x1d02 <_ZN5Print10printFloatEdh+0xee>
    1cf0:	6d e2       	ldi	r22, 0x2D	; 45
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN5Print5printEc>
    1cf8:	1c 01       	movw	r2, r24
    1cfa:	f7 fa       	bst	r15, 7
    1cfc:	f0 94       	com	r15
    1cfe:	f7 f8       	bld	r15, 7
    1d00:	f0 94       	com	r15
    1d02:	10 e0       	ldi	r17, 0x00	; 0
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	9f e3       	ldi	r25, 0x3F	; 63
    1d0c:	71 16       	cp	r7, r17
    1d0e:	41 f0       	breq	.+16     	; 0x1d20 <_ZN5Print10printFloatEdh+0x10c>
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 15 18 	call	0x302a	; 0x302a <__divsf3>
    1d1c:	1f 5f       	subi	r17, 0xFF	; 255
    1d1e:	f6 cf       	rjmp	.-20     	; 0x1d0c <_ZN5Print10printFloatEdh+0xf8>
    1d20:	a7 01       	movw	r20, r14
    1d22:	96 01       	movw	r18, r12
    1d24:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__addsf3>
    1d28:	2b 01       	movw	r4, r22
    1d2a:	3c 01       	movw	r6, r24
    1d2c:	0e 94 8e 18 	call	0x311c	; 0x311c <__fixunssfsi>
    1d30:	4b 01       	movw	r8, r22
    1d32:	5c 01       	movw	r10, r24
    1d34:	2a e0       	ldi	r18, 0x0A	; 10
    1d36:	bc 01       	movw	r22, r24
    1d38:	a4 01       	movw	r20, r8
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN5Print11printNumberEmh>
    1d40:	7c 01       	movw	r14, r24
    1d42:	e2 0c       	add	r14, r2
    1d44:	f3 1c       	adc	r15, r3
    1d46:	11 23       	and	r17, r17
    1d48:	b1 f1       	breq	.+108    	; 0x1db6 <_ZN5Print10printFloatEdh+0x1a2>
    1d4a:	c5 01       	movw	r24, r10
    1d4c:	b4 01       	movw	r22, r8
    1d4e:	0e 94 bd 18 	call	0x317a	; 0x317a <__floatunsisf>
    1d52:	9b 01       	movw	r18, r22
    1d54:	ac 01       	movw	r20, r24
    1d56:	c3 01       	movw	r24, r6
    1d58:	b2 01       	movw	r22, r4
    1d5a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__subsf3>
    1d5e:	4b 01       	movw	r8, r22
    1d60:	5c 01       	movw	r10, r24
    1d62:	6e e2       	ldi	r22, 0x2E	; 46
    1d64:	ce 01       	movw	r24, r28
    1d66:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN5Print5printEc>
    1d6a:	e8 0e       	add	r14, r24
    1d6c:	f9 1e       	adc	r15, r25
    1d6e:	11 50       	subi	r17, 0x01	; 1
    1d70:	10 f1       	brcs	.+68     	; 0x1db6 <_ZN5Print10printFloatEdh+0x1a2>
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	c5 01       	movw	r24, r10
    1d7c:	b4 01       	movw	r22, r8
    1d7e:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsf3>
    1d82:	2b 01       	movw	r4, r22
    1d84:	3c 01       	movw	r6, r24
    1d86:	0e 94 8e 18 	call	0x311c	; 0x311c <__fixunssfsi>
    1d8a:	4b 01       	movw	r8, r22
    1d8c:	4a e0       	ldi	r20, 0x0A	; 10
    1d8e:	50 e0       	ldi	r21, 0x00	; 0
    1d90:	ce 01       	movw	r24, r28
    1d92:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN5Print5printEji>
    1d96:	e8 0e       	add	r14, r24
    1d98:	f9 1e       	adc	r15, r25
    1d9a:	b4 01       	movw	r22, r8
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	0e 94 bd 18 	call	0x317a	; 0x317a <__floatunsisf>
    1da4:	9b 01       	movw	r18, r22
    1da6:	ac 01       	movw	r20, r24
    1da8:	c3 01       	movw	r24, r6
    1daa:	b2 01       	movw	r22, r4
    1dac:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__subsf3>
    1db0:	4b 01       	movw	r8, r22
    1db2:	5c 01       	movw	r10, r24
    1db4:	dc cf       	rjmp	.-72     	; 0x1d6e <_ZN5Print10printFloatEdh+0x15a>
    1db6:	c7 01       	movw	r24, r14
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	1f 91       	pop	r17
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	bf 90       	pop	r11
    1dc8:	af 90       	pop	r10
    1dca:	9f 90       	pop	r9
    1dcc:	8f 90       	pop	r8
    1dce:	7f 90       	pop	r7
    1dd0:	6f 90       	pop	r6
    1dd2:	5f 90       	pop	r5
    1dd4:	4f 90       	pop	r4
    1dd6:	3f 90       	pop	r3
    1dd8:	2f 90       	pop	r2
    1dda:	08 95       	ret

00001ddc <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1de6:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN5Print10printFloatEdh>
    1dea:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1dec:	ce 01       	movw	r24, r28
    1dee:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZN5Print7printlnEv>
  return n;
}
    1df2:	80 0f       	add	r24, r16
    1df4:	91 1f       	adc	r25, r17
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	08 95       	ret

00001e00 <osEE_check_disableint>:

  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
  } else
  if (Info == NULL) {
    ev = E_OS_PARAM_POINTER;
    1e00:	fc 01       	movw	r30, r24
    1e02:	81 8d       	ldd	r24, Z+25	; 0x19
    1e04:	81 11       	cpse	r24, r1
    1e06:	0b c0       	rjmp	.+22     	; 0x1e1e <osEE_check_disableint+0x1e>
    1e08:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e0a:	81 11       	cpse	r24, r1
    1e0c:	08 c0       	rjmp	.+16     	; 0x1e1e <osEE_check_disableint+0x1e>
    1e0e:	21 e0       	ldi	r18, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e14:	81 11       	cpse	r24, r1
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <osEE_check_disableint+0x1a>
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	82 2f       	mov	r24, r18
    1e1c:	08 95       	ret
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	08 95       	ret

00001e24 <osEE_call_error_hook>:
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	ec 01       	movw	r28, r24
    1e2e:	0d 89       	ldd	r16, Y+21	; 0x15
    1e30:	1e 89       	ldd	r17, Y+22	; 0x16
    1e32:	03 30       	cpi	r16, 0x03	; 3
    1e34:	11 05       	cpc	r17, r1
    1e36:	59 f0       	breq	.+22     	; 0x1e4e <osEE_call_error_hook+0x2a>
    1e38:	cb 01       	movw	r24, r22
    1e3a:	23 e0       	ldi	r18, 0x03	; 3
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	3e 8b       	std	Y+22, r19	; 0x16
    1e40:	2d 8b       	std	Y+21, r18	; 0x15
    1e42:	7c 87       	std	Y+12, r23	; 0x0c
    1e44:	6b 87       	std	Y+11, r22	; 0x0b
    1e46:	0e 94 a6 04 	call	0x94c	; 0x94c <ErrorHook>
    1e4a:	1e 8b       	std	Y+22, r17	; 0x16
    1e4c:	0d 8b       	std	Y+21, r16	; 0x15
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	08 95       	ret

00001e58 <StartOS>:
    1e58:	4f 92       	push	r4
    1e5a:	5f 92       	push	r5
    1e5c:	6f 92       	push	r6
    1e5e:	7f 92       	push	r7
    1e60:	8f 92       	push	r8
    1e62:	9f 92       	push	r9
    1e64:	af 92       	push	r10
    1e66:	bf 92       	push	r11
    1e68:	cf 92       	push	r12
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <StartOS+0x22>
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	88 2e       	mov	r8, r24
    1e80:	00 91 63 02 	lds	r16, 0x0263	; 0x800263 <CDB>
    1e84:	10 91 64 02 	lds	r17, 0x0264	; 0x800264 <CDB+0x1>
    1e88:	ff b6       	in	r15, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	d8 01       	movw	r26, r16
    1e8e:	18 96       	adiw	r26, 0x08	; 8
    1e90:	8d 91       	ld	r24, X+
    1e92:	9c 91       	ld	r25, X
    1e94:	19 97       	sbiw	r26, 0x09	; 9
    1e96:	89 2b       	or	r24, r25
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <StartOS+0x44>
    1e9a:	b0 c0       	rjmp	.+352    	; 0x1ffc <StartOS+0x1a4>
    1e9c:	89 e0       	ldi	r24, 0x09	; 9
    1e9e:	95 e1       	ldi	r25, 0x15	; 21
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <osEE_avr8_system_timer_init>
    1ea8:	a0 90 67 02 	lds	r10, 0x0267	; 0x800267 <CDB+0x4>
    1eac:	b0 90 68 02 	lds	r11, 0x0268	; 0x800268 <CDB+0x5>
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	91 87       	std	Z+9, r25	; 0x09
    1eb8:	80 87       	std	Z+8, r24	; 0x08
    1eba:	82 86       	std	Z+10, r8	; 0x0a
    1ebc:	e5 88       	ldd	r14, Z+21	; 0x15
    1ebe:	f6 88       	ldd	r15, Z+22	; 0x16
    1ec0:	87 e0       	ldi	r24, 0x07	; 7
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	96 8b       	std	Z+22, r25	; 0x16
    1ec6:	85 8b       	std	Z+21, r24	; 0x15
    1ec8:	0e 94 13 04 	call	0x826	; 0x826 <StartupHook>
    1ecc:	d8 01       	movw	r26, r16
    1ece:	56 96       	adiw	r26, 0x16	; 22
    1ed0:	fc 92       	st	X, r15
    1ed2:	ee 92       	st	-X, r14
    1ed4:	55 97       	sbiw	r26, 0x15	; 21
    1ed6:	e0 90 6f 02 	lds	r14, 0x026F	; 0x80026f <CDB+0xc>
    1eda:	f0 90 70 02 	lds	r15, 0x0270	; 0x800270 <CDB+0xd>
    1ede:	d1 2c       	mov	r13, r1
    1ee0:	c1 2c       	mov	r12, r1
    1ee2:	b4 e0       	ldi	r27, 0x04	; 4
    1ee4:	8b 9e       	mul	r8, r27
    1ee6:	40 01       	movw	r8, r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	e8 0c       	add	r14, r8
    1eec:	f9 1c       	adc	r15, r9
    1eee:	37 01       	movw	r6, r14
    1ef0:	e2 e0       	ldi	r30, 0x02	; 2
    1ef2:	6e 0e       	add	r6, r30
    1ef4:	71 1c       	adc	r7, r1
    1ef6:	46 e0       	ldi	r20, 0x06	; 6
    1ef8:	54 2e       	mov	r5, r20
    1efa:	f3 01       	movw	r30, r6
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	c8 16       	cp	r12, r24
    1f02:	d9 06       	cpc	r13, r25
    1f04:	e0 f1       	brcs	.+120    	; 0x1f7e <StartOS+0x126>
    1f06:	e0 90 6b 02 	lds	r14, 0x026B	; 0x80026b <CDB+0x8>
    1f0a:	f0 90 6c 02 	lds	r15, 0x026C	; 0x80026c <CDB+0x9>
    1f0e:	38 01       	movw	r6, r16
    1f10:	f2 e0       	ldi	r31, 0x02	; 2
    1f12:	6f 0e       	add	r6, r31
    1f14:	71 1c       	adc	r7, r1
    1f16:	d1 2c       	mov	r13, r1
    1f18:	c1 2c       	mov	r12, r1
    1f1a:	e8 0c       	add	r14, r8
    1f1c:	f9 1c       	adc	r15, r9
    1f1e:	27 01       	movw	r4, r14
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	48 0e       	add	r4, r24
    1f24:	51 1c       	adc	r5, r1
    1f26:	88 24       	eor	r8, r8
    1f28:	83 94       	inc	r8
    1f2a:	91 2c       	mov	r9, r1
    1f2c:	f2 01       	movw	r30, r4
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	c8 16       	cp	r12, r24
    1f34:	d9 06       	cpc	r13, r25
    1f36:	e8 f1       	brcs	.+122    	; 0x1fb2 <StartOS+0x15a>
    1f38:	d8 01       	movw	r26, r16
    1f3a:	18 96       	adiw	r26, 0x08	; 8
    1f3c:	8d 91       	ld	r24, X+
    1f3e:	9c 91       	ld	r25, X
    1f40:	19 97       	sbiw	r26, 0x09	; 9
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	31 f4       	brne	.+12     	; 0x1f52 <StartOS+0xfa>
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	19 96       	adiw	r26, 0x09	; 9
    1f4c:	9c 93       	st	X, r25
    1f4e:	8e 93       	st	-X, r24
    1f50:	18 97       	sbiw	r26, 0x08	; 8
    1f52:	f8 01       	movw	r30, r16
    1f54:	80 85       	ldd	r24, Z+8	; 0x08
    1f56:	91 85       	ldd	r25, Z+9	; 0x09
    1f58:	02 97       	sbiw	r24, 0x02	; 2
    1f5a:	41 f4       	brne	.+16     	; 0x1f6c <StartOS+0x114>
    1f5c:	d5 01       	movw	r26, r10
    1f5e:	12 96       	adiw	r26, 0x02	; 2
    1f60:	6d 91       	ld	r22, X+
    1f62:	7c 91       	ld	r23, X
    1f64:	ab 01       	movw	r20, r22
    1f66:	c5 01       	movw	r24, r10
    1f68:	0e 94 16 01 	call	0x22c	; 0x22c <osEE_hal_save_ctx_and_ready2stacked>
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	80 85       	ldd	r24, Z+8	; 0x08
    1f70:	91 85       	ldd	r25, Z+9	; 0x09
    1f72:	02 97       	sbiw	r24, 0x02	; 2
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <StartOS+0x120>
    1f76:	78 94       	sei
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	4d c0       	rjmp	.+154    	; 0x2018 <StartOS+0x1c0>
    1f7e:	d7 01       	movw	r26, r14
    1f80:	ed 91       	ld	r30, X+
    1f82:	fc 91       	ld	r31, X
    1f84:	5c 9c       	mul	r5, r12
    1f86:	c0 01       	movw	r24, r0
    1f88:	5d 9c       	mul	r5, r13
    1f8a:	90 0d       	add	r25, r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	e8 0f       	add	r30, r24
    1f90:	f9 1f       	adc	r31, r25
    1f92:	a0 81       	ld	r26, Z
    1f94:	b1 81       	ldd	r27, Z+1	; 0x01
    1f96:	24 81       	ldd	r18, Z+4	; 0x04
    1f98:	35 81       	ldd	r19, Z+5	; 0x05
    1f9a:	42 81       	ldd	r20, Z+2	; 0x02
    1f9c:	53 81       	ldd	r21, Z+3	; 0x03
    1f9e:	bd 01       	movw	r22, r26
    1fa0:	12 96       	adiw	r26, 0x02	; 2
    1fa2:	8d 91       	ld	r24, X+
    1fa4:	9c 91       	ld	r25, X
    1fa6:	0e 94 f6 14 	call	0x29ec	; 0x29ec <osEE_alarm_set_rel>
    1faa:	bf ef       	ldi	r27, 0xFF	; 255
    1fac:	cb 1a       	sub	r12, r27
    1fae:	db 0a       	sbc	r13, r27
    1fb0:	a4 cf       	rjmp	.-184    	; 0x1efa <StartOS+0xa2>
    1fb2:	d7 01       	movw	r26, r14
    1fb4:	ed 91       	ld	r30, X+
    1fb6:	fc 91       	ld	r31, X
    1fb8:	c6 01       	movw	r24, r12
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	e8 0f       	add	r30, r24
    1fc0:	f9 1f       	adc	r31, r25
    1fc2:	40 81       	ld	r20, Z
    1fc4:	51 81       	ldd	r21, Z+1	; 0x01
    1fc6:	da 01       	movw	r26, r20
    1fc8:	14 96       	adiw	r26, 0x04	; 4
    1fca:	ed 91       	ld	r30, X+
    1fcc:	fc 91       	ld	r31, X
    1fce:	80 81       	ld	r24, Z
    1fd0:	8f 5f       	subi	r24, 0xFF	; 255
    1fd2:	80 83       	st	Z, r24
    1fd4:	93 82       	std	Z+3, r9	; 0x03
    1fd6:	82 82       	std	Z+2, r8	; 0x02
    1fd8:	f8 01       	movw	r30, r16
    1fda:	64 81       	ldd	r22, Z+4	; 0x04
    1fdc:	75 81       	ldd	r23, Z+5	; 0x05
    1fde:	db 01       	movw	r26, r22
    1fe0:	8d 91       	ld	r24, X+
    1fe2:	9c 91       	ld	r25, X
    1fe4:	11 97       	sbiw	r26, 0x01	; 1
    1fe6:	95 83       	std	Z+5, r25	; 0x05
    1fe8:	84 83       	std	Z+4, r24	; 0x04
    1fea:	1d 92       	st	X+, r1
    1fec:	1c 92       	st	X, r1
    1fee:	c3 01       	movw	r24, r6
    1ff0:	0e 94 46 13 	call	0x268c	; 0x268c <osEE_scheduler_rq_insert>
    1ff4:	bf ef       	ldi	r27, 0xFF	; 255
    1ff6:	cb 1a       	sub	r12, r27
    1ff8:	db 0a       	sbc	r13, r27
    1ffa:	98 cf       	rjmp	.-208    	; 0x1f2c <StartOS+0xd4>
    1ffc:	88 e3       	ldi	r24, 0x38	; 56
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	1e 96       	adiw	r26, 0x0e	; 14
    2002:	9c 93       	st	X, r25
    2004:	8e 93       	st	-X, r24
    2006:	1d 97       	sbiw	r26, 0x0d	; 13
    2008:	61 e0       	ldi	r22, 0x01	; 1
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	c8 01       	movw	r24, r16
    200e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <osEE_call_error_hook>
    2012:	ff be       	out	0x3f, r15	; 63
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	1f 91       	pop	r17
    2022:	0f 91       	pop	r16
    2024:	ff 90       	pop	r15
    2026:	ef 90       	pop	r14
    2028:	df 90       	pop	r13
    202a:	cf 90       	pop	r12
    202c:	bf 90       	pop	r11
    202e:	af 90       	pop	r10
    2030:	9f 90       	pop	r9
    2032:	8f 90       	pop	r8
    2034:	7f 90       	pop	r7
    2036:	6f 90       	pop	r6
    2038:	5f 90       	pop	r5
    203a:	4f 90       	pop	r4
    203c:	08 95       	ret

0000203e <TerminateTask>:
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <CDB>
    2048:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <CDB+0x1>
    204c:	dc 01       	movw	r26, r24
    204e:	ed 91       	ld	r30, X+
    2050:	fc 91       	ld	r31, X
    2052:	27 81       	ldd	r18, Z+7	; 0x07
    2054:	30 85       	ldd	r19, Z+8	; 0x08
    2056:	22 30       	cpi	r18, 0x02	; 2
    2058:	31 05       	cpc	r19, r1
    205a:	88 f4       	brcc	.+34     	; 0x207e <TerminateTask+0x40>
    205c:	a4 81       	ldd	r26, Z+4	; 0x04
    205e:	b5 81       	ldd	r27, Z+5	; 0x05
    2060:	14 96       	adiw	r26, 0x04	; 4
    2062:	2d 91       	ld	r18, X+
    2064:	3c 91       	ld	r19, X
    2066:	c6 e0       	ldi	r28, 0x06	; 6
    2068:	d0 e0       	ldi	r29, 0x00	; 0
    206a:	23 2b       	or	r18, r19
    206c:	51 f4       	brne	.+20     	; 0x2082 <TerminateTask+0x44>
    206e:	8f b7       	in	r24, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	6e e2       	ldi	r22, 0x2E	; 46
    2074:	72 e1       	ldi	r23, 0x12	; 18
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	0e 94 36 01 	call	0x26c	; 0x26c <osEE_hal_terminate_ctx>
    207e:	c2 e0       	ldi	r28, 0x02	; 2
    2080:	d0 e0       	ldi	r29, 0x00	; 0
    2082:	1f b7       	in	r17, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	22 e0       	ldi	r18, 0x02	; 2
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	fc 01       	movw	r30, r24
    208c:	36 87       	std	Z+14, r19	; 0x0e
    208e:	25 87       	std	Z+13, r18	; 0x0d
    2090:	be 01       	movw	r22, r28
    2092:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <osEE_call_error_hook>
    2096:	1f bf       	out	0x3f, r17	; 63
    2098:	ce 01       	movw	r24, r28
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	08 95       	ret

000020a2 <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    20a2:	9f 92       	push	r9
    20a4:	af 92       	push	r10
    20a6:	bf 92       	push	r11
    20a8:	cf 92       	push	r12
    20aa:	df 92       	push	r13
    20ac:	ef 92       	push	r14
    20ae:	ff 92       	push	r15
    20b0:	0f 93       	push	r16
    20b2:	1f 93       	push	r17
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <WaitEvent+0x18>
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	6c 01       	movw	r12, r24
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    20c0:	e0 90 63 02 	lds	r14, 0x0263	; 0x800263 <CDB>
    20c4:	f0 90 64 02 	lds	r15, 0x0264	; 0x800264 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    20c8:	c7 01       	movw	r24, r14
    20ca:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <osEE_check_disableint>
    20ce:	89 2b       	or	r24, r25
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <WaitEvent+0x32>
    20d2:	45 c0       	rjmp	.+138    	; 0x215e <WaitEvent+0xbc>
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    20d4:	d7 01       	movw	r26, r14
    20d6:	ad 90       	ld	r10, X+
    20d8:	bc 90       	ld	r11, X
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    20da:	f5 01       	movw	r30, r10
    20dc:	87 81       	ldd	r24, Z+7	; 0x07
    20de:	90 85       	ldd	r25, Z+8	; 0x08
#else
    || (p_ccb->os_context > OSEE_TASK_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    20e0:	02 e0       	ldi	r16, 0x02	; 2
    20e2:	10 e0       	ldi	r17, 0x00	; 0
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    20e4:	82 30       	cpi	r24, 0x02	; 2
    20e6:	91 05       	cpc	r25, r1
    20e8:	e0 f5       	brcc	.+120    	; 0x2162 <WaitEvent+0xc0>
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    20ea:	04 81       	ldd	r16, Z+4	; 0x04
    20ec:	15 81       	ldd	r17, Z+5	; 0x05
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
#if (defined(OSEE_HAS_MUTEX))
  if (p_curr_tcb->p_first_mtx != NULL) {
    20ee:	d8 01       	movw	r26, r16
    20f0:	14 96       	adiw	r26, 0x04	; 4
    20f2:	2d 91       	ld	r18, X+
    20f4:	3c 91       	ld	r19, X
    20f6:	15 97       	sbiw	r26, 0x05	; 5
    20f8:	23 2b       	or	r18, r19
    20fa:	09 f0       	breq	.+2      	; 0x20fe <WaitEvent+0x5c>
    20fc:	53 c0       	rjmp	.+166    	; 0x21a4 <WaitEvent+0x102>
#endif /* !OSEE_SINGLECORE */
    {
      ev = E_OS_RESOURCE;
    }
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	09 f0       	breq	.+2      	; 0x2104 <WaitEvent+0x62>
    2102:	53 c0       	rjmp	.+166    	; 0x21aa <WaitEvent+0x108>
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_MUTEX */
#endif /* OSEE_HAS_CHECKS */
  /* Check if we have to wait */
  if ((p_curr_tcb->event_mask & Mask) == 0U) {
    2104:	18 96       	adiw	r26, 0x08	; 8
    2106:	8d 91       	ld	r24, X+
    2108:	9c 91       	ld	r25, X
    210a:	8c 21       	and	r24, r12
    210c:	9d 21       	and	r25, r13
    210e:	89 2b       	or	r24, r25
    2110:	19 f5       	brne	.+70     	; 0x2158 <WaitEvent+0xb6>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    2112:	9f b6       	in	r9, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    2114:	f8 94       	cli
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();

    /* Set the waiting mask */
    p_curr_tcb->wait_mask = Mask;
    2116:	f8 01       	movw	r30, r16
    2118:	d7 82       	std	Z+7, r13	; 0x07
    211a:	c6 82       	std	Z+6, r12	; 0x06

    /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
    osEE_lock_core(p_cdb);

    p_to =  osEE_scheduler_task_block_current(osEE_get_kernel(),
    211c:	ae 01       	movw	r20, r28
    211e:	4f 5f       	subi	r20, 0xFF	; 255
    2120:	5f 4f       	sbci	r21, 0xFF	; 255
    2122:	63 e6       	ldi	r22, 0x63	; 99
    2124:	72 e0       	ldi	r23, 0x02	; 2
    2126:	8d e4       	ldi	r24, 0x4D	; 77
    2128:	92 e0       	ldi	r25, 0x02	; 2
    212a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <osEE_scheduler_task_block_current>
              p_cdb, &p_blocked_sn);

    /* Release the SN, I will allocate a new one when the TASK will be
     * reinserted into be reinserted in RQ */
    osEE_sn_release(&p_ccb->p_free_sn, p_blocked_sn);
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    2132:	d7 01       	movw	r26, r14
    2134:	14 96       	adiw	r26, 0x04	; 4
    2136:	2d 91       	ld	r18, X+
    2138:	3c 91       	ld	r19, X
    213a:	15 97       	sbiw	r26, 0x05	; 5
    213c:	31 83       	std	Z+1, r19	; 0x01
    213e:	20 83       	st	Z, r18
  (*pp_first)       = p_to_free;
    2140:	15 96       	adiw	r26, 0x05	; 5
    2142:	fc 93       	st	X, r31
    2144:	ee 93       	st	-X, r30
    2146:	14 97       	sbiw	r26, 0x04	; 4

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_to);
    2148:	bc 01       	movw	r22, r24
    214a:	c5 01       	movw	r24, r10
    214c:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <osEE_change_context_from_running>

    /* Reset the waiting mask */
    p_curr_tcb->wait_mask = 0U;
    2150:	f8 01       	movw	r30, r16
    2152:	17 82       	std	Z+7, r1	; 0x07
    2154:	16 82       	std	Z+6, r1	; 0x06
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    2156:	9f be       	out	0x3f, r9	; 63

    osEE_end_primitive(flags);

    ev = E_OK;
  } else {
    ev = E_OK;
    2158:	10 e0       	ldi	r17, 0x00	; 0
    215a:	00 e0       	ldi	r16, 0x00	; 0
  }
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <WaitEvent+0xe4>
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    215e:	0c e0       	ldi	r16, 0x0C	; 12
    2160:	10 e0       	ldi	r17, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    2162:	bf b6       	in	r11, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    2164:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    2166:	82 e2       	ldi	r24, 0x22	; 34
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	d7 01       	movw	r26, r14
    216c:	1e 96       	adiw	r26, 0x0e	; 14
    216e:	9c 93       	st	X, r25
    2170:	8e 93       	st	-X, r24
    2172:	1d 97       	sbiw	r26, 0x0d	; 13
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    2174:	50 96       	adiw	r26, 0x10	; 16
    2176:	dc 92       	st	X, r13
    2178:	ce 92       	st	-X, r12
    217a:	1f 97       	sbiw	r26, 0x0f	; 15
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_set_service_id(p_ccb, OSServiceId_WaitEvent);
    param.num_param = Mask;
    osEE_set_api_param1(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    217c:	b8 01       	movw	r22, r16
    217e:	c7 01       	movw	r24, r14
    2180:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    2184:	bf be       	out	0x3f, r11	; 63
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
    2186:	c8 01       	movw	r24, r16
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	bf 90       	pop	r11
    219e:	af 90       	pop	r10
    21a0:	9f 90       	pop	r9
    21a2:	08 95       	ret
    if (p_curr_tcb->p_first_mtx->mtx_type == OSEE_MUTEX_SPINLOCK) {
      ev = E_OS_SPINLOCK
    } else
#endif /* !OSEE_SINGLECORE */
    {
      ev = E_OS_RESOURCE;
    21a4:	06 e0       	ldi	r16, 0x06	; 6
    21a6:	10 e0       	ldi	r17, 0x00	; 0
    21a8:	dc cf       	rjmp	.-72     	; 0x2162 <WaitEvent+0xc0>
    }
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    ev = E_OS_ACCESS;
    21aa:	01 e0       	ldi	r16, 0x01	; 1
    21ac:	10 e0       	ldi	r17, 0x00	; 0
    21ae:	d9 cf       	rjmp	.-78     	; 0x2162 <WaitEvent+0xc0>

000021b0 <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    21b0:	df 92       	push	r13
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	18 2f       	mov	r17, r24
    21c0:	7b 01       	movw	r14, r22
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_curr_cdb  = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_ccb  = p_curr_cdb->p_ccb;
    21c2:	c0 91 63 02 	lds	r28, 0x0263	; 0x800263 <CDB>
    21c6:	d0 91 64 02 	lds	r29, 0x0264	; 0x800264 <CDB+0x1>
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
/* SetEvent is callable by Task and ISR2 */
  if (osEE_check_disableint(p_curr_ccb)) {
    21ca:	ce 01       	movw	r24, r28
    21cc:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <osEE_check_disableint>
    21d0:	21 2f       	mov	r18, r17
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	89 2b       	or	r24, r25
    21d6:	09 f0       	breq	.+2      	; 0x21da <SetEvent+0x2a>
    21d8:	76 c0       	rjmp	.+236    	; 0x22c6 <SetEvent+0x116>
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type > OSEE_TASK_TYPE_ISR2)
    21da:	e8 81       	ld	r30, Y
    21dc:	f9 81       	ldd	r31, Y+1	; 0x01
    21de:	87 81       	ldd	r24, Z+7	; 0x07
    21e0:	90 85       	ldd	r25, Z+8	; 0x08
    21e2:	03 97       	sbiw	r24, 0x03	; 3
    21e4:	08 f0       	brcs	.+2      	; 0x21e8 <SetEvent+0x38>
    21e6:	72 c0       	rjmp	.+228    	; 0x22cc <SetEvent+0x11c>
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    21e8:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <KDB+0x6>
    21ec:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <KDB+0x7>
    21f0:	28 17       	cp	r18, r24
    21f2:	39 07       	cpc	r19, r25
    21f4:	08 f0       	brcs	.+2      	; 0x21f8 <SetEvent+0x48>
    21f6:	6d c0       	rjmp	.+218    	; 0x22d2 <SetEvent+0x122>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
    21f8:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <KDB+0x2>
    21fc:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <KDB+0x3>
    2200:	c9 01       	movw	r24, r18
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	e8 0f       	add	r30, r24
    2208:	f9 1f       	adc	r31, r25
    220a:	a0 81       	ld	r26, Z
    220c:	b1 81       	ldd	r27, Z+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_waking_up = p_tdb_waking_up->p_tcb;
    220e:	14 96       	adiw	r26, 0x04	; 4
    2210:	ed 91       	ld	r30, X+
    2212:	fc 91       	ld	r31, X
    2214:	15 97       	sbiw	r26, 0x05	; 5
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    2216:	1f b7       	in	r17, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    2218:	f8 94       	cli

    /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
    osEE_lock_core(p_cdb_waking_up);

#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
    221a:	17 96       	adiw	r26, 0x07	; 7
    221c:	8d 91       	ld	r24, X+
    221e:	9c 91       	ld	r25, X
    2220:	18 97       	sbiw	r26, 0x08	; 8
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	99 f0       	breq	.+38     	; 0x224c <SetEvent+0x9c>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    2226:	1f bf       	out	0x3f, r17	; 63
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_ACCESS;
    2228:	01 e0       	ldi	r16, 0x01	; 1
    222a:	10 e0       	ldi	r17, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    222c:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    222e:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    2230:	8c e1       	ldi	r24, 0x1C	; 28
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9e 87       	std	Y+14, r25	; 0x0e
    2236:	8d 87       	std	Y+13, r24	; 0x0d
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    2238:	38 8b       	std	Y+16, r19	; 0x10
    223a:	2f 87       	std	Y+15, r18	; 0x0f
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param2 = api_param;
    223c:	fa 8a       	std	Y+18, r15	; 0x12
    223e:	e9 8a       	std	Y+17, r14	; 0x11
    osEE_set_service_id(p_curr_ccb, OSServiceId_SetEvent);
    param.num_param = TaskID;
    osEE_set_api_param1(p_curr_ccb, param);
    param.num_param = Mask;
    osEE_set_api_param2(p_curr_ccb, param);
    osEE_call_error_hook(p_curr_ccb, ev);
    2240:	b8 01       	movw	r22, r16
    2242:	ce 01       	movw	r24, r28
    2244:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    2248:	df be       	out	0x3f, r13	; 63
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
    224a:	34 c0       	rjmp	.+104    	; 0x22b4 <SetEvent+0x104>
    if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_waking_up->status == OSEE_TASK_SUSPENDED) {
    224c:	42 81       	ldd	r20, Z+2	; 0x02
    224e:	53 81       	ldd	r21, Z+3	; 0x03
    2250:	41 15       	cp	r20, r1
    2252:	51 05       	cpc	r21, r1
    2254:	21 f4       	brne	.+8      	; 0x225e <SetEvent+0xae>
    2256:	1f bf       	out	0x3f, r17	; 63
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_STATE;
    2258:	07 e0       	ldi	r16, 0x07	; 7
    225a:	10 e0       	ldi	r17, 0x00	; 0
    225c:	e7 cf       	rjmp	.-50     	; 0x222c <SetEvent+0x7c>
    } else
#endif /* OSEE_HAS_CHECKS */
    {
      /* Set the event mask only if the task is not suspended */
      p_tcb_waking_up->event_mask |= Mask;
    225e:	80 85       	ldd	r24, Z+8	; 0x08
    2260:	91 85       	ldd	r25, Z+9	; 0x09
    2262:	8e 29       	or	r24, r14
    2264:	9f 29       	or	r25, r15
    2266:	91 87       	std	Z+9, r25	; 0x09
    2268:	80 87       	std	Z+8, r24	; 0x08

      if (((p_tcb_waking_up->wait_mask & Mask) != 0U) &&
    226a:	86 81       	ldd	r24, Z+6	; 0x06
    226c:	97 81       	ldd	r25, Z+7	; 0x07
    226e:	e8 22       	and	r14, r24
    2270:	f9 22       	and	r15, r25
    2272:	ef 28       	or	r14, r15
    2274:	e1 f0       	breq	.+56     	; 0x22ae <SetEvent+0xfe>
    2276:	43 30       	cpi	r20, 0x03	; 3
    2278:	51 05       	cpc	r21, r1
    227a:	c9 f4       	brne	.+50     	; 0x22ae <SetEvent+0xfe>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    227c:	ec 81       	ldd	r30, Y+4	; 0x04
    227e:	fd 81       	ldd	r31, Y+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	9d 83       	std	Y+5, r25	; 0x05
    2286:	8c 83       	std	Y+4, r24	; 0x04
  p_sn_allocated->p_next  = NULL;
    2288:	11 82       	std	Z+1, r1	; 0x01
    228a:	10 82       	st	Z, r1
          (p_tcb_waking_up->status == OSEE_TASK_WAITING))
      {
        CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
          p_sn = osEE_sn_alloc(&p_cdb_waking_up->p_ccb->p_free_sn);

        p_sn->p_tdb = p_tdb_waking_up;
    228c:	b3 83       	std	Z+3, r27	; 0x03
    228e:	a2 83       	std	Z+2, r26	; 0x02

        /* Release the TASK (and the SN) */
        if (osEE_scheduler_task_unblocked(p_kdb, p_cdb_waking_up, p_sn))
    2290:	af 01       	movw	r20, r30
    2292:	63 e6       	ldi	r22, 0x63	; 99
    2294:	72 e0       	ldi	r23, 0x02	; 2
    2296:	8d e4       	ldi	r24, 0x4D	; 77
    2298:	92 e0       	ldi	r25, 0x02	; 2
    229a:	0e 94 06 14 	call	0x280c	; 0x280c <osEE_scheduler_task_unblocked>
    229e:	89 2b       	or	r24, r25
    22a0:	31 f0       	breq	.+12     	; 0x22ae <SetEvent+0xfe>
        {
          (void)osEE_scheduler_task_preemption_point(p_kdb, p_cdb_waking_up);
    22a2:	63 e6       	ldi	r22, 0x63	; 99
    22a4:	72 e0       	ldi	r23, 0x02	; 2
    22a6:	8d e4       	ldi	r24, 0x4D	; 77
    22a8:	92 e0       	ldi	r25, 0x02	; 2
    22aa:	0e 94 b5 14 	call	0x296a	; 0x296a <osEE_scheduler_task_preemption_point>
    22ae:	1f bf       	out	0x3f, r17	; 63
      }

      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);

      ev = E_OK;
    22b0:	10 e0       	ldi	r17, 0x00	; 0
    22b2:	00 e0       	ldi	r16, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    22b4:	c8 01       	movw	r24, r16
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	df 90       	pop	r13
    22c4:	08 95       	ret
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
/* SetEvent is callable by Task and ISR2 */
  if (osEE_check_disableint(p_curr_ccb)) {
    ev = E_OS_DISABLEDINT;
    22c6:	0c e0       	ldi	r16, 0x0C	; 12
    22c8:	10 e0       	ldi	r17, 0x00	; 0
    22ca:	b0 cf       	rjmp	.-160    	; 0x222c <SetEvent+0x7c>
#else
    || (p_curr_ccb->os_context > OSEE_TASK_ISR2_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    22cc:	02 e0       	ldi	r16, 0x02	; 2
    22ce:	10 e0       	ldi	r17, 0x00	; 0
    22d0:	ad cf       	rjmp	.-166    	; 0x222c <SetEvent+0x7c>
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    22d2:	03 e0       	ldi	r16, 0x03	; 3
    22d4:	10 e0       	ldi	r17, 0x00	; 0
    22d6:	aa cf       	rjmp	.-172    	; 0x222c <SetEvent+0x7c>

000022d8 <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
    22d8:	df 92       	push	r13
    22da:	ef 92       	push	r14
    22dc:	ff 92       	push	r15
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	c8 2f       	mov	r28, r24
    22e8:	7b 01       	movw	r14, r22
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    22ea:	00 91 63 02 	lds	r16, 0x0263	; 0x800263 <CDB>
    22ee:	10 91 64 02 	lds	r17, 0x0264	; 0x800264 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    22f2:	c8 01       	movw	r24, r16
    22f4:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <osEE_check_disableint>
    22f8:	2c 2f       	mov	r18, r28
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	89 2b       	or	r24, r25
    22fe:	e1 f5       	brne	.+120    	; 0x2378 <GetEvent+0xa0>
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type > OSEE_TASK_TYPE_ISR2)
    2300:	d8 01       	movw	r26, r16
    2302:	ed 91       	ld	r30, X+
    2304:	fc 91       	ld	r31, X
    2306:	87 81       	ldd	r24, Z+7	; 0x07
    2308:	90 85       	ldd	r25, Z+8	; 0x08
    230a:	03 97       	sbiw	r24, 0x03	; 3
    230c:	08 f0       	brcs	.+2      	; 0x2310 <GetEvent+0x38>
    230e:	4d c0       	rjmp	.+154    	; 0x23aa <GetEvent+0xd2>
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    2310:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <KDB+0x6>
    2314:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <KDB+0x7>
    2318:	28 17       	cp	r18, r24
    231a:	39 07       	cpc	r19, r25
    231c:	08 f0       	brcs	.+2      	; 0x2320 <GetEvent+0x48>
    231e:	48 c0       	rjmp	.+144    	; 0x23b0 <GetEvent+0xd8>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
    2320:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <KDB+0x2>
    2324:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <KDB+0x3>
    2328:	c9 01       	movw	r24, r18
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	e8 0f       	add	r30, r24
    2330:	f9 1f       	adc	r31, r25
    2332:	01 90       	ld	r0, Z+
    2334:	f0 81       	ld	r31, Z
    2336:	e0 2d       	mov	r30, r0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    /* XXX: We will accept an harmless race condition here for TASKs that want
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
    2338:	87 81       	ldd	r24, Z+7	; 0x07
    233a:	90 85       	ldd	r25, Z+8	; 0x08
      ev = E_OS_ACCESS;
    233c:	c1 e0       	ldi	r28, 0x01	; 1
    233e:	d0 e0       	ldi	r29, 0x00	; 0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    /* XXX: We will accept an harmless race condition here for TASKs that want
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	e1 f4       	brne	.+56     	; 0x237c <GetEvent+0xa4>
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    2344:	04 80       	ldd	r0, Z+4	; 0x04
    2346:	f5 81       	ldd	r31, Z+5	; 0x05
    2348:	e0 2d       	mov	r30, r0
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	93 81       	ldd	r25, Z+3	; 0x03
    234e:	89 2b       	or	r24, r25
    2350:	91 f1       	breq	.+100    	; 0x23b6 <GetEvent+0xde>
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
    2352:	e1 14       	cp	r14, r1
    2354:	f1 04       	cpc	r15, r1
    2356:	91 f1       	breq	.+100    	; 0x23bc <GetEvent+0xe4>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      (*Event) = p_tcb_event->event_mask;
    2358:	80 85       	ldd	r24, Z+8	; 0x08
    235a:	91 85       	ldd	r25, Z+9	; 0x09
    235c:	f7 01       	movw	r30, r14
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24

      ev = E_OK;
    2362:	d0 e0       	ldi	r29, 0x00	; 0
    2364:	c0 e0       	ldi	r28, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    2366:	ce 01       	movw	r24, r28
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	df 90       	pop	r13
    2376:	08 95       	ret
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    2378:	cc e0       	ldi	r28, 0x0C	; 12
    237a:	d0 e0       	ldi	r29, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    237c:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    237e:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    2380:	80 e2       	ldi	r24, 0x20	; 32
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	d8 01       	movw	r26, r16
    2386:	1e 96       	adiw	r26, 0x0e	; 14
    2388:	9c 93       	st	X, r25
    238a:	8e 93       	st	-X, r24
    238c:	1d 97       	sbiw	r26, 0x0d	; 13
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    238e:	50 96       	adiw	r26, 0x10	; 16
    2390:	3c 93       	st	X, r19
    2392:	2e 93       	st	-X, r18
    2394:	1f 97       	sbiw	r26, 0x0f	; 15
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param2 = api_param;
    2396:	52 96       	adiw	r26, 0x12	; 18
    2398:	fc 92       	st	X, r15
    239a:	ee 92       	st	-X, r14
    239c:	51 97       	sbiw	r26, 0x11	; 17
    osEE_set_service_id(p_ccb, OSServiceId_GetEvent);
    param.num_param = TaskID;
    osEE_set_api_param1(p_ccb, param);
    param.p_param   = Event;
    osEE_set_api_param2(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    239e:	be 01       	movw	r22, r28
    23a0:	c8 01       	movw	r24, r16
    23a2:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    23a6:	df be       	out	0x3f, r13	; 63
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
    23a8:	de cf       	rjmp	.-68     	; 0x2366 <GetEvent+0x8e>
        (os_context != OSEE_PRETASKHOOK_CTX) &&
        (os_context != OSEE_POSTTASKHOOK_CTX))
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    23aa:	c2 e0       	ldi	r28, 0x02	; 2
    23ac:	d0 e0       	ldi	r29, 0x00	; 0
    23ae:	e6 cf       	rjmp	.-52     	; 0x237c <GetEvent+0xa4>
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    23b0:	c3 e0       	ldi	r28, 0x03	; 3
    23b2:	d0 e0       	ldi	r29, 0x00	; 0
    23b4:	e3 cf       	rjmp	.-58     	; 0x237c <GetEvent+0xa4>
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    23b6:	c7 e0       	ldi	r28, 0x07	; 7
    23b8:	d0 e0       	ldi	r29, 0x00	; 0
    23ba:	e0 cf       	rjmp	.-64     	; 0x237c <GetEvent+0xa4>
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
    23bc:	ce e0       	ldi	r28, 0x0E	; 14
    23be:	d0 e0       	ldi	r29, 0x00	; 0
    23c0:	dd cf       	rjmp	.-70     	; 0x237c <GetEvent+0xa4>

000023c2 <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    23c2:	df 92       	push	r13
    23c4:	ef 92       	push	r14
    23c6:	ff 92       	push	r15
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	7c 01       	movw	r14, r24
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    23d2:	00 91 63 02 	lds	r16, 0x0263	; 0x800263 <CDB>
    23d6:	10 91 64 02 	lds	r17, 0x0264	; 0x800264 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    23da:	c8 01       	movw	r24, r16
    23dc:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <osEE_check_disableint>
    23e0:	89 2b       	or	r24, r25
    23e2:	21 f5       	brne	.+72     	; 0x242c <ClearEvent+0x6a>
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    23e4:	d8 01       	movw	r26, r16
    23e6:	ed 91       	ld	r30, X+
    23e8:	fc 91       	ld	r31, X
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    23ea:	87 81       	ldd	r24, Z+7	; 0x07
    23ec:	90 85       	ldd	r25, Z+8	; 0x08
#else
    || (p_ccb->os_context > OSEE_TASK_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    23ee:	c2 e0       	ldi	r28, 0x02	; 2
    23f0:	d0 e0       	ldi	r29, 0x00	; 0
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    23f2:	82 30       	cpi	r24, 0x02	; 2
    23f4:	91 05       	cpc	r25, r1
    23f6:	e0 f4       	brcc	.+56     	; 0x2430 <ClearEvent+0x6e>
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    ev = E_OS_ACCESS;
    23f8:	c1 e0       	ldi	r28, 0x01	; 1
    23fa:	d0 e0       	ldi	r29, 0x00	; 0
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	c1 f4       	brne	.+48     	; 0x2430 <ClearEvent+0x6e>
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    2400:	04 80       	ldd	r0, Z+4	; 0x04
    2402:	f5 81       	ldd	r31, Z+5	; 0x05
    2404:	e0 2d       	mov	r30, r0
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* clear the event */
    p_curr_tcb->event_mask &= ~Mask;
    2406:	e0 94       	com	r14
    2408:	f0 94       	com	r15
    240a:	80 85       	ldd	r24, Z+8	; 0x08
    240c:	91 85       	ldd	r25, Z+9	; 0x09
    240e:	e8 22       	and	r14, r24
    2410:	f9 22       	and	r15, r25
    2412:	f1 86       	std	Z+9, r15	; 0x09
    2414:	e0 86       	std	Z+8, r14	; 0x08

    ev = E_OK;
    2416:	d0 e0       	ldi	r29, 0x00	; 0
    2418:	c0 e0       	ldi	r28, 0x00	; 0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
    241a:	ce 01       	movw	r24, r28
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	ff 90       	pop	r15
    2426:	ef 90       	pop	r14
    2428:	df 90       	pop	r13
    242a:	08 95       	ret
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    242c:	cc e0       	ldi	r28, 0x0C	; 12
    242e:	d0 e0       	ldi	r29, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    2430:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    2432:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    2434:	8e e1       	ldi	r24, 0x1E	; 30
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	f8 01       	movw	r30, r16
    243a:	96 87       	std	Z+14, r25	; 0x0e
    243c:	85 87       	std	Z+13, r24	; 0x0d
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    243e:	f0 8a       	std	Z+16, r15	; 0x10
    2440:	e7 86       	std	Z+15, r14	; 0x0f
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_set_service_id(p_ccb, OSServiceId_ClearEvent);
    param.num_param = Mask;
    osEE_set_api_param1(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    2442:	be 01       	movw	r22, r28
    2444:	c8 01       	movw	r24, r16
    2446:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    244a:	df be       	out	0x3f, r13	; 63
  }
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
    244c:	e6 cf       	rjmp	.-52     	; 0x241a <ClearEvent+0x58>

0000244e <osEE_get_service_id>:
#if (defined(OSEE_HAS_ORTI))
  return (OSServiceIdType)(
    ((OsEE_reg)osEE_get_curr_core()->p_ccb->service_id) & (~((OsEE_reg)0x1U))
  );
#else
  return osEE_get_curr_core()->p_ccb->service_id;
    244e:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <CDB>
    2452:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <CDB+0x1>
#endif /* OSEE_HAS_ORTI */
}
    2456:	85 85       	ldd	r24, Z+13	; 0x0d
    2458:	96 85       	ldd	r25, Z+14	; 0x0e
    245a:	08 95       	ret

0000245c <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	00 d0       	rcall	.+0      	; 0x2462 <osEE_scheduler_task_end+0x6>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
    2466:	ae 01       	movw	r20, r28
    2468:	4f 5f       	subi	r20, 0xFF	; 255
    246a:	5f 4f       	sbci	r21, 0xFF	; 255
    246c:	63 e6       	ldi	r22, 0x63	; 99
    246e:	72 e0       	ldi	r23, 0x02	; 2
    2470:	8d e4       	ldi	r24, 0x4D	; 77
    2472:	92 e0       	ldi	r25, 0x02	; 2
    2474:	0e 94 38 14 	call	0x2870	; 0x2870 <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    2478:	bc 01       	movw	r22, r24
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	08 95       	ret

0000248c <osEE_scheduler_task_wrapper_restore>:
)
{
#if (defined(OSEE_HAS_PRETASKHOOK)) || (defined(OSEE_SCHEDULER_GLOBAL)) ||\
    (defined(OSEE_HAS_CONTEXT)) || (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    248c:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <CDB>
    2490:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <CDB+0x1>

#endif /* OSEE_HAS_ORTI */
  /* Call PreTaskHook only if I'm scheduling a real TASK not an ISR2 or the
   * Idle TASK */
#if (defined(OSEE_HAS_PRETASKHOOK)) || (defined(OSEE_HAS_CONTEXT))
  if (p_tdb_to->task_type <= OSEE_TASK_TYPE_EXTENDED) {
    2494:	dc 01       	movw	r26, r24
    2496:	17 96       	adiw	r26, 0x07	; 7
    2498:	8d 91       	ld	r24, X+
    249a:	9c 91       	ld	r25, X
    249c:	82 30       	cpi	r24, 0x02	; 2
    249e:	91 05       	cpc	r25, r1
    24a0:	28 f4       	brcc	.+10     	; 0x24ac <osEE_scheduler_task_wrapper_restore+0x20>
      p_ccb->p_last_tdb_hook = p_tdb_to;
      osEE_call_pre_task_hook(p_ccb);
    }
#endif /* OSEE_HAS_PRETASKHOOK */
#if (defined(OSEE_HAS_CONTEXT))
    p_ccb->os_context = OSEE_TASK_CTX;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (defined(OSEE_HAS_CONTEXT))
  else if (p_tdb_to->task_type == OSEE_TASK_TYPE_ISR2) {
    p_ccb->os_context = OSEE_TASK_ISR2_CTX;
  } else {
    p_ccb->os_context = OSEE_IDLE_CTX;
    24a6:	96 8b       	std	Z+22, r25	; 0x16
    24a8:	85 8b       	std	Z+21, r24	; 0x15
    p_ccb->p_lock_to_be_released = NULL;
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
    24aa:	08 95       	ret
#if (defined(OSEE_HAS_CONTEXT))
    p_ccb->os_context = OSEE_TASK_CTX;
#endif /* OSEE_HAS_CONTEXT */
  }
#if (defined(OSEE_HAS_CONTEXT))
  else if (p_tdb_to->task_type == OSEE_TASK_TYPE_ISR2) {
    24ac:	82 30       	cpi	r24, 0x02	; 2
    24ae:	91 05       	cpc	r25, r1
    24b0:	d1 f3       	breq	.-12     	; 0x24a6 <osEE_scheduler_task_wrapper_restore+0x1a>
    p_ccb->os_context = OSEE_TASK_ISR2_CTX;
  } else {
    p_ccb->os_context = OSEE_IDLE_CTX;
    24b2:	8a e0       	ldi	r24, 0x0A	; 10
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	f7 cf       	rjmp	.-18     	; 0x24a6 <osEE_scheduler_task_wrapper_restore+0x1a>

000024b8 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    24b8:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
    24ba:	ec 81       	ldd	r30, Y+4	; 0x04
    24bc:	fd 81       	ldd	r31, Y+5	; 0x05
    24be:	11 81       	ldd	r17, Z+1	; 0x01
  osEE_scheduler_task_wrapper_restore(p_tdb_to);
    24c0:	0e 94 46 12 	call	0x248c	; 0x248c <osEE_scheduler_task_wrapper_restore>

  if (task_prio < OSEE_ISR_ALL_PRIO) {
    24c4:	1f 3f       	cpi	r17, 0xFF	; 255
    24c6:	09 f0       	breq	.+2      	; 0x24ca <osEE_scheduler_task_wrapper_run+0x12>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
    24c8:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
    24ca:	e9 85       	ldd	r30, Y+9	; 0x09
    24cc:	fa 85       	ldd	r31, Y+10	; 0x0a
    24ce:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    24d0:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    24d2:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
    24d4:	6e e2       	ldi	r22, 0x2E	; 46
    24d6:	72 e1       	ldi	r23, 0x12	; 18
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	9b 81       	ldd	r25, Y+3	; 0x03
    24dc:	0e 94 36 01 	call	0x26c	; 0x26c <osEE_hal_terminate_ctx>

000024e0 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    24e8:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    24ea:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
    24ec:	63 e6       	ldi	r22, 0x63	; 99
    24ee:	72 e0       	ldi	r23, 0x02	; 2
    24f0:	8d e4       	ldi	r24, 0x4D	; 77
    24f2:	92 e0       	ldi	r25, 0x02	; 2
    24f4:	0e 94 b5 14 	call	0x296a	; 0x296a <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    24f8:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    24fa:	00 91 63 02 	lds	r16, 0x0263	; 0x800263 <CDB>
    24fe:	10 91 64 02 	lds	r17, 0x0264	; 0x800264 <CDB+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    2502:	c0 91 65 02 	lds	r28, 0x0265	; 0x800265 <CDB+0x2>
    2506:	d0 91 66 02 	lds	r29, 0x0266	; 0x800266 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    250a:	f8 01       	movw	r30, r16
    250c:	80 85       	ldd	r24, Z+8	; 0x08
    250e:	91 85       	ldd	r25, Z+9	; 0x09
    2510:	82 30       	cpi	r24, 0x02	; 2
    2512:	91 05       	cpc	r25, r1
    2514:	51 f0       	breq	.+20     	; 0x252a <osEE_idle_hook_wrapper+0x4a>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    2516:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <CDB+0x4>
    251a:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <CDB+0x5>
}
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    2526:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    252a:	20 97       	sbiw	r28, 0x00	; 0
    252c:	89 f3       	breq	.-30     	; 0x2510 <osEE_idle_hook_wrapper+0x30>
      p_idle_hook();
    252e:	fe 01       	movw	r30, r28
    2530:	09 95       	icall
    2532:	eb cf       	rjmp	.-42     	; 0x250a <osEE_idle_hook_wrapper+0x2a>

00002534 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    253c:	ec 01       	movw	r28, r24
    253e:	a8 81       	ld	r26, Y
    2540:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    2542:	eb 01       	movw	r28, r22
    2544:	e8 81       	ld	r30, Y
    2546:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    2548:	16 96       	adiw	r26, 0x06	; 6
    254a:	cd 91       	ld	r28, X+
    254c:	dc 91       	ld	r29, X
    254e:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    2550:	20 97       	sbiw	r28, 0x00	; 0
    2552:	c1 f1       	breq	.+112    	; 0x25c4 <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    2558:	30 97       	sbiw	r30, 0x00	; 0
    255a:	09 f4       	brne	.+2      	; 0x255e <osEE_scheduler_core_rq_preempt_stk+0x2a>
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    255e:	ec 01       	movw	r28, r24
    2560:	0c 81       	ldd	r16, Y+4	; 0x04
    2562:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    2564:	22 81       	ldd	r18, Z+2	; 0x02
    2566:	33 81       	ldd	r19, Z+3	; 0x03
    2568:	e9 01       	movw	r28, r18
    256a:	4c 81       	ldd	r20, Y+4	; 0x04
    256c:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    256e:	e8 01       	movw	r28, r16
    2570:	39 81       	ldd	r19, Y+1	; 0x01
    2572:	ea 01       	movw	r28, r20
    2574:	29 81       	ldd	r18, Y+1	; 0x01
    2576:	32 17       	cp	r19, r18
    2578:	88 f5       	brcc	.+98     	; 0x25dc <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    257a:	22 e0       	ldi	r18, 0x02	; 2
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	e8 01       	movw	r28, r16
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    2580:	3b 83       	std	Y+3, r19	; 0x03
    2582:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    2584:	20 81       	ld	r18, Z
    2586:	31 81       	ldd	r19, Z+1	; 0x01
    2588:	eb 01       	movw	r28, r22
    258a:	39 83       	std	Y+1, r19	; 0x01
    258c:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    258e:	c2 81       	ldd	r28, Z+2	; 0x02
    2590:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    2592:	2c 81       	ldd	r18, Y+4	; 0x04
    2594:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    2596:	16 96       	adiw	r26, 0x06	; 6
    2598:	4d 91       	ld	r20, X+
    259a:	5c 91       	ld	r21, X
    259c:	17 97       	sbiw	r26, 0x07	; 7
    259e:	51 83       	std	Z+1, r21	; 0x01
    25a0:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    25a2:	17 96       	adiw	r26, 0x07	; 7
    25a4:	fc 93       	st	X, r31
    25a6:	ee 93       	st	-X, r30
    25a8:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    25aa:	cd 93       	st	X+, r28
    25ac:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    25ae:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    25b0:	f9 01       	movw	r30, r18
    25b2:	51 81       	ldd	r21, Z+1	; 0x01
    25b4:	54 17       	cp	r21, r20
    25b6:	08 f4       	brcc	.+2      	; 0x25ba <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
    25b8:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	1f 91       	pop	r17
    25c0:	0f 91       	pop	r16
    25c2:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    25c4:	30 97       	sbiw	r30, 0x00	; 0
    25c6:	51 f0       	breq	.+20     	; 0x25dc <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    25c8:	ec 01       	movw	r28, r24
    25ca:	8c 81       	ldd	r24, Y+4	; 0x04
    25cc:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    25ce:	ec 01       	movw	r28, r24
    25d0:	4c 81       	ldd	r20, Y+4	; 0x04
    25d2:	5d 81       	ldd	r21, Y+5	; 0x05
    25d4:	22 e0       	ldi	r18, 0x02	; 2
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	ea 01       	movw	r28, r20
    25da:	d2 cf       	rjmp	.-92     	; 0x2580 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	80 e0       	ldi	r24, 0x00	; 0
    p_ret_sn  = NULL;
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
    25e0:	ec cf       	rjmp	.-40     	; 0x25ba <osEE_scheduler_core_rq_preempt_stk+0x86>

000025e2 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    25e2:	cf 92       	push	r12
    25e4:	df 92       	push	r13
    25e6:	ef 92       	push	r14
    25e8:	ff 92       	push	r15
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    25f2:	eb 01       	movw	r28, r22
    25f4:	aa 81       	ldd	r26, Y+2	; 0x02
    25f6:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    25f8:	14 96       	adiw	r26, 0x04	; 4
    25fa:	ed 91       	ld	r30, X+
    25fc:	fc 91       	ld	r31, X
    25fe:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    2600:	41 15       	cp	r20, r1
    2602:	51 05       	cpc	r21, r1
    2604:	01 f1       	breq	.+64     	; 0x2646 <osEE_sn_priority_insert+0x64>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    2606:	22 81       	ldd	r18, Z+2	; 0x02
    2608:	33 81       	ldd	r19, Z+3	; 0x03
    260a:	22 30       	cpi	r18, 0x02	; 2
    260c:	31 05       	cpc	r19, r1
    260e:	d8 f0       	brcs	.+54     	; 0x2646 <osEE_sn_priority_insert+0x64>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    2610:	1b 96       	adiw	r26, 0x0b	; 11
    2612:	2c 91       	ld	r18, X
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    2614:	dc 01       	movw	r26, r24
    2616:	ed 91       	ld	r30, X+
    2618:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    261e:	30 97       	sbiw	r30, 0x00	; 0
    2620:	a1 f4       	brne	.+40     	; 0x264a <osEE_sn_priority_insert+0x68>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    2622:	10 97       	sbiw	r26, 0x00	; 0
    2624:	69 f1       	breq	.+90     	; 0x2680 <osEE_sn_priority_insert+0x9e>
    p_prev->p_next = p_sn_new;
    2626:	6d 93       	st	X+, r22
    2628:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
    262e:	eb 01       	movw	r28, r22
    2630:	f9 83       	std	Y+1, r31	; 0x01
    2632:	e8 83       	st	Y, r30

  return head_changed;
}
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	ff 90       	pop	r15
    263e:	ef 90       	pop	r14
    2640:	df 90       	pop	r13
    2642:	cf 90       	pop	r12
    2644:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    2646:	21 81       	ldd	r18, Z+1	; 0x01
    2648:	e5 cf       	rjmp	.-54     	; 0x2614 <osEE_sn_priority_insert+0x32>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    264a:	02 81       	ldd	r16, Z+2	; 0x02
    264c:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    264e:	e8 01       	movw	r28, r16
    2650:	cc 80       	ldd	r12, Y+4	; 0x04
    2652:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    2654:	41 15       	cp	r20, r1
    2656:	51 05       	cpc	r21, r1
    2658:	81 f0       	breq	.+32     	; 0x267a <osEE_sn_priority_insert+0x98>
    265a:	e6 01       	movw	r28, r12
    265c:	ea 80       	ldd	r14, Y+2	; 0x02
    265e:	fb 80       	ldd	r15, Y+3	; 0x03
    2660:	d2 e0       	ldi	r29, 0x02	; 2
    2662:	ed 16       	cp	r14, r29
    2664:	f1 04       	cpc	r15, r1
    2666:	48 f0       	brcs	.+18     	; 0x267a <osEE_sn_priority_insert+0x98>
      prio_to_check = p_cur_tdb->ready_prio;
    2668:	e8 01       	movw	r28, r16
    266a:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
    266c:	32 17       	cp	r19, r18
    266e:	c8 f2       	brcs	.-78     	; 0x2622 <osEE_sn_priority_insert+0x40>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    2670:	df 01       	movw	r26, r30
    2672:	01 90       	ld	r0, Z+
    2674:	f0 81       	ld	r31, Z
    2676:	e0 2d       	mov	r30, r0
    2678:	d2 cf       	rjmp	.-92     	; 0x261e <osEE_sn_priority_insert+0x3c>
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    267a:	e6 01       	movw	r28, r12
    267c:	39 81       	ldd	r19, Y+1	; 0x01
    267e:	f6 cf       	rjmp	.-20     	; 0x266c <osEE_sn_priority_insert+0x8a>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    2680:	dc 01       	movw	r26, r24
    2682:	6d 93       	st	X+, r22
    2684:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	d1 cf       	rjmp	.-94     	; 0x262e <osEE_sn_priority_insert+0x4c>

0000268c <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    268c:	fb 01       	movw	r30, r22
    268e:	53 83       	std	Z+3, r21	; 0x03
    2690:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <osEE_sn_priority_insert>

0000269a <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    269a:	ef 92       	push	r14
    269c:	ff 92       	push	r15
    269e:	0f 93       	push	r16
    26a0:	1f 93       	push	r17
    26a2:	cf 93       	push	r28
    26a4:	df 93       	push	r29
    26a6:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    26a8:	fc 01       	movw	r30, r24
    26aa:	c0 81       	ld	r28, Z
    26ac:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    26ae:	ee 80       	ldd	r14, Y+6	; 0x06
    26b0:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    26b2:	f7 01       	movw	r30, r14
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	9f 83       	std	Y+7, r25	; 0x07
    26ba:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    26bc:	c8 01       	movw	r24, r16
    26be:	0e 94 9a 12 	call	0x2534	; 0x2534 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    26c2:	89 2b       	or	r24, r25
    26c4:	41 f4       	brne	.+16     	; 0x26d6 <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    26c6:	ee 81       	ldd	r30, Y+6	; 0x06
    26c8:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    26ca:	30 97       	sbiw	r30, 0x00	; 0
    26cc:	61 f0       	breq	.+24     	; 0x26e6 <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
    26d2:	99 83       	std	Y+1, r25	; 0x01
    26d4:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    26d6:	c7 01       	movw	r24, r14
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	0f 91       	pop	r16
    26e0:	ff 90       	pop	r15
    26e2:	ef 90       	pop	r14
    26e4:	08 95       	ret
      if ( p_curr_stk_sn != NULL ) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    26e6:	f8 01       	movw	r30, r16
    26e8:	84 81       	ldd	r24, Z+4	; 0x04
    26ea:	95 81       	ldd	r25, Z+5	; 0x05
    26ec:	f2 cf       	rjmp	.-28     	; 0x26d2 <osEE_scheduler_core_pop_running+0x38>

000026ee <osEE_scheduler_task_activated>:
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act,
  CONST(OsEE_bool, AUTOMATIC)               is_preemption_point
)
{
    26ee:	cf 92       	push	r12
    26f0:	df 92       	push	r13
    26f2:	ef 92       	push	r14
    26f4:	ff 92       	push	r15
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act  = p_tdb_act->p_tcb;
    26fe:	da 01       	movw	r26, r20
    2700:	14 96       	adiw	r26, 0x04	; 4
    2702:	cd 91       	ld	r28, X+
    2704:	dc 91       	ld	r29, X
    2706:	15 97       	sbiw	r26, 0x05	; 5

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act)
    2708:	98 81       	ld	r25, Y
    270a:	1d 96       	adiw	r26, 0x0d	; 13
    270c:	8c 91       	ld	r24, X
    270e:	98 17       	cp	r25, r24
    2710:	08 f0       	brcs	.+2      	; 0x2714 <osEE_scheduler_task_activated+0x26>
    2712:	54 c0       	rjmp	.+168    	; 0x27bc <osEE_scheduler_task_activated+0xce>
  {
    CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
    2714:	db 01       	movw	r26, r22
    2716:	ed 91       	ld	r30, X+
    2718:	fc 91       	ld	r31, X
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
    271a:	00 81       	ld	r16, Z
    271c:	11 81       	ldd	r17, Z+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
    271e:	d8 01       	movw	r26, r16
    2720:	14 96       	adiw	r26, 0x04	; 4
    2722:	ed 90       	ld	r14, X+
    2724:	fc 90       	ld	r15, X

    ++p_tcb_act->current_num_of_act;
    2726:	9f 5f       	subi	r25, 0xFF	; 255
    2728:	98 83       	st	Y, r25
    272a:	c4 80       	ldd	r12, Z+4	; 0x04
    272c:	d5 80       	ldd	r13, Z+5	; 0x05
    272e:	d6 01       	movw	r26, r12
    2730:	6d 91       	ld	r22, X+
    2732:	7c 91       	ld	r23, X
        osEE_hal_signal_core(p_tdb_act->orig_core_id);
      }
    } else
#endif /* !OSEE_SINGLECORE */
    /* Preemption Check */
    if ((is_preemption_point) &&
    2734:	23 2b       	or	r18, r19
    2736:	69 f1       	breq	.+90     	; 0x2792 <osEE_scheduler_task_activated+0xa4>
    2738:	d7 01       	movw	r26, r14
    273a:	11 96       	adiw	r26, 0x01	; 1
    273c:	9c 91       	ld	r25, X
    273e:	11 97       	sbiw	r26, 0x01	; 1
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	98 17       	cp	r25, r24
    2744:	30 f5       	brcc	.+76     	; 0x2792 <osEE_scheduler_task_activated+0xa4>
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
  (*pp_fist)              = p_sn_allocated->p_next;
    2746:	75 83       	std	Z+5, r23	; 0x05
    2748:	64 83       	std	Z+4, r22	; 0x04

      /* Call PostTaskHook before switching active TASK */
      osEE_call_post_task_hook(p_ccb);

      /* Set Previous TASK status as Ready but stacked */
      p_curr_tcb->status = OSEE_TASK_READY_STACKED;
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	13 96       	adiw	r26, 0x03	; 3
    2750:	9c 93       	st	X, r25
    2752:	8e 93       	st	-X, r24
    2754:	12 97       	sbiw	r26, 0x02	; 2

      /* Set the activated TASK as current */
      p_new_stk->p_tdb            = p_tdb_act;
    2756:	d6 01       	movw	r26, r12
    2758:	13 96       	adiw	r26, 0x03	; 3
    275a:	5c 93       	st	X, r21
    275c:	4e 93       	st	-X, r20
    275e:	12 97       	sbiw	r26, 0x02	; 2
      p_new_stk->p_next           = p_ccb->p_stk_sn;
    2760:	86 81       	ldd	r24, Z+6	; 0x06
    2762:	97 81       	ldd	r25, Z+7	; 0x07
    2764:	8d 93       	st	X+, r24
    2766:	9c 93       	st	X, r25
      p_ccb->p_stk_sn             = p_new_stk;
    2768:	d7 82       	std	Z+7, r13	; 0x07
    276a:	c6 82       	std	Z+6, r12	; 0x06
      p_ccb->p_curr               = p_tdb_act;
    276c:	51 83       	std	Z+1, r21	; 0x01
    276e:	40 83       	st	Z, r20
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    2770:	19 86       	std	Y+9, r1	; 0x09
    2772:	18 86       	std	Y+8, r1	; 0x08
      osEE_unlock_core(p_cdb);

#if (defined(OSEE_HAS_EVENTS))
      osEE_event_reset_mask(p_tdb_act->p_tcb);
#endif /* OSEE_HAS_EVENTS */
      osEE_change_context_from_running(p_curr, p_tdb_act);
    2774:	ba 01       	movw	r22, r20
    2776:	c8 01       	movw	r24, r16
    2778:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <osEE_change_context_from_running>
    } else {
      /* Actually Insert the activated in READY Queue */
      osEE_scheduler_task_activated_insert_rq(p_cdb, p_ccb, p_tdb_act,
        p_tcb_act);
    }
    ev = E_OK;
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
  }
  return ev;
}
    2780:	df 91       	pop	r29
    2782:	cf 91       	pop	r28
    2784:	1f 91       	pop	r17
    2786:	0f 91       	pop	r16
    2788:	ff 90       	pop	r15
    278a:	ef 90       	pop	r14
    278c:	df 90       	pop	r13
    278e:	cf 90       	pop	r12
    2790:	08 95       	ret
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	9b 81       	ldd	r25, Y+3	; 0x03
    2796:	89 2b       	or	r24, r25
    2798:	31 f4       	brne	.+12     	; 0x27a6 <osEE_scheduler_task_activated+0xb8>
    p_tcb_act->status = OSEE_TASK_READY;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	9b 83       	std	Y+3, r25	; 0x03
    27a0:	8a 83       	std	Y+2, r24	; 0x02
    27a2:	19 86       	std	Y+9, r1	; 0x09
    27a4:	18 86       	std	Y+8, r1	; 0x08
    27a6:	75 83       	std	Z+5, r23	; 0x05
    27a8:	64 83       	std	Z+4, r22	; 0x04
  p_sn_allocated->p_next  = NULL;
    27aa:	d6 01       	movw	r26, r12
    27ac:	1d 92       	st	X+, r1
    27ae:	1c 92       	st	X, r1
    osEE_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    27b0:	b6 01       	movw	r22, r12
    27b2:	cf 01       	movw	r24, r30
    27b4:	02 96       	adiw	r24, 0x02	; 2
    27b6:	0e 94 46 13 	call	0x268c	; 0x268c <osEE_scheduler_rq_insert>
    27ba:	e0 cf       	rjmp	.-64     	; 0x277c <osEE_scheduler_task_activated+0x8e>
        p_tcb_act);
    }
    ev = E_OK;
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
    27bc:	84 e0       	ldi	r24, 0x04	; 4
    27be:	90 e0       	ldi	r25, 0x00	; 0
  }
  return ev;
    27c0:	df cf       	rjmp	.-66     	; 0x2780 <osEE_scheduler_task_activated+0x92>

000027c2 <osEE_scheduler_task_block_current>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_SN *,  AUTOMATIC, OS_APPL_DATA)  p_sn_blocked
)
{
    27c2:	ef 92       	push	r14
    27c4:	ff 92       	push	r15
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	cb 01       	movw	r24, r22
    27d0:	7a 01       	movw	r14, r20
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    27d2:	db 01       	movw	r26, r22
    27d4:	cd 91       	ld	r28, X+
    27d6:	dc 91       	ld	r29, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_blocked = p_ccb->p_curr;
    27d8:	fe 01       	movw	r30, r28
    27da:	01 91       	ld	r16, Z+
    27dc:	11 91       	ld	r17, Z+
    27de:	bf 01       	movw	r22, r30

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  (*p_sn_blocked) = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    27e0:	0e 94 4d 13 	call	0x269a	; 0x269a <osEE_scheduler_core_pop_running>
    27e4:	d7 01       	movw	r26, r14
    27e6:	8d 93       	st	X+, r24
    27e8:	9c 93       	st	X, r25

  p_tdb_blocked->p_tcb->status = OSEE_TASK_WAITING;
    27ea:	d8 01       	movw	r26, r16
    27ec:	14 96       	adiw	r26, 0x04	; 4
    27ee:	ed 91       	ld	r30, X+
    27f0:	fc 91       	ld	r31, X
    27f2:	83 e0       	ldi	r24, 0x03	; 3
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	93 83       	std	Z+3, r25	; 0x03
    27f8:	82 83       	std	Z+2, r24	; 0x02

  osEE_unlock_core(p_cdb);

  return p_ccb->p_curr;
}
    27fa:	88 81       	ld	r24, Y
    27fc:	99 81       	ldd	r25, Y+1	; 0x01
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	1f 91       	pop	r17
    2804:	0f 91       	pop	r16
    2806:	ff 90       	pop	r15
    2808:	ef 90       	pop	r14
    280a:	08 95       	ret

0000280c <osEE_scheduler_task_unblocked>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	fa 01       	movw	r30, r20
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
    2816:	db 01       	movw	r26, r22
    2818:	0d 91       	ld	r16, X+
    281a:	1c 91       	ld	r17, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
    281c:	42 81       	ldd	r20, Z+2	; 0x02
    281e:	53 81       	ldd	r21, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
    2820:	da 01       	movw	r26, r20
    2822:	14 96       	adiw	r26, 0x04	; 4
    2824:	cd 91       	ld	r28, X+
    2826:	dc 91       	ld	r29, X
    2828:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	9b 83       	std	Y+3, r25	; 0x03
    2830:	8a 83       	std	Y+2, r24	; 0x02
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
    2832:	1b 96       	adiw	r26, 0x0b	; 11
    2834:	8c 91       	ld	r24, X
    2836:	89 83       	std	Y+1, r24	; 0x01

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    2838:	bf 01       	movw	r22, r30
    283a:	c8 01       	movw	r24, r16
    283c:	02 96       	adiw	r24, 0x02	; 2
    283e:	0e 94 46 13 	call	0x268c	; 0x268c <osEE_scheduler_rq_insert>
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	91 f4       	brne	.+36     	; 0x286a <osEE_scheduler_task_unblocked+0x5e>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
    2846:	d8 01       	movw	r26, r16
    2848:	ed 91       	ld	r30, X+
    284a:	fc 91       	ld	r31, X
    284c:	04 80       	ldd	r0, Z+4	; 0x04
    284e:	f5 81       	ldd	r31, Z+5	; 0x05
    2850:	e0 2d       	mov	r30, r0

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    is_preemption = (p_tcb_released->current_prio >
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	39 81       	ldd	r19, Y+1	; 0x01
    2858:	21 81       	ldd	r18, Z+1	; 0x01
    285a:	23 17       	cp	r18, r19
    285c:	08 f0       	brcs	.+2      	; 0x2860 <osEE_scheduler_task_unblocked+0x54>
    285e:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	1f 91       	pop	r17
    2866:	0f 91       	pop	r16
    2868:	08 95       	ret
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
    286e:	f8 cf       	rjmp	.-16     	; 0x2860 <osEE_scheduler_task_unblocked+0x54>

00002870 <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    2870:	af 92       	push	r10
    2872:	bf 92       	push	r11
    2874:	cf 92       	push	r12
    2876:	df 92       	push	r13
    2878:	ef 92       	push	r14
    287a:	ff 92       	push	r15
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
    2884:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    2886:	db 01       	movw	r26, r22
    2888:	cd 91       	ld	r28, X+
    288a:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    288c:	fe 01       	movw	r30, r28
    288e:	01 91       	ld	r16, Z+
    2890:	11 91       	ld	r17, Z+
    2892:	6f 01       	movw	r12, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    2894:	d8 01       	movw	r26, r16
    2896:	14 96       	adiw	r26, 0x04	; 4
    2898:	ed 90       	ld	r14, X+
    289a:	fc 90       	ld	r15, X

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    289c:	fa 01       	movw	r30, r20
    289e:	11 83       	std	Z+1, r17	; 0x01
    28a0:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    28a2:	d7 01       	movw	r26, r14
    28a4:	12 96       	adiw	r26, 0x02	; 2
    28a6:	8d 91       	ld	r24, X+
    28a8:	9c 91       	ld	r25, X
    28aa:	04 97       	sbiw	r24, 0x04	; 4
    28ac:	a9 f5       	brne	.+106    	; 0x2918 <osEE_scheduler_task_terminated+0xa8>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    28ae:	b6 01       	movw	r22, r12
    28b0:	c5 01       	movw	r24, r10
    28b2:	0e 94 4d 13 	call	0x269a	; 0x269a <osEE_scheduler_core_pop_running>
    28b6:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    28b8:	88 81       	ld	r24, Y
    28ba:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    28bc:	08 17       	cp	r16, r24
    28be:	19 07       	cpc	r17, r25
    28c0:	31 f1       	breq	.+76     	; 0x290e <osEE_scheduler_task_terminated+0x9e>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    28c2:	d8 01       	movw	r26, r16
    28c4:	14 96       	adiw	r26, 0x04	; 4
    28c6:	ed 91       	ld	r30, X+
    28c8:	fc 91       	ld	r31, X
    28ca:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    28cc:	1b 96       	adiw	r26, 0x0b	; 11
    28ce:	2c 91       	ld	r18, X
    28d0:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    28d2:	20 81       	ld	r18, Z
    28d4:	21 50       	subi	r18, 0x01	; 1
    28d6:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    28d8:	21 11       	cpse	r18, r1
    28da:	14 c0       	rjmp	.+40     	; 0x2904 <osEE_scheduler_task_terminated+0x94>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    28dc:	13 82       	std	Z+3, r1	; 0x03
    28de:	12 82       	std	Z+2, r1	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    28e0:	2c 81       	ldd	r18, Y+4	; 0x04
    28e2:	3d 81       	ldd	r19, Y+5	; 0x05
    28e4:	da 01       	movw	r26, r20
    28e6:	2d 93       	st	X+, r18
    28e8:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    28ea:	5d 83       	std	Y+5, r21	; 0x05
    28ec:	4c 83       	std	Y+4, r20	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	ff 90       	pop	r15
    28f8:	ef 90       	pop	r14
    28fa:	df 90       	pop	r13
    28fc:	cf 90       	pop	r12
    28fe:	bf 90       	pop	r11
    2900:	af 90       	pop	r10
    2902:	08 95       	ret
  } else {
    p_tcb->status = OSEE_TASK_READY;
    2904:	21 e0       	ldi	r18, 0x01	; 1
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	33 83       	std	Z+3, r19	; 0x03
    290a:	22 83       	std	Z+2, r18	; 0x02
    290c:	e9 cf       	rjmp	.-46     	; 0x28e0 <osEE_scheduler_task_terminated+0x70>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    290e:	f7 01       	movw	r30, r14
    2910:	20 81       	ld	r18, Z
    2912:	21 50       	subi	r18, 0x01	; 1
    2914:	20 83       	st	Z, r18
    2916:	e4 cf       	rjmp	.-56     	; 0x28e0 <osEE_scheduler_task_terminated+0x70>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    2918:	6e 81       	ldd	r22, Y+6	; 0x06
    291a:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    291c:	fb 01       	movw	r30, r22
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	9f 83       	std	Y+7, r25	; 0x07
    2924:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    2926:	d8 01       	movw	r26, r16
    2928:	1b 96       	adiw	r26, 0x0b	; 11
    292a:	8c 91       	ld	r24, X
    292c:	f7 01       	movw	r30, r14
    292e:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	93 83       	std	Z+3, r25	; 0x03
    2936:	82 83       	std	Z+2, r24	; 0x02
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transiction from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
    2938:	80 81       	ld	r24, Z
    293a:	81 30       	cpi	r24, 0x01	; 1
    293c:	11 f4       	brne	.+4      	; 0x2942 <osEE_scheduler_task_terminated+0xd2>
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    293e:	11 86       	std	Z+9, r1	; 0x09
    2940:	10 86       	std	Z+8, r1	; 0x08
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    2942:	a8 01       	movw	r20, r16
    2944:	c6 01       	movw	r24, r12
    2946:	0e 94 46 13 	call	0x268c	; 0x268c <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    294a:	b6 01       	movw	r22, r12
    294c:	c5 01       	movw	r24, r10
    294e:	0e 94 9a 12 	call	0x2534	; 0x2534 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    2952:	89 2b       	or	r24, r25
    2954:	39 f4       	brne	.+14     	; 0x2964 <osEE_scheduler_task_terminated+0xf4>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    2956:	ee 81       	ldd	r30, Y+6	; 0x06
    2958:	ff 81       	ldd	r31, Y+7	; 0x07
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    295e:	99 83       	std	Y+1, r25	; 0x01
    2960:	88 83       	st	Y, r24
    2962:	c5 cf       	rjmp	.-118    	; 0x28ee <osEE_scheduler_task_terminated+0x7e>
        } else {
          p_tdb_to = p_ccb->p_curr;
    2964:	88 81       	ld	r24, Y
    2966:	99 81       	ldd	r25, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    2968:	c2 cf       	rjmp	.-124    	; 0x28ee <osEE_scheduler_task_terminated+0x7e>

0000296a <osEE_scheduler_task_preemption_point>:
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb
)
{
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	cb 01       	movw	r24, r22
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    2970:	fb 01       	movw	r30, r22
    2972:	c0 81       	ld	r28, Z
    2974:	d1 81       	ldd	r29, Z+1	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    2976:	be 01       	movw	r22, r28
    2978:	6e 5f       	subi	r22, 0xFE	; 254
    297a:	7f 4f       	sbci	r23, 0xFF	; 255
    297c:	0e 94 9a 12 	call	0x2534	; 0x2534 <osEE_scheduler_core_rq_preempt_stk>

  if (p_prev != NULL) {
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	49 f0       	breq	.+18     	; 0x2996 <osEE_scheduler_task_preemption_point+0x2c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_prev, p_curr);
    2984:	68 81       	ld	r22, Y
    2986:	79 81       	ldd	r23, Y+1	; 0x01
    2988:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
  }
  return is_preemption;
}
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	08 95       	ret
    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	80 e0       	ldi	r24, 0x00	; 0
  }
  return is_preemption;
    299a:	fa cf       	rjmp	.-12     	; 0x2990 <osEE_scheduler_task_preemption_point+0x26>

0000299c <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb
)
{
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb  = p_cdb->p_ccb;
    29a0:	db 01       	movw	r26, r22
    29a2:	ed 91       	ld	r30, X+
    29a4:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
    29a6:	80 81       	ld	r24, Z
    29a8:	91 81       	ldd	r25, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
    29aa:	26 81       	ldd	r18, Z+6	; 0x06
    29ac:	37 81       	ldd	r19, Z+7	; 0x07

  p_preempted->p_tcb->status    = OSEE_TASK_READY_STACKED;
    29ae:	ec 01       	movw	r28, r24
    29b0:	ac 81       	ldd	r26, Y+4	; 0x04
    29b2:	bd 81       	ldd	r27, Y+5	; 0x05
    29b4:	62 e0       	ldi	r22, 0x02	; 2
    29b6:	70 e0       	ldi	r23, 0x00	; 0
    29b8:	13 96       	adiw	r26, 0x03	; 3
    29ba:	7c 93       	st	X, r23
    29bc:	6e 93       	st	-X, r22
    29be:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_curr                 = p_tdb;
    29c0:	51 83       	std	Z+1, r21	; 0x01
    29c2:	40 83       	st	Z, r20
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    29c4:	a4 81       	ldd	r26, Z+4	; 0x04
    29c6:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    29c8:	6d 91       	ld	r22, X+
    29ca:	7c 91       	ld	r23, X
    29cc:	11 97       	sbiw	r26, 0x01	; 1
    29ce:	75 83       	std	Z+5, r23	; 0x05
    29d0:	64 83       	std	Z+4, r22	; 0x04

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  /* Alloc the SN for the new Running TASK */
  p_ccb->p_stk_sn               = osEE_sn_alloc(&p_ccb->p_free_sn);
    29d2:	b7 83       	std	Z+7, r27	; 0x07
    29d4:	a6 83       	std	Z+6, r26	; 0x06
  osEE_unlock_core(p_cdb);

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
    29d6:	13 96       	adiw	r26, 0x03	; 3
    29d8:	5c 93       	st	X, r21
    29da:	4e 93       	st	-X, r20
    29dc:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
    29de:	2d 93       	st	X+, r18
    29e0:	3c 93       	st	X, r19

  osEE_change_context_from_running(p_preempted, p_tdb);
    29e2:	ba 01       	movw	r22, r20
}
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;

  osEE_change_context_from_running(p_preempted, p_tdb);
    29e8:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <osEE_change_context_from_running>

000029ec <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
    29ec:	db 01       	movw	r26, r22
    29ee:	ed 91       	ld	r30, X+
    29f0:	fc 91       	ld	r31, X
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    29f2:	a4 81       	ldd	r26, Z+4	; 0x04
    29f4:	b5 81       	ldd	r27, Z+5	; 0x05
    29f6:	ab 2b       	or	r26, r27
    29f8:	39 f4       	brne	.+14     	; 0x2a08 <osEE_alarm_set_rel+0x1c>
    ev = E_OS_STATE;
  } else {
    p_alarm_cb->cycle = cycle;
    29fa:	37 83       	std	Z+7, r19	; 0x07
    29fc:	26 83       	std	Z+6, r18	; 0x06

    osEE_counter_insert_rel_trigger(
    29fe:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <osEE_counter_insert_rel_trigger>
      p_counter_db, p_trigger_db, increment
    );
    ev = E_OK;
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	08 95       	ret
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    ev = E_OS_STATE;
    2a08:	87 e0       	ldi	r24, 0x07	; 7
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
    2a0c:	08 95       	ret

00002a0e <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    2a0e:	f8 94       	cli
    2a10:	ff cf       	rjmp	.-2      	; 0x2a10 <__vector_default+0x2>

00002a12 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    2a12:	ee e0       	ldi	r30, 0x0E	; 14
}
    2a14:	08 95       	ret

00002a16 <__vector_11>:
OSEE_AVR8_ISR_NOT_DEFINED(TIMER1_CAPT_vect)
#endif /* OSEE_AVR8_TIMER1_CAPT_ISR */

/* TIMER1_COMPA interrupt vector */
#if (defined(OSEE_AVR8_TIMER1_COMPA_ISR_TID)) && (OSEE_AVR8_TIMER1_COMPA_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(TIMER1_COMPA_vect, OSEE_AVR8_TIMER1_COMPA_ISR_TID)
    2a16:	8f 93       	push	r24
    2a18:	9f 93       	push	r25
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <osEE_avr8_isr2_stub>
    2a20:	9f 91       	pop	r25
    2a22:	8f 91       	pop	r24
    2a24:	18 95       	reti

00002a26 <osEE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void OSEE_COMPILER_KEEP OSEE_NAKED osEE_avr8_isr2_stub(TaskType t)
{

  OSEE_AVR8_ISR_PREINSTUB();
    2a26:	1f 92       	push	r1
    2a28:	0f 92       	push	r0
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	0f 92       	push	r0
    2a2e:	11 24       	eor	r1, r1
    2a30:	2f 93       	push	r18
    2a32:	3f 93       	push	r19
    2a34:	4f 93       	push	r20
    2a36:	5f 93       	push	r21
    2a38:	6f 93       	push	r22
    2a3a:	7f 93       	push	r23
    2a3c:	af 93       	push	r26
    2a3e:	bf 93       	push	r27
    2a40:	ef 93       	push	r30
    2a42:	ff 93       	push	r31
{
  VAR(StatusType, AUTOMATIC) ret_val  = E_OK;
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
    2a44:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <KDB+0x2>
    2a48:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <KDB+0x3>
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	88 0f       	add	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	e8 0f       	add	r30, r24
    2a54:	f9 1f       	adc	r31, r25
    2a56:	40 81       	ld	r20, Z
    2a58:	51 81       	ldd	r21, Z+1	; 0x01

  /* Mark the TASK as Activated */
  ++p_act_tdb->p_tcb->current_num_of_act;
    2a5a:	da 01       	movw	r26, r20
    2a5c:	14 96       	adiw	r26, 0x04	; 4
    2a5e:	ed 91       	ld	r30, X+
    2a60:	fc 91       	ld	r31, X
    2a62:	80 81       	ld	r24, Z
    2a64:	8f 5f       	subi	r24, 0xFF	; 255
    2a66:	80 83       	st	Z, r24

  osEE_scheduler_task_set_running(p_kdb, p_cdb, p_act_tdb);
    2a68:	63 e6       	ldi	r22, 0x63	; 99
    2a6a:	72 e0       	ldi	r23, 0x02	; 2
    2a6c:	8d e4       	ldi	r24, 0x4D	; 77
    2a6e:	92 e0       	ldi	r25, 0x02	; 2
    2a70:	0e 94 ce 14 	call	0x299c	; 0x299c <osEE_scheduler_task_set_running>
#endif /* __ATXMEGA__ */

  /* Activate ISR2 */
  osEE_activate_isr2(t);

  OSEE_AVR8_ISR_POSTINSTUB();
    2a74:	ff 91       	pop	r31
    2a76:	ef 91       	pop	r30
    2a78:	bf 91       	pop	r27
    2a7a:	af 91       	pop	r26
    2a7c:	7f 91       	pop	r23
    2a7e:	6f 91       	pop	r22
    2a80:	5f 91       	pop	r21
    2a82:	4f 91       	pop	r20
    2a84:	3f 91       	pop	r19
    2a86:	2f 91       	pop	r18
    2a88:	0f 90       	pop	r0
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	0f 90       	pop	r0
    2a8e:	1f 90       	pop	r1

  OSEE_RETURN();
    2a90:	08 95       	ret

00002a92 <osEE_avr8_system_timer_init>:

#if (defined(OSEE_SYSTEM_TIMER_DEVICE))
#if (OSEE_SYSTEM_TIMER_DEVICE == OSEE_AVR8_TIMER1_COMPA)

void osEE_avr8_system_timer_init(void) {
  OsEE_atmega_startTimer1(OSTICKDURATION / OSEE_KILO);
    2a92:	68 ee       	ldi	r22, 0xE8	; 232
    2a94:	73 e0       	ldi	r23, 0x03	; 3
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <OsEE_atmega_startTimer1>

00002a9e <osEE_avr8_system_timer_handler>:
}

ISR2(osEE_avr8_system_timer_handler) {
  OsEE_CDB * p_cdb = osEE_get_curr_core();
  osEE_counter_increment(p_cdb->p_sys_counter_db);
    2a9e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <CDB+0x6>
    2aa2:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <CDB+0x7>
    2aa6:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <osEE_counter_increment>

00002aaa <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    2aaa:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    2aac:	a4 81       	ldd	r26, Z+4	; 0x04
    2aae:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    2ab0:	12 96       	adiw	r26, 0x02	; 2
    2ab2:	2d 91       	ld	r18, X+
    2ab4:	3c 91       	ld	r19, X
    2ab6:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    2ab8:	44 e0       	ldi	r20, 0x04	; 4
    2aba:	50 e0       	ldi	r21, 0x00	; 0
    2abc:	13 96       	adiw	r26, 0x03	; 3
    2abe:	5c 93       	st	X, r21
    2ac0:	4e 93       	st	-X, r20
    2ac2:	12 97       	sbiw	r26, 0x02	; 2
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	12 96       	adiw	r26, 0x02	; 2
    2ac8:	4d 91       	ld	r20, X+
    2aca:	5c 91       	ld	r21, X
    2acc:	62 81       	ldd	r22, Z+2	; 0x02
    2ace:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    2ad0:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    2ad2:	22 30       	cpi	r18, 0x02	; 2
    2ad4:	31 05       	cpc	r19, r1
    2ad6:	11 f4       	brne	.+4      	; 0x2adc <osEE_change_context_from_running+0x32>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    2ad8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    2adc:	0c 94 16 01 	jmp	0x22c	; 0x22c <osEE_hal_save_ctx_and_ready2stacked>

00002ae0 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    2ae0:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    2ae2:	db 01       	movw	r26, r22
    2ae4:	14 96       	adiw	r26, 0x04	; 4
    2ae6:	ed 91       	ld	r30, X+
    2ae8:	fc 91       	ld	r31, X
    2aea:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    2aec:	22 81       	ldd	r18, Z+2	; 0x02
    2aee:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    2af0:	44 e0       	ldi	r20, 0x04	; 4
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	53 83       	std	Z+3, r21	; 0x03
    2af6:	42 83       	std	Z+2, r20	; 0x02
    2af8:	12 96       	adiw	r26, 0x02	; 2
    2afa:	6d 91       	ld	r22, X+
    2afc:	7c 91       	ld	r23, X

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    2afe:	22 30       	cpi	r18, 0x02	; 2
    2b00:	31 05       	cpc	r19, r1
    2b02:	11 f4       	brne	.+4      	; 0x2b08 <osEE_change_context_from_task_end+0x28>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    2b04:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    2b08:	0c 94 0e 01 	jmp	0x21c	; 0x21c <osEE_hal_ready2stacked>

00002b0c <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	12 96       	adiw	r26, 0x02	; 2
    2b10:	6d 91       	ld	r22, X+
    2b12:	7c 91       	ld	r23, X
    2b14:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    2b16:	ed 91       	ld	r30, X+
    2b18:	fc 91       	ld	r31, X
    2b1a:	40 81       	ld	r20, Z
    2b1c:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    2b1e:	db 01       	movw	r26, r22
    2b20:	ed 91       	ld	r30, X+
    2b22:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    2b24:	22 89       	ldd	r18, Z+18	; 0x12
    2b26:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    2b28:	21 15       	cp	r18, r1
    2b2a:	31 05       	cpc	r19, r1
    2b2c:	19 f0       	breq	.+6      	; 0x2b34 <osEE_idle_task_terminate+0x28>
    2b2e:	42 17       	cp	r20, r18
    2b30:	53 07       	cpc	r21, r19
    2b32:	29 f4       	brne	.+10     	; 0x2b3e <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    2b34:	db 01       	movw	r26, r22
    2b36:	ed 93       	st	X+, r30
    2b38:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    2b3a:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>
    2b3e:	f9 01       	movw	r30, r18
    2b40:	f1 cf       	rjmp	.-30     	; 0x2b24 <osEE_idle_task_terminate+0x18>

00002b42 <osEE_counter_insert_abs_trigger>:
    }
  }

  /* Turn Off the Trigger */
  p_trigger_cb->active = OSEE_FALSE;
}
    2b42:	ef 92       	push	r14
    2b44:	ff 92       	push	r15
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	dc 01       	movw	r26, r24
    2b50:	8d 91       	ld	r24, X+
    2b52:	9c 91       	ld	r25, X
    2b54:	dc 01       	movw	r26, r24
    2b56:	ed 91       	ld	r30, X+
    2b58:	fc 91       	ld	r31, X
    2b5a:	11 97       	sbiw	r26, 0x01	; 1
    2b5c:	12 96       	adiw	r26, 0x02	; 2
    2b5e:	0d 91       	ld	r16, X+
    2b60:	1c 91       	ld	r17, X
    2b62:	db 01       	movw	r26, r22
    2b64:	cd 91       	ld	r28, X+
    2b66:	dc 91       	ld	r29, X
    2b68:	21 e0       	ldi	r18, 0x01	; 1
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	3d 83       	std	Y+5, r19	; 0x05
    2b6e:	2c 83       	std	Y+4, r18	; 0x04
    2b70:	5b 83       	std	Y+3, r21	; 0x03
    2b72:	4a 83       	std	Y+2, r20	; 0x02
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 97       	sbiw	r30, 0x00	; 0
    2b7a:	e1 f0       	breq	.+56     	; 0x2bb4 <osEE_counter_insert_abs_trigger+0x72>
    2b7c:	a0 81       	ld	r26, Z
    2b7e:	b1 81       	ldd	r27, Z+1	; 0x01
    2b80:	12 96       	adiw	r26, 0x02	; 2
    2b82:	ed 90       	ld	r14, X+
    2b84:	fc 90       	ld	r15, X
    2b86:	13 97       	sbiw	r26, 0x03	; 3
    2b88:	0e 15       	cp	r16, r14
    2b8a:	1f 05       	cpc	r17, r15
    2b8c:	68 f4       	brcc	.+26     	; 0x2ba8 <osEE_counter_insert_abs_trigger+0x66>
    2b8e:	4e 15       	cp	r20, r14
    2b90:	5f 05       	cpc	r21, r15
    2b92:	18 f4       	brcc	.+6      	; 0x2b9a <osEE_counter_insert_abs_trigger+0x58>
    2b94:	04 17       	cp	r16, r20
    2b96:	15 07       	cpc	r17, r21
    2b98:	68 f0       	brcs	.+26     	; 0x2bb4 <osEE_counter_insert_abs_trigger+0x72>
    2b9a:	fc 90       	ld	r15, X
    2b9c:	11 96       	adiw	r26, 0x01	; 1
    2b9e:	ac 91       	ld	r26, X
    2ba0:	9f 01       	movw	r18, r30
    2ba2:	ef 2d       	mov	r30, r15
    2ba4:	fa 2f       	mov	r31, r26
    2ba6:	e8 cf       	rjmp	.-48     	; 0x2b78 <osEE_counter_insert_abs_trigger+0x36>
    2ba8:	04 17       	cp	r16, r20
    2baa:	15 07       	cpc	r17, r21
    2bac:	18 f0       	brcs	.+6      	; 0x2bb4 <osEE_counter_insert_abs_trigger+0x72>
    2bae:	4e 15       	cp	r20, r14
    2bb0:	5f 05       	cpc	r21, r15
    2bb2:	98 f7       	brcc	.-26     	; 0x2b9a <osEE_counter_insert_abs_trigger+0x58>
    2bb4:	21 15       	cp	r18, r1
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	19 f0       	breq	.+6      	; 0x2bc0 <osEE_counter_insert_abs_trigger+0x7e>
    2bba:	d9 01       	movw	r26, r18
    2bbc:	8d 91       	ld	r24, X+
    2bbe:	9c 91       	ld	r25, X
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	6d 93       	st	X+, r22
    2bc4:	7c 93       	st	X, r23
    2bc6:	f9 83       	std	Y+1, r31	; 0x01
    2bc8:	e8 83       	st	Y, r30
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	ff 90       	pop	r15
    2bd4:	ef 90       	pop	r14
    2bd6:	08 95       	ret

00002bd8 <osEE_counter_insert_rel_trigger>:
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	dc 01       	movw	r26, r24
    2bde:	12 96       	adiw	r26, 0x02	; 2
    2be0:	ed 91       	ld	r30, X+
    2be2:	fc 91       	ld	r31, X
    2be4:	13 97       	sbiw	r26, 0x03	; 3
    2be6:	0d 90       	ld	r0, X+
    2be8:	bc 91       	ld	r27, X
    2bea:	a0 2d       	mov	r26, r0
    2bec:	12 96       	adiw	r26, 0x02	; 2
    2bee:	2d 91       	ld	r18, X+
    2bf0:	3c 91       	ld	r19, X
    2bf2:	df 01       	movw	r26, r30
    2bf4:	a4 1b       	sub	r26, r20
    2bf6:	b5 0b       	sbc	r27, r21
    2bf8:	a2 17       	cp	r26, r18
    2bfa:	b3 07       	cpc	r27, r19
    2bfc:	30 f0       	brcs	.+12     	; 0x2c0a <osEE_counter_insert_rel_trigger+0x32>
    2bfe:	42 0f       	add	r20, r18
    2c00:	53 1f       	adc	r21, r19
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <osEE_counter_insert_abs_trigger>
    2c0a:	41 50       	subi	r20, 0x01	; 1
    2c0c:	51 09       	sbc	r21, r1
    2c0e:	42 0f       	add	r20, r18
    2c10:	53 1f       	adc	r21, r19
    2c12:	4e 1b       	sub	r20, r30
    2c14:	5f 0b       	sbc	r21, r31
    2c16:	f5 cf       	rjmp	.-22     	; 0x2c02 <osEE_counter_insert_rel_trigger+0x2a>

00002c18 <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
    2c18:	2f 92       	push	r2
    2c1a:	3f 92       	push	r3
    2c1c:	4f 92       	push	r4
    2c1e:	5f 92       	push	r5
    2c20:	6f 92       	push	r6
    2c22:	7f 92       	push	r7
    2c24:	8f 92       	push	r8
    2c26:	9f 92       	push	r9
    2c28:	af 92       	push	r10
    2c2a:	bf 92       	push	r11
    2c2c:	cf 92       	push	r12
    2c2e:	df 92       	push	r13
    2c30:	ef 92       	push	r14
    2c32:	ff 92       	push	r15
    2c34:	0f 93       	push	r16
    2c36:	1f 93       	push	r17
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	00 d0       	rcall	.+0      	; 0x2c3e <osEE_counter_increment+0x26>
    2c3e:	00 d0       	rcall	.+0      	; 0x2c40 <osEE_counter_increment+0x28>
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
    2c44:	dc 01       	movw	r26, r24
    2c46:	0d 91       	ld	r16, X+
    2c48:	1c 91       	ld	r17, X
    2c4a:	11 97       	sbiw	r26, 0x01	; 1
       This because is more efficient to read SFR than mamory. */
    CONST(CoreIdType, AUTOMATIC) counter_core_id = osEE_get_curr_core_id();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	22 81       	ldd	r18, Z+2	; 0x02
    2c50:	33 81       	ldd	r19, Z+3	; 0x03
    2c52:	12 96       	adiw	r26, 0x02	; 2
    2c54:	4d 91       	ld	r20, X+
    2c56:	5c 91       	ld	r21, X
    2c58:	24 17       	cp	r18, r20
    2c5a:	35 07       	cpc	r19, r21
    2c5c:	08 f4       	brcc	.+2      	; 0x2c60 <osEE_counter_increment+0x48>
    2c5e:	5a c0       	rjmp	.+180    	; 0x2d14 <osEE_counter_increment+0xfc>
      counter_value = (p_counter_cb->value = 0U);
    2c60:	13 82       	std	Z+3, r1	; 0x03
    2c62:	12 82       	std	Z+2, r1	; 0x02
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	20 e0       	ldi	r18, 0x00	; 0
            the counters, whenever the locks are not limited resources for the
            HW and falling back to use core locks only for those architectures
            where this is not true. TBD. */
    osEE_lock_core_id(counter_core_id);

    p_triggered_db = p_counter_cb->trigger_queue;
    2c68:	f8 01       	movw	r30, r16
    2c6a:	01 90       	ld	r0, Z+
    2c6c:	f0 81       	ld	r31, Z
    2c6e:	e0 2d       	mov	r30, r0
    2c70:	fc 83       	std	Y+4, r31	; 0x04
    2c72:	eb 83       	std	Y+3, r30	; 0x03

    if (p_triggered_db != NULL) {
    2c74:	30 97       	sbiw	r30, 0x00	; 0
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <osEE_counter_increment+0x62>
    2c78:	91 c0       	rjmp	.+290    	; 0x2d9c <osEE_counter_increment+0x184>
      P2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
    2c7a:	01 90       	ld	r0, Z+
    2c7c:	f0 81       	ld	r31, Z
    2c7e:	e0 2d       	mov	r30, r0
    2c80:	42 81       	ldd	r20, Z+2	; 0x02
    2c82:	53 81       	ldd	r21, Z+3	; 0x03
    2c84:	42 17       	cp	r20, r18
    2c86:	53 07       	cpc	r21, r19
    2c88:	09 f0       	breq	.+2      	; 0x2c8c <osEE_counter_increment+0x74>
    2c8a:	88 c0       	rjmp	.+272    	; 0x2d9c <osEE_counter_increment+0x184>
    2c8c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c8e:	bc 81       	ldd	r27, Y+4	; 0x04
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
    2c90:	2d 91       	ld	r18, X+
    2c92:	3c 91       	ld	r19, X
    2c94:	f9 01       	movw	r30, r18
    2c96:	a0 81       	ld	r26, Z
    2c98:	b1 81       	ldd	r27, Z+1	; 0x01
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
    2c9a:	10 97       	sbiw	r26, 0x00	; 0
    2c9c:	49 f0       	breq	.+18     	; 0x2cb0 <osEE_counter_increment+0x98>
    2c9e:	6d 91       	ld	r22, X+
    2ca0:	7c 91       	ld	r23, X
    2ca2:	11 97       	sbiw	r26, 0x01	; 1

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
        } while ((p_current != NULL) &&
    2ca4:	fb 01       	movw	r30, r22
    2ca6:	62 81       	ldd	r22, Z+2	; 0x02
    2ca8:	73 81       	ldd	r23, Z+3	; 0x03
    2caa:	46 17       	cp	r20, r22
    2cac:	57 07       	cpc	r21, r23
    2cae:	81 f3       	breq	.-32     	; 0x2c90 <osEE_counter_increment+0x78>
    2cb0:	2c 01       	movw	r4, r24
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
    2cb2:	f9 01       	movw	r30, r18
    2cb4:	11 82       	std	Z+1, r1	; 0x01
    2cb6:	10 82       	st	Z, r1
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
    2cb8:	f8 01       	movw	r30, r16
    2cba:	b1 83       	std	Z+1, r27	; 0x01
    2cbc:	a0 83       	st	Z, r26

        if (((p_tcb->wait_mask & mask) != 0U) &&
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);
    2cbe:	e0 90 63 02 	lds	r14, 0x0263	; 0x800263 <CDB>
    2cc2:	f0 90 64 02 	lds	r15, 0x0264	; 0x800264 <CDB+0x1>
    break;
    case OSEE_ACTION_CALLBACK:
    {
#if (defined(OSEE_HAS_CONTEXT))
      CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
        p_ccb = osEE_get_curr_core()->p_ccb;
    2cc6:	37 01       	movw	r6, r14
#endif
#if (defined(OSEE_HAS_ERRORHOOK))
          if (ev != E_OK) {
            CONST(OsEE_reg, AUTOMATIC)
              flags = osEE_begin_primitive();
            osEE_call_error_hook(osEE_get_curr_core()->p_ccb, ev);
    2cc8:	67 01       	movw	r12, r14
)
{
#if (defined(OSEE_HAS_ERRORHOOK))
  VAR(OsEE_os_context, AUTOMATIC) prev_os_ctx = p_ccb->os_context;
  if (prev_os_ctx != OSEE_ERRORHOOK_CTX) {
    p_ccb->os_context = OSEE_ERRORHOOK_CTX;
    2cca:	83 e0       	ldi	r24, 0x03	; 3
    2ccc:	28 2e       	mov	r2, r24
    2cce:	31 2c       	mov	r3, r1
            p_trigger_to_be_handled = p_triggered_db;

          /* Prepare next trigger to be handled here, before actually handle the
           * current one, otherwise cycling triggers will mess with the list of
           * triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
    2cd0:	ab 81       	ldd	r26, Y+3	; 0x03
    2cd2:	bc 81       	ldd	r27, Y+4	; 0x04
    2cd4:	ad 90       	ld	r10, X+
    2cd6:	bc 90       	ld	r11, X
    2cd8:	f5 01       	movw	r30, r10
    2cda:	f0 81       	ld	r31, Z
    2cdc:	f9 83       	std	Y+1, r31	; 0x01
    2cde:	d5 01       	movw	r26, r10
    2ce0:	11 96       	adiw	r26, 0x01	; 1
    2ce2:	bc 91       	ld	r27, X
    2ce4:	ba 83       	std	Y+2, r27	; 0x02
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
  CONST(TickType, AUTOMATIC)
    cycle = p_trigger_cb->cycle;
    2ce6:	f5 01       	movw	r30, r10
    2ce8:	86 80       	ldd	r8, Z+6	; 0x06
    2cea:	97 80       	ldd	r9, Z+7	; 0x07
(
  P2CONST(OsEE_action, AUTOMATIC, OS_APPL_DATA) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev;
  switch (p_action->type) {
    2cec:	ab 81       	ldd	r26, Y+3	; 0x03
    2cee:	bc 81       	ldd	r27, Y+4	; 0x04
    2cf0:	1c 96       	adiw	r26, 0x0c	; 12
    2cf2:	8d 91       	ld	r24, X+
    2cf4:	9c 91       	ld	r25, X
    2cf6:	81 30       	cpi	r24, 0x01	; 1
    2cf8:	91 05       	cpc	r25, r1
    2cfa:	09 f4       	brne	.+2      	; 0x2cfe <osEE_counter_increment+0xe6>
    2cfc:	66 c0       	rjmp	.+204    	; 0x2dca <osEE_counter_increment+0x1b2>
    2cfe:	78 f0       	brcs	.+30     	; 0x2d1e <osEE_counter_increment+0x106>
    2d00:	82 30       	cpi	r24, 0x02	; 2
    2d02:	91 05       	cpc	r25, r1
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <osEE_counter_increment+0xf0>
    2d06:	9f c0       	rjmp	.+318    	; 0x2e46 <osEE_counter_increment+0x22e>
    2d08:	03 97       	sbiw	r24, 0x03	; 3
    2d0a:	09 f4       	brne	.+2      	; 0x2d0e <osEE_counter_increment+0xf6>
    2d0c:	a3 c0       	rjmp	.+326    	; 0x2e54 <osEE_counter_increment+0x23c>
                  osEE_get_kernel(), p_cdb_rel, p_sn);
        }

        osEE_unlock_core(p_cdb_rel);

        ev = E_OK;
    2d0e:	10 e0       	ldi	r17, 0x00	; 0
    2d10:	00 e0       	ldi	r16, 0x00	; 0
    2d12:	12 c0       	rjmp	.+36     	; 0x2d38 <osEE_counter_increment+0x120>
    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value = (p_counter_cb->value = 0U);
    } else {
      counter_value = ++p_counter_cb->value;
    2d14:	2f 5f       	subi	r18, 0xFF	; 255
    2d16:	3f 4f       	sbci	r19, 0xFF	; 255
    2d18:	33 83       	std	Z+3, r19	; 0x03
    2d1a:	22 83       	std	Z+2, r18	; 0x02
    2d1c:	a5 cf       	rjmp	.-182    	; 0x2c68 <osEE_counter_increment+0x50>
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;

      ev = osEE_scheduler_task_activated(
    2d1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d20:	fc 81       	ldd	r31, Y+4	; 0x04
    2d22:	46 81       	ldd	r20, Z+6	; 0x06
    2d24:	57 81       	ldd	r21, Z+7	; 0x07
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	63 e6       	ldi	r22, 0x63	; 99
    2d2c:	72 e0       	ldi	r23, 0x02	; 2
    2d2e:	8d e4       	ldi	r24, 0x4D	; 77
    2d30:	92 e0       	ldi	r25, 0x02	; 2
    2d32:	0e 94 77 13 	call	0x26ee	; 0x26ee <osEE_scheduler_task_activated>
    2d36:	8c 01       	movw	r16, r24
    cycle = p_trigger_cb->cycle;

  ev = osEE_handle_action(&p_alarm_db->action);

  /* TODO: Add active check to let call CancelAlarm from callback... */
  if (cycle > 0U) {
    2d38:	81 14       	cp	r8, r1
    2d3a:	91 04       	cpc	r9, r1
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <osEE_counter_increment+0x128>
    2d3e:	9f c0       	rjmp	.+318    	; 0x2e7e <osEE_counter_increment+0x266>
    osEE_counter_insert_rel_trigger(
    2d40:	a4 01       	movw	r20, r8
    2d42:	6b 81       	ldd	r22, Y+3	; 0x03
    2d44:	7c 81       	ldd	r23, Y+4	; 0x04
    2d46:	c2 01       	movw	r24, r4
    2d48:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <osEE_counter_insert_rel_trigger>
                p_trigger_to_be_handled);
#elif (defined(OSEE_HAS_SCHEDULE_TABLES))
          /* TODO */
#endif
#if (defined(OSEE_HAS_ERRORHOOK))
          if (ev != E_OK) {
    2d4c:	01 15       	cp	r16, r1
    2d4e:	11 05       	cpc	r17, r1
    2d50:	e1 f0       	breq	.+56     	; 0x2d8a <osEE_counter_increment+0x172>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    2d52:	bf b6       	in	r11, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    2d54:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
#if (defined(OSEE_HAS_ERRORHOOK))
  VAR(OsEE_os_context, AUTOMATIC) prev_os_ctx = p_ccb->os_context;
    2d56:	f6 01       	movw	r30, r12
    2d58:	05 88       	ldd	r0, Z+21	; 0x15
    2d5a:	f6 89       	ldd	r31, Z+22	; 0x16
    2d5c:	e0 2d       	mov	r30, r0
    2d5e:	fc 83       	std	Y+4, r31	; 0x04
    2d60:	eb 83       	std	Y+3, r30	; 0x03
  if (prev_os_ctx != OSEE_ERRORHOOK_CTX) {
    2d62:	33 97       	sbiw	r30, 0x03	; 3
    2d64:	89 f0       	breq	.+34     	; 0x2d88 <osEE_counter_increment+0x170>
    p_ccb->os_context = OSEE_ERRORHOOK_CTX;
    2d66:	d6 01       	movw	r26, r12
    2d68:	56 96       	adiw	r26, 0x16	; 22
    2d6a:	3c 92       	st	X, r3
    2d6c:	2e 92       	st	-X, r2
    2d6e:	55 97       	sbiw	r26, 0x15	; 21
    p_ccb->last_error = Error;
    2d70:	1c 96       	adiw	r26, 0x0c	; 12
    2d72:	1c 93       	st	X, r17
    2d74:	0e 93       	st	-X, r16
    2d76:	1b 97       	sbiw	r26, 0x0b	; 11
    ErrorHook(Error);
    2d78:	c8 01       	movw	r24, r16
    2d7a:	0e 94 a6 04 	call	0x94c	; 0x94c <ErrorHook>
    p_ccb->os_context = prev_os_ctx;
    2d7e:	4b 81       	ldd	r20, Y+3	; 0x03
    2d80:	5c 81       	ldd	r21, Y+4	; 0x04
    2d82:	f6 01       	movw	r30, r12
    2d84:	56 8b       	std	Z+22, r21	; 0x16
    2d86:	45 8b       	std	Z+21, r20	; 0x15
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    2d88:	bf be       	out	0x3f, r11	; 63
    2d8a:	59 81       	ldd	r21, Y+1	; 0x01
    2d8c:	5b 83       	std	Y+3, r21	; 0x03
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	8c 83       	std	Y+4, r24	; 0x04
            osEE_end_primitive(flags);
          }
#else
          (void)ev; /* TODO: Handle ErrorHook */
#endif /* OSEE_HAS_ERRORHOOK */
        } while (p_triggered_db != NULL);
    2d92:	ab 81       	ldd	r26, Y+3	; 0x03
    2d94:	bc 81       	ldd	r27, Y+4	; 0x04
    2d96:	ab 2b       	or	r26, r27
    2d98:	09 f0       	breq	.+2      	; 0x2d9c <osEE_counter_increment+0x184>
    2d9a:	9a cf       	rjmp	.-204    	; 0x2cd0 <osEE_counter_increment+0xb8>
    }
    /* XXX: Unlock the core only at the End of The Service, to not incur in
            races when handling cycling triggers. */
    osEE_unlock_core_id(counter_core_id);
  }
}
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	df 91       	pop	r29
    2da6:	cf 91       	pop	r28
    2da8:	1f 91       	pop	r17
    2daa:	0f 91       	pop	r16
    2dac:	ff 90       	pop	r15
    2dae:	ef 90       	pop	r14
    2db0:	df 90       	pop	r13
    2db2:	cf 90       	pop	r12
    2db4:	bf 90       	pop	r11
    2db6:	af 90       	pop	r10
    2db8:	9f 90       	pop	r9
    2dba:	8f 90       	pop	r8
    2dbc:	7f 90       	pop	r7
    2dbe:	6f 90       	pop	r6
    2dc0:	5f 90       	pop	r5
    2dc2:	4f 90       	pop	r4
    2dc4:	3f 90       	pop	r3
    2dc6:	2f 90       	pop	r2
    2dc8:	08 95       	ret
    break;
#if (defined(OSEE_HAS_EVENTS))
    case OSEE_ACTION_EVENT:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
    2dca:	ab 81       	ldd	r26, Y+3	; 0x03
    2dcc:	bc 81       	ldd	r27, Y+4	; 0x04
    2dce:	16 96       	adiw	r26, 0x06	; 6
    2dd0:	6d 91       	ld	r22, X+
    2dd2:	7c 91       	ld	r23, X
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_tcb = p_tdb->p_tcb;
    2dd4:	db 01       	movw	r26, r22
    2dd6:	14 96       	adiw	r26, 0x04	; 4
    2dd8:	ed 91       	ld	r30, X+
    2dda:	fc 91       	ld	r31, X
      CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
        p_cdb_rel = osEE_get_task_curr_core(p_tdb);

      osEE_lock_core(p_cdb_rel);
#if (defined(OSEE_HAS_CHECKS))
      if (p_tcb->status == OSEE_TASK_SUSPENDED) {
    2ddc:	42 81       	ldd	r20, Z+2	; 0x02
    2dde:	53 81       	ldd	r21, Z+3	; 0x03
        osEE_unlock_core(p_cdb_rel);
        ev = E_OS_STATE;
    2de0:	07 e0       	ldi	r16, 0x07	; 7
    2de2:	10 e0       	ldi	r17, 0x00	; 0
      CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
        p_cdb_rel = osEE_get_task_curr_core(p_tdb);

      osEE_lock_core(p_cdb_rel);
#if (defined(OSEE_HAS_CHECKS))
      if (p_tcb->status == OSEE_TASK_SUSPENDED) {
    2de4:	41 15       	cp	r20, r1
    2de6:	51 05       	cpc	r21, r1
    2de8:	09 f4       	brne	.+2      	; 0x2dec <osEE_counter_increment+0x1d4>
    2dea:	a6 cf       	rjmp	.-180    	; 0x2d38 <osEE_counter_increment+0x120>
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_tcb = p_tdb->p_tcb;
      CONST(EventMaskType, AUTOMATIC)
        mask = p_action->param.mask;
    2dec:	ab 81       	ldd	r26, Y+3	; 0x03
    2dee:	bc 81       	ldd	r27, Y+4	; 0x04
    2df0:	1a 96       	adiw	r26, 0x0a	; 10
    2df2:	8d 91       	ld	r24, X+
    2df4:	9c 91       	ld	r25, X
      } else
#endif /* OSEE_HAS_CHECKS */
      {
        /* Set the event mask only if the task is not suspended */

        p_tcb->event_mask |= mask;
    2df6:	20 85       	ldd	r18, Z+8	; 0x08
    2df8:	31 85       	ldd	r19, Z+9	; 0x09
    2dfa:	28 2b       	or	r18, r24
    2dfc:	39 2b       	or	r19, r25
    2dfe:	31 87       	std	Z+9, r19	; 0x09
    2e00:	20 87       	std	Z+8, r18	; 0x08

        if (((p_tcb->wait_mask & mask) != 0U) &&
    2e02:	26 81       	ldd	r18, Z+6	; 0x06
    2e04:	37 81       	ldd	r19, Z+7	; 0x07
    2e06:	82 23       	and	r24, r18
    2e08:	93 23       	and	r25, r19
    2e0a:	89 2b       	or	r24, r25
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <osEE_counter_increment+0x1f8>
    2e0e:	7f cf       	rjmp	.-258    	; 0x2d0e <osEE_counter_increment+0xf6>
    2e10:	43 30       	cpi	r20, 0x03	; 3
    2e12:	51 05       	cpc	r21, r1
    2e14:	09 f0       	breq	.+2      	; 0x2e18 <osEE_counter_increment+0x200>
    2e16:	7b cf       	rjmp	.-266    	; 0x2d0e <osEE_counter_increment+0xf6>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    2e18:	d7 01       	movw	r26, r14
    2e1a:	14 96       	adiw	r26, 0x04	; 4
    2e1c:	ed 91       	ld	r30, X+
    2e1e:	fc 91       	ld	r31, X
    2e20:	15 97       	sbiw	r26, 0x05	; 5
  (*pp_fist)              = p_sn_allocated->p_next;
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	15 96       	adiw	r26, 0x05	; 5
    2e28:	9c 93       	st	X, r25
    2e2a:	8e 93       	st	-X, r24
    2e2c:	14 97       	sbiw	r26, 0x04	; 4
  p_sn_allocated->p_next  = NULL;
    2e2e:	11 82       	std	Z+1, r1	; 0x01
    2e30:	10 82       	st	Z, r1
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);

          p_sn->p_tdb = p_tdb;
    2e32:	73 83       	std	Z+3, r23	; 0x03
    2e34:	62 83       	std	Z+2, r22	; 0x02

          /* Release the TASK (and the SN) */
          (void)osEE_scheduler_task_unblocked(
    2e36:	af 01       	movw	r20, r30
    2e38:	63 e6       	ldi	r22, 0x63	; 99
    2e3a:	72 e0       	ldi	r23, 0x02	; 2
    2e3c:	8d e4       	ldi	r24, 0x4D	; 77
    2e3e:	92 e0       	ldi	r25, 0x02	; 2
    2e40:	0e 94 06 14 	call	0x280c	; 0x280c <osEE_scheduler_task_unblocked>
    2e44:	64 cf       	rjmp	.-312    	; 0x2d0e <osEE_counter_increment+0xf6>
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
      osEE_counter_increment(p_action->param.p_counter_db);
    2e46:	eb 81       	ldd	r30, Y+3	; 0x03
    2e48:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4a:	80 85       	ldd	r24, Z+8	; 0x08
    2e4c:	91 85       	ldd	r25, Z+9	; 0x09
    2e4e:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <osEE_counter_increment>
    2e52:	5d cf       	rjmp	.-326    	; 0x2d0e <osEE_counter_increment+0xf6>
    {
#if (defined(OSEE_HAS_CONTEXT))
      CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
        p_ccb = osEE_get_curr_core()->p_ccb;
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;
    2e54:	d3 01       	movw	r26, r6
    2e56:	55 96       	adiw	r26, 0x15	; 21
    2e58:	0d 91       	ld	r16, X+
    2e5a:	1c 91       	ld	r17, X
    2e5c:	56 97       	sbiw	r26, 0x16	; 22

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
    2e5e:	e9 e0       	ldi	r30, 0x09	; 9
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	56 96       	adiw	r26, 0x16	; 22
    2e64:	fc 93       	st	X, r31
    2e66:	ee 93       	st	-X, r30
    2e68:	55 97       	sbiw	r26, 0x15	; 21
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
    2e6a:	ab 81       	ldd	r26, Y+3	; 0x03
    2e6c:	bc 81       	ldd	r27, Y+4	; 0x04
    2e6e:	14 96       	adiw	r26, 0x04	; 4
    2e70:	ed 91       	ld	r30, X+
    2e72:	fc 91       	ld	r31, X
    2e74:	09 95       	icall
#if (defined(OSEE_HAS_CONTEXT))
      p_ccb->os_context = prev_os_context;
    2e76:	f3 01       	movw	r30, r6
    2e78:	16 8b       	std	Z+22, r17	; 0x16
    2e7a:	05 8b       	std	Z+21, r16	; 0x15
    2e7c:	48 cf       	rjmp	.-368    	; 0x2d0e <osEE_counter_increment+0xf6>
  if (cycle > 0U) {
    osEE_counter_insert_rel_trigger(
      p_counter_db, p_trigger_db, cycle
    );
  } else {
    p_trigger_cb->active = OSEE_FALSE;
    2e7e:	d5 01       	movw	r26, r10
    2e80:	15 96       	adiw	r26, 0x05	; 5
    2e82:	1c 92       	st	X, r1
    2e84:	1e 92       	st	-X, r1
    2e86:	14 97       	sbiw	r26, 0x04	; 4
    2e88:	61 cf       	rjmp	.-318    	; 0x2d4c <osEE_counter_increment+0x134>

00002e8a <OsEE_atmega_startTimer1>:
 * - x < TIMER_1_PRESCALER_1024_MAX_TICKS = 4194304:	64     us
 */
void OsEE_atmega_startTimer1(uint32_t microsecondsInterval) {
  uint8_t	timer1Prescaler;
  uint16_t	timer1CompareValue;
  TCCR1B = 0;	/* Pause Timer. */
    2e8a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  TCCR1A = 0;
    2e8e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  TCCR1C = 0;
    2e92:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
  TCNT1  = 0;
    2e96:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    2e9a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
   * 0 1 1 clkIO/64 (From prescaler)
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    2e9e:	61 15       	cp	r22, r1
    2ea0:	20 e1       	ldi	r18, 0x10	; 16
    2ea2:	72 07       	cpc	r23, r18
    2ea4:	81 05       	cpc	r24, r1
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	a0 f4       	brcc	.+40     	; 0x2ed2 <OsEE_atmega_startTimer1+0x48>
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
    2eaa:	e4 e0       	ldi	r30, 0x04	; 4
    2eac:	66 0f       	add	r22, r22
    2eae:	77 1f       	adc	r23, r23
    2eb0:	ea 95       	dec	r30
    2eb2:	e1 f7       	brne	.-8      	; 0x2eac <OsEE_atmega_startTimer1+0x22>
    2eb4:	61 50       	subi	r22, 0x01	; 1
    2eb6:	71 09       	sbc	r23, r1
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
  }
#else
  #error("Unsupported CPU frequency")
#endif
  TIFR1  = (1 << OCIE1A);	/* Clear Output Compare A Match Flag. */
    2eba:	92 e0       	ldi	r25, 0x02	; 2
    2ebc:	96 bb       	out	0x16, r25	; 22
  TIMSK1 = (1 << OCIE1A);	/* Output Compare A Match Interrupt Enable */
    2ebe:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  OCR1A  = timer1CompareValue;	/* Set Compare A Match Value */
    2ec2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    2ec6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  TCCR1B = (1 << WGM12) | timer1Prescaler;	/* Set CTC Mode and Prescaler. */
    2eca:	88 60       	ori	r24, 0x08	; 8
    2ecc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
}	/* startTimer1() */
    2ed0:	08 95       	ret
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    2ed2:	61 15       	cp	r22, r1
    2ed4:	20 e8       	ldi	r18, 0x80	; 128
    2ed6:	72 07       	cpc	r23, r18
    2ed8:	81 05       	cpc	r24, r1
    2eda:	91 05       	cpc	r25, r1
    2edc:	30 f4       	brcc	.+12     	; 0x2eea <OsEE_atmega_startTimer1+0x60>
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
    2ede:	66 0f       	add	r22, r22
    2ee0:	77 1f       	adc	r23, r23
    2ee2:	61 50       	subi	r22, 0x01	; 1
    2ee4:	71 09       	sbc	r23, r1
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
    2ee8:	e8 cf       	rjmp	.-48     	; 0x2eba <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    2eea:	6c 3f       	cpi	r22, 0xFC	; 252
    2eec:	2f ef       	ldi	r18, 0xFF	; 255
    2eee:	72 07       	cpc	r23, r18
    2ef0:	23 e0       	ldi	r18, 0x03	; 3
    2ef2:	82 07       	cpc	r24, r18
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	58 f4       	brcc	.+22     	; 0x2f0e <OsEE_atmega_startTimer1+0x84>
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
    2ef8:	42 e0       	ldi	r20, 0x02	; 2
    2efa:	96 95       	lsr	r25
    2efc:	87 95       	ror	r24
    2efe:	77 95       	ror	r23
    2f00:	67 95       	ror	r22
    2f02:	4a 95       	dec	r20
    2f04:	d1 f7       	brne	.-12     	; 0x2efa <OsEE_atmega_startTimer1+0x70>
    2f06:	61 50       	subi	r22, 0x01	; 1
    2f08:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    2f0a:	83 e0       	ldi	r24, 0x03	; 3
    2f0c:	d6 cf       	rjmp	.-84     	; 0x2eba <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    2f0e:	61 15       	cp	r22, r1
    2f10:	71 05       	cpc	r23, r1
    2f12:	20 e1       	ldi	r18, 0x10	; 16
    2f14:	82 07       	cpc	r24, r18
    2f16:	91 05       	cpc	r25, r1
    2f18:	58 f4       	brcc	.+22     	; 0x2f30 <OsEE_atmega_startTimer1+0xa6>
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
    2f1a:	34 e0       	ldi	r19, 0x04	; 4
    2f1c:	96 95       	lsr	r25
    2f1e:	87 95       	ror	r24
    2f20:	77 95       	ror	r23
    2f22:	67 95       	ror	r22
    2f24:	3a 95       	dec	r19
    2f26:	d1 f7       	brne	.-12     	; 0x2f1c <OsEE_atmega_startTimer1+0x92>
    2f28:	61 50       	subi	r22, 0x01	; 1
    2f2a:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    2f2c:	84 e0       	ldi	r24, 0x04	; 4
    2f2e:	c5 cf       	rjmp	.-118    	; 0x2eba <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
    2f30:	26 e0       	ldi	r18, 0x06	; 6
    2f32:	96 95       	lsr	r25
    2f34:	87 95       	ror	r24
    2f36:	77 95       	ror	r23
    2f38:	67 95       	ror	r22
    2f3a:	2a 95       	dec	r18
    2f3c:	d1 f7       	brne	.-12     	; 0x2f32 <OsEE_atmega_startTimer1+0xa8>
    2f3e:	61 50       	subi	r22, 0x01	; 1
    2f40:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    2f42:	85 e0       	ldi	r24, 0x05	; 5
    2f44:	ba cf       	rjmp	.-140    	; 0x2eba <OsEE_atmega_startTimer1+0x30>

00002f46 <__subsf3>:
    2f46:	50 58       	subi	r21, 0x80	; 128

00002f48 <__addsf3>:
    2f48:	bb 27       	eor	r27, r27
    2f4a:	aa 27       	eor	r26, r26
    2f4c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__addsf3x>
    2f50:	0c 94 35 19 	jmp	0x326a	; 0x326a <__fp_round>
    2f54:	0e 94 27 19 	call	0x324e	; 0x324e <__fp_pscA>
    2f58:	38 f0       	brcs	.+14     	; 0x2f68 <__addsf3+0x20>
    2f5a:	0e 94 2e 19 	call	0x325c	; 0x325c <__fp_pscB>
    2f5e:	20 f0       	brcs	.+8      	; 0x2f68 <__addsf3+0x20>
    2f60:	39 f4       	brne	.+14     	; 0x2f70 <__addsf3+0x28>
    2f62:	9f 3f       	cpi	r25, 0xFF	; 255
    2f64:	19 f4       	brne	.+6      	; 0x2f6c <__addsf3+0x24>
    2f66:	26 f4       	brtc	.+8      	; 0x2f70 <__addsf3+0x28>
    2f68:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_nan>
    2f6c:	0e f4       	brtc	.+2      	; 0x2f70 <__addsf3+0x28>
    2f6e:	e0 95       	com	r30
    2f70:	e7 fb       	bst	r30, 7
    2f72:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>

00002f76 <__addsf3x>:
    2f76:	e9 2f       	mov	r30, r25
    2f78:	0e 94 46 19 	call	0x328c	; 0x328c <__fp_split3>
    2f7c:	58 f3       	brcs	.-42     	; 0x2f54 <__addsf3+0xc>
    2f7e:	ba 17       	cp	r27, r26
    2f80:	62 07       	cpc	r22, r18
    2f82:	73 07       	cpc	r23, r19
    2f84:	84 07       	cpc	r24, r20
    2f86:	95 07       	cpc	r25, r21
    2f88:	20 f0       	brcs	.+8      	; 0x2f92 <__addsf3x+0x1c>
    2f8a:	79 f4       	brne	.+30     	; 0x2faa <__addsf3x+0x34>
    2f8c:	a6 f5       	brtc	.+104    	; 0x2ff6 <__addsf3x+0x80>
    2f8e:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__fp_zero>
    2f92:	0e f4       	brtc	.+2      	; 0x2f96 <__addsf3x+0x20>
    2f94:	e0 95       	com	r30
    2f96:	0b 2e       	mov	r0, r27
    2f98:	ba 2f       	mov	r27, r26
    2f9a:	a0 2d       	mov	r26, r0
    2f9c:	0b 01       	movw	r0, r22
    2f9e:	b9 01       	movw	r22, r18
    2fa0:	90 01       	movw	r18, r0
    2fa2:	0c 01       	movw	r0, r24
    2fa4:	ca 01       	movw	r24, r20
    2fa6:	a0 01       	movw	r20, r0
    2fa8:	11 24       	eor	r1, r1
    2faa:	ff 27       	eor	r31, r31
    2fac:	59 1b       	sub	r21, r25
    2fae:	99 f0       	breq	.+38     	; 0x2fd6 <__addsf3x+0x60>
    2fb0:	59 3f       	cpi	r21, 0xF9	; 249
    2fb2:	50 f4       	brcc	.+20     	; 0x2fc8 <__addsf3x+0x52>
    2fb4:	50 3e       	cpi	r21, 0xE0	; 224
    2fb6:	68 f1       	brcs	.+90     	; 0x3012 <__addsf3x+0x9c>
    2fb8:	1a 16       	cp	r1, r26
    2fba:	f0 40       	sbci	r31, 0x00	; 0
    2fbc:	a2 2f       	mov	r26, r18
    2fbe:	23 2f       	mov	r18, r19
    2fc0:	34 2f       	mov	r19, r20
    2fc2:	44 27       	eor	r20, r20
    2fc4:	58 5f       	subi	r21, 0xF8	; 248
    2fc6:	f3 cf       	rjmp	.-26     	; 0x2fae <__addsf3x+0x38>
    2fc8:	46 95       	lsr	r20
    2fca:	37 95       	ror	r19
    2fcc:	27 95       	ror	r18
    2fce:	a7 95       	ror	r26
    2fd0:	f0 40       	sbci	r31, 0x00	; 0
    2fd2:	53 95       	inc	r21
    2fd4:	c9 f7       	brne	.-14     	; 0x2fc8 <__addsf3x+0x52>
    2fd6:	7e f4       	brtc	.+30     	; 0x2ff6 <__addsf3x+0x80>
    2fd8:	1f 16       	cp	r1, r31
    2fda:	ba 0b       	sbc	r27, r26
    2fdc:	62 0b       	sbc	r22, r18
    2fde:	73 0b       	sbc	r23, r19
    2fe0:	84 0b       	sbc	r24, r20
    2fe2:	ba f0       	brmi	.+46     	; 0x3012 <__addsf3x+0x9c>
    2fe4:	91 50       	subi	r25, 0x01	; 1
    2fe6:	a1 f0       	breq	.+40     	; 0x3010 <__addsf3x+0x9a>
    2fe8:	ff 0f       	add	r31, r31
    2fea:	bb 1f       	adc	r27, r27
    2fec:	66 1f       	adc	r22, r22
    2fee:	77 1f       	adc	r23, r23
    2ff0:	88 1f       	adc	r24, r24
    2ff2:	c2 f7       	brpl	.-16     	; 0x2fe4 <__addsf3x+0x6e>
    2ff4:	0e c0       	rjmp	.+28     	; 0x3012 <__addsf3x+0x9c>
    2ff6:	ba 0f       	add	r27, r26
    2ff8:	62 1f       	adc	r22, r18
    2ffa:	73 1f       	adc	r23, r19
    2ffc:	84 1f       	adc	r24, r20
    2ffe:	48 f4       	brcc	.+18     	; 0x3012 <__addsf3x+0x9c>
    3000:	87 95       	ror	r24
    3002:	77 95       	ror	r23
    3004:	67 95       	ror	r22
    3006:	b7 95       	ror	r27
    3008:	f7 95       	ror	r31
    300a:	9e 3f       	cpi	r25, 0xFE	; 254
    300c:	08 f0       	brcs	.+2      	; 0x3010 <__addsf3x+0x9a>
    300e:	b0 cf       	rjmp	.-160    	; 0x2f70 <__addsf3+0x28>
    3010:	93 95       	inc	r25
    3012:	88 0f       	add	r24, r24
    3014:	08 f0       	brcs	.+2      	; 0x3018 <__addsf3x+0xa2>
    3016:	99 27       	eor	r25, r25
    3018:	ee 0f       	add	r30, r30
    301a:	97 95       	ror	r25
    301c:	87 95       	ror	r24
    301e:	08 95       	ret

00003020 <__cmpsf2>:
    3020:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__fp_cmp>
    3024:	08 f4       	brcc	.+2      	; 0x3028 <__cmpsf2+0x8>
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	08 95       	ret

0000302a <__divsf3>:
    302a:	0e 94 29 18 	call	0x3052	; 0x3052 <__divsf3x>
    302e:	0c 94 35 19 	jmp	0x326a	; 0x326a <__fp_round>
    3032:	0e 94 2e 19 	call	0x325c	; 0x325c <__fp_pscB>
    3036:	58 f0       	brcs	.+22     	; 0x304e <__divsf3+0x24>
    3038:	0e 94 27 19 	call	0x324e	; 0x324e <__fp_pscA>
    303c:	40 f0       	brcs	.+16     	; 0x304e <__divsf3+0x24>
    303e:	29 f4       	brne	.+10     	; 0x304a <__divsf3+0x20>
    3040:	5f 3f       	cpi	r21, 0xFF	; 255
    3042:	29 f0       	breq	.+10     	; 0x304e <__divsf3+0x24>
    3044:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>
    3048:	51 11       	cpse	r21, r1
    304a:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__fp_szero>
    304e:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_nan>

00003052 <__divsf3x>:
    3052:	0e 94 46 19 	call	0x328c	; 0x328c <__fp_split3>
    3056:	68 f3       	brcs	.-38     	; 0x3032 <__divsf3+0x8>

00003058 <__divsf3_pse>:
    3058:	99 23       	and	r25, r25
    305a:	b1 f3       	breq	.-20     	; 0x3048 <__divsf3+0x1e>
    305c:	55 23       	and	r21, r21
    305e:	91 f3       	breq	.-28     	; 0x3044 <__divsf3+0x1a>
    3060:	95 1b       	sub	r25, r21
    3062:	55 0b       	sbc	r21, r21
    3064:	bb 27       	eor	r27, r27
    3066:	aa 27       	eor	r26, r26
    3068:	62 17       	cp	r22, r18
    306a:	73 07       	cpc	r23, r19
    306c:	84 07       	cpc	r24, r20
    306e:	38 f0       	brcs	.+14     	; 0x307e <__divsf3_pse+0x26>
    3070:	9f 5f       	subi	r25, 0xFF	; 255
    3072:	5f 4f       	sbci	r21, 0xFF	; 255
    3074:	22 0f       	add	r18, r18
    3076:	33 1f       	adc	r19, r19
    3078:	44 1f       	adc	r20, r20
    307a:	aa 1f       	adc	r26, r26
    307c:	a9 f3       	breq	.-22     	; 0x3068 <__divsf3_pse+0x10>
    307e:	35 d0       	rcall	.+106    	; 0x30ea <__divsf3_pse+0x92>
    3080:	0e 2e       	mov	r0, r30
    3082:	3a f0       	brmi	.+14     	; 0x3092 <__divsf3_pse+0x3a>
    3084:	e0 e8       	ldi	r30, 0x80	; 128
    3086:	32 d0       	rcall	.+100    	; 0x30ec <__divsf3_pse+0x94>
    3088:	91 50       	subi	r25, 0x01	; 1
    308a:	50 40       	sbci	r21, 0x00	; 0
    308c:	e6 95       	lsr	r30
    308e:	00 1c       	adc	r0, r0
    3090:	ca f7       	brpl	.-14     	; 0x3084 <__divsf3_pse+0x2c>
    3092:	2b d0       	rcall	.+86     	; 0x30ea <__divsf3_pse+0x92>
    3094:	fe 2f       	mov	r31, r30
    3096:	29 d0       	rcall	.+82     	; 0x30ea <__divsf3_pse+0x92>
    3098:	66 0f       	add	r22, r22
    309a:	77 1f       	adc	r23, r23
    309c:	88 1f       	adc	r24, r24
    309e:	bb 1f       	adc	r27, r27
    30a0:	26 17       	cp	r18, r22
    30a2:	37 07       	cpc	r19, r23
    30a4:	48 07       	cpc	r20, r24
    30a6:	ab 07       	cpc	r26, r27
    30a8:	b0 e8       	ldi	r27, 0x80	; 128
    30aa:	09 f0       	breq	.+2      	; 0x30ae <__divsf3_pse+0x56>
    30ac:	bb 0b       	sbc	r27, r27
    30ae:	80 2d       	mov	r24, r0
    30b0:	bf 01       	movw	r22, r30
    30b2:	ff 27       	eor	r31, r31
    30b4:	93 58       	subi	r25, 0x83	; 131
    30b6:	5f 4f       	sbci	r21, 0xFF	; 255
    30b8:	3a f0       	brmi	.+14     	; 0x30c8 <__divsf3_pse+0x70>
    30ba:	9e 3f       	cpi	r25, 0xFE	; 254
    30bc:	51 05       	cpc	r21, r1
    30be:	78 f0       	brcs	.+30     	; 0x30de <__divsf3_pse+0x86>
    30c0:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>
    30c4:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__fp_szero>
    30c8:	5f 3f       	cpi	r21, 0xFF	; 255
    30ca:	e4 f3       	brlt	.-8      	; 0x30c4 <__divsf3_pse+0x6c>
    30cc:	98 3e       	cpi	r25, 0xE8	; 232
    30ce:	d4 f3       	brlt	.-12     	; 0x30c4 <__divsf3_pse+0x6c>
    30d0:	86 95       	lsr	r24
    30d2:	77 95       	ror	r23
    30d4:	67 95       	ror	r22
    30d6:	b7 95       	ror	r27
    30d8:	f7 95       	ror	r31
    30da:	9f 5f       	subi	r25, 0xFF	; 255
    30dc:	c9 f7       	brne	.-14     	; 0x30d0 <__divsf3_pse+0x78>
    30de:	88 0f       	add	r24, r24
    30e0:	91 1d       	adc	r25, r1
    30e2:	96 95       	lsr	r25
    30e4:	87 95       	ror	r24
    30e6:	97 f9       	bld	r25, 7
    30e8:	08 95       	ret
    30ea:	e1 e0       	ldi	r30, 0x01	; 1
    30ec:	66 0f       	add	r22, r22
    30ee:	77 1f       	adc	r23, r23
    30f0:	88 1f       	adc	r24, r24
    30f2:	bb 1f       	adc	r27, r27
    30f4:	62 17       	cp	r22, r18
    30f6:	73 07       	cpc	r23, r19
    30f8:	84 07       	cpc	r24, r20
    30fa:	ba 07       	cpc	r27, r26
    30fc:	20 f0       	brcs	.+8      	; 0x3106 <__divsf3_pse+0xae>
    30fe:	62 1b       	sub	r22, r18
    3100:	73 0b       	sbc	r23, r19
    3102:	84 0b       	sbc	r24, r20
    3104:	ba 0b       	sbc	r27, r26
    3106:	ee 1f       	adc	r30, r30
    3108:	88 f7       	brcc	.-30     	; 0x30ec <__divsf3_pse+0x94>
    310a:	e0 95       	com	r30
    310c:	08 95       	ret

0000310e <__fixsfsi>:
    310e:	0e 94 8e 18 	call	0x311c	; 0x311c <__fixunssfsi>
    3112:	68 94       	set
    3114:	b1 11       	cpse	r27, r1
    3116:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__fp_szero>
    311a:	08 95       	ret

0000311c <__fixunssfsi>:
    311c:	0e 94 4e 19 	call	0x329c	; 0x329c <__fp_splitA>
    3120:	88 f0       	brcs	.+34     	; 0x3144 <__fixunssfsi+0x28>
    3122:	9f 57       	subi	r25, 0x7F	; 127
    3124:	98 f0       	brcs	.+38     	; 0x314c <__fixunssfsi+0x30>
    3126:	b9 2f       	mov	r27, r25
    3128:	99 27       	eor	r25, r25
    312a:	b7 51       	subi	r27, 0x17	; 23
    312c:	b0 f0       	brcs	.+44     	; 0x315a <__fixunssfsi+0x3e>
    312e:	e1 f0       	breq	.+56     	; 0x3168 <__fixunssfsi+0x4c>
    3130:	66 0f       	add	r22, r22
    3132:	77 1f       	adc	r23, r23
    3134:	88 1f       	adc	r24, r24
    3136:	99 1f       	adc	r25, r25
    3138:	1a f0       	brmi	.+6      	; 0x3140 <__fixunssfsi+0x24>
    313a:	ba 95       	dec	r27
    313c:	c9 f7       	brne	.-14     	; 0x3130 <__fixunssfsi+0x14>
    313e:	14 c0       	rjmp	.+40     	; 0x3168 <__fixunssfsi+0x4c>
    3140:	b1 30       	cpi	r27, 0x01	; 1
    3142:	91 f0       	breq	.+36     	; 0x3168 <__fixunssfsi+0x4c>
    3144:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__fp_zero>
    3148:	b1 e0       	ldi	r27, 0x01	; 1
    314a:	08 95       	ret
    314c:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__fp_zero>
    3150:	67 2f       	mov	r22, r23
    3152:	78 2f       	mov	r23, r24
    3154:	88 27       	eor	r24, r24
    3156:	b8 5f       	subi	r27, 0xF8	; 248
    3158:	39 f0       	breq	.+14     	; 0x3168 <__fixunssfsi+0x4c>
    315a:	b9 3f       	cpi	r27, 0xF9	; 249
    315c:	cc f3       	brlt	.-14     	; 0x3150 <__fixunssfsi+0x34>
    315e:	86 95       	lsr	r24
    3160:	77 95       	ror	r23
    3162:	67 95       	ror	r22
    3164:	b3 95       	inc	r27
    3166:	d9 f7       	brne	.-10     	; 0x315e <__fixunssfsi+0x42>
    3168:	3e f4       	brtc	.+14     	; 0x3178 <__fixunssfsi+0x5c>
    316a:	90 95       	com	r25
    316c:	80 95       	com	r24
    316e:	70 95       	com	r23
    3170:	61 95       	neg	r22
    3172:	7f 4f       	sbci	r23, 0xFF	; 255
    3174:	8f 4f       	sbci	r24, 0xFF	; 255
    3176:	9f 4f       	sbci	r25, 0xFF	; 255
    3178:	08 95       	ret

0000317a <__floatunsisf>:
    317a:	e8 94       	clt
    317c:	09 c0       	rjmp	.+18     	; 0x3190 <__floatsisf+0x12>

0000317e <__floatsisf>:
    317e:	97 fb       	bst	r25, 7
    3180:	3e f4       	brtc	.+14     	; 0x3190 <__floatsisf+0x12>
    3182:	90 95       	com	r25
    3184:	80 95       	com	r24
    3186:	70 95       	com	r23
    3188:	61 95       	neg	r22
    318a:	7f 4f       	sbci	r23, 0xFF	; 255
    318c:	8f 4f       	sbci	r24, 0xFF	; 255
    318e:	9f 4f       	sbci	r25, 0xFF	; 255
    3190:	99 23       	and	r25, r25
    3192:	a9 f0       	breq	.+42     	; 0x31be <__floatsisf+0x40>
    3194:	f9 2f       	mov	r31, r25
    3196:	96 e9       	ldi	r25, 0x96	; 150
    3198:	bb 27       	eor	r27, r27
    319a:	93 95       	inc	r25
    319c:	f6 95       	lsr	r31
    319e:	87 95       	ror	r24
    31a0:	77 95       	ror	r23
    31a2:	67 95       	ror	r22
    31a4:	b7 95       	ror	r27
    31a6:	f1 11       	cpse	r31, r1
    31a8:	f8 cf       	rjmp	.-16     	; 0x319a <__floatsisf+0x1c>
    31aa:	fa f4       	brpl	.+62     	; 0x31ea <__floatsisf+0x6c>
    31ac:	bb 0f       	add	r27, r27
    31ae:	11 f4       	brne	.+4      	; 0x31b4 <__floatsisf+0x36>
    31b0:	60 ff       	sbrs	r22, 0
    31b2:	1b c0       	rjmp	.+54     	; 0x31ea <__floatsisf+0x6c>
    31b4:	6f 5f       	subi	r22, 0xFF	; 255
    31b6:	7f 4f       	sbci	r23, 0xFF	; 255
    31b8:	8f 4f       	sbci	r24, 0xFF	; 255
    31ba:	9f 4f       	sbci	r25, 0xFF	; 255
    31bc:	16 c0       	rjmp	.+44     	; 0x31ea <__floatsisf+0x6c>
    31be:	88 23       	and	r24, r24
    31c0:	11 f0       	breq	.+4      	; 0x31c6 <__floatsisf+0x48>
    31c2:	96 e9       	ldi	r25, 0x96	; 150
    31c4:	11 c0       	rjmp	.+34     	; 0x31e8 <__floatsisf+0x6a>
    31c6:	77 23       	and	r23, r23
    31c8:	21 f0       	breq	.+8      	; 0x31d2 <__floatsisf+0x54>
    31ca:	9e e8       	ldi	r25, 0x8E	; 142
    31cc:	87 2f       	mov	r24, r23
    31ce:	76 2f       	mov	r23, r22
    31d0:	05 c0       	rjmp	.+10     	; 0x31dc <__floatsisf+0x5e>
    31d2:	66 23       	and	r22, r22
    31d4:	71 f0       	breq	.+28     	; 0x31f2 <__floatsisf+0x74>
    31d6:	96 e8       	ldi	r25, 0x86	; 134
    31d8:	86 2f       	mov	r24, r22
    31da:	70 e0       	ldi	r23, 0x00	; 0
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	2a f0       	brmi	.+10     	; 0x31ea <__floatsisf+0x6c>
    31e0:	9a 95       	dec	r25
    31e2:	66 0f       	add	r22, r22
    31e4:	77 1f       	adc	r23, r23
    31e6:	88 1f       	adc	r24, r24
    31e8:	da f7       	brpl	.-10     	; 0x31e0 <__floatsisf+0x62>
    31ea:	88 0f       	add	r24, r24
    31ec:	96 95       	lsr	r25
    31ee:	87 95       	ror	r24
    31f0:	97 f9       	bld	r25, 7
    31f2:	08 95       	ret

000031f4 <__fp_cmp>:
    31f4:	99 0f       	add	r25, r25
    31f6:	00 08       	sbc	r0, r0
    31f8:	55 0f       	add	r21, r21
    31fa:	aa 0b       	sbc	r26, r26
    31fc:	e0 e8       	ldi	r30, 0x80	; 128
    31fe:	fe ef       	ldi	r31, 0xFE	; 254
    3200:	16 16       	cp	r1, r22
    3202:	17 06       	cpc	r1, r23
    3204:	e8 07       	cpc	r30, r24
    3206:	f9 07       	cpc	r31, r25
    3208:	c0 f0       	brcs	.+48     	; 0x323a <__fp_cmp+0x46>
    320a:	12 16       	cp	r1, r18
    320c:	13 06       	cpc	r1, r19
    320e:	e4 07       	cpc	r30, r20
    3210:	f5 07       	cpc	r31, r21
    3212:	98 f0       	brcs	.+38     	; 0x323a <__fp_cmp+0x46>
    3214:	62 1b       	sub	r22, r18
    3216:	73 0b       	sbc	r23, r19
    3218:	84 0b       	sbc	r24, r20
    321a:	95 0b       	sbc	r25, r21
    321c:	39 f4       	brne	.+14     	; 0x322c <__fp_cmp+0x38>
    321e:	0a 26       	eor	r0, r26
    3220:	61 f0       	breq	.+24     	; 0x323a <__fp_cmp+0x46>
    3222:	23 2b       	or	r18, r19
    3224:	24 2b       	or	r18, r20
    3226:	25 2b       	or	r18, r21
    3228:	21 f4       	brne	.+8      	; 0x3232 <__fp_cmp+0x3e>
    322a:	08 95       	ret
    322c:	0a 26       	eor	r0, r26
    322e:	09 f4       	brne	.+2      	; 0x3232 <__fp_cmp+0x3e>
    3230:	a1 40       	sbci	r26, 0x01	; 1
    3232:	a6 95       	lsr	r26
    3234:	8f ef       	ldi	r24, 0xFF	; 255
    3236:	81 1d       	adc	r24, r1
    3238:	81 1d       	adc	r24, r1
    323a:	08 95       	ret

0000323c <__fp_inf>:
    323c:	97 f9       	bld	r25, 7
    323e:	9f 67       	ori	r25, 0x7F	; 127
    3240:	80 e8       	ldi	r24, 0x80	; 128
    3242:	70 e0       	ldi	r23, 0x00	; 0
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	08 95       	ret

00003248 <__fp_nan>:
    3248:	9f ef       	ldi	r25, 0xFF	; 255
    324a:	80 ec       	ldi	r24, 0xC0	; 192
    324c:	08 95       	ret

0000324e <__fp_pscA>:
    324e:	00 24       	eor	r0, r0
    3250:	0a 94       	dec	r0
    3252:	16 16       	cp	r1, r22
    3254:	17 06       	cpc	r1, r23
    3256:	18 06       	cpc	r1, r24
    3258:	09 06       	cpc	r0, r25
    325a:	08 95       	ret

0000325c <__fp_pscB>:
    325c:	00 24       	eor	r0, r0
    325e:	0a 94       	dec	r0
    3260:	12 16       	cp	r1, r18
    3262:	13 06       	cpc	r1, r19
    3264:	14 06       	cpc	r1, r20
    3266:	05 06       	cpc	r0, r21
    3268:	08 95       	ret

0000326a <__fp_round>:
    326a:	09 2e       	mov	r0, r25
    326c:	03 94       	inc	r0
    326e:	00 0c       	add	r0, r0
    3270:	11 f4       	brne	.+4      	; 0x3276 <__fp_round+0xc>
    3272:	88 23       	and	r24, r24
    3274:	52 f0       	brmi	.+20     	; 0x328a <__fp_round+0x20>
    3276:	bb 0f       	add	r27, r27
    3278:	40 f4       	brcc	.+16     	; 0x328a <__fp_round+0x20>
    327a:	bf 2b       	or	r27, r31
    327c:	11 f4       	brne	.+4      	; 0x3282 <__fp_round+0x18>
    327e:	60 ff       	sbrs	r22, 0
    3280:	04 c0       	rjmp	.+8      	; 0x328a <__fp_round+0x20>
    3282:	6f 5f       	subi	r22, 0xFF	; 255
    3284:	7f 4f       	sbci	r23, 0xFF	; 255
    3286:	8f 4f       	sbci	r24, 0xFF	; 255
    3288:	9f 4f       	sbci	r25, 0xFF	; 255
    328a:	08 95       	ret

0000328c <__fp_split3>:
    328c:	57 fd       	sbrc	r21, 7
    328e:	90 58       	subi	r25, 0x80	; 128
    3290:	44 0f       	add	r20, r20
    3292:	55 1f       	adc	r21, r21
    3294:	59 f0       	breq	.+22     	; 0x32ac <__fp_splitA+0x10>
    3296:	5f 3f       	cpi	r21, 0xFF	; 255
    3298:	71 f0       	breq	.+28     	; 0x32b6 <__fp_splitA+0x1a>
    329a:	47 95       	ror	r20

0000329c <__fp_splitA>:
    329c:	88 0f       	add	r24, r24
    329e:	97 fb       	bst	r25, 7
    32a0:	99 1f       	adc	r25, r25
    32a2:	61 f0       	breq	.+24     	; 0x32bc <__fp_splitA+0x20>
    32a4:	9f 3f       	cpi	r25, 0xFF	; 255
    32a6:	79 f0       	breq	.+30     	; 0x32c6 <__fp_splitA+0x2a>
    32a8:	87 95       	ror	r24
    32aa:	08 95       	ret
    32ac:	12 16       	cp	r1, r18
    32ae:	13 06       	cpc	r1, r19
    32b0:	14 06       	cpc	r1, r20
    32b2:	55 1f       	adc	r21, r21
    32b4:	f2 cf       	rjmp	.-28     	; 0x329a <__fp_split3+0xe>
    32b6:	46 95       	lsr	r20
    32b8:	f1 df       	rcall	.-30     	; 0x329c <__fp_splitA>
    32ba:	08 c0       	rjmp	.+16     	; 0x32cc <__fp_splitA+0x30>
    32bc:	16 16       	cp	r1, r22
    32be:	17 06       	cpc	r1, r23
    32c0:	18 06       	cpc	r1, r24
    32c2:	99 1f       	adc	r25, r25
    32c4:	f1 cf       	rjmp	.-30     	; 0x32a8 <__fp_splitA+0xc>
    32c6:	86 95       	lsr	r24
    32c8:	71 05       	cpc	r23, r1
    32ca:	61 05       	cpc	r22, r1
    32cc:	08 94       	sec
    32ce:	08 95       	ret

000032d0 <__fp_zero>:
    32d0:	e8 94       	clt

000032d2 <__fp_szero>:
    32d2:	bb 27       	eor	r27, r27
    32d4:	66 27       	eor	r22, r22
    32d6:	77 27       	eor	r23, r23
    32d8:	cb 01       	movw	r24, r22
    32da:	97 f9       	bld	r25, 7
    32dc:	08 95       	ret

000032de <__gesf2>:
    32de:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__fp_cmp>
    32e2:	08 f4       	brcc	.+2      	; 0x32e6 <__gesf2+0x8>
    32e4:	8f ef       	ldi	r24, 0xFF	; 255
    32e6:	08 95       	ret

000032e8 <__mulsf3>:
    32e8:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3x>
    32ec:	0c 94 35 19 	jmp	0x326a	; 0x326a <__fp_round>
    32f0:	0e 94 27 19 	call	0x324e	; 0x324e <__fp_pscA>
    32f4:	38 f0       	brcs	.+14     	; 0x3304 <__mulsf3+0x1c>
    32f6:	0e 94 2e 19 	call	0x325c	; 0x325c <__fp_pscB>
    32fa:	20 f0       	brcs	.+8      	; 0x3304 <__mulsf3+0x1c>
    32fc:	95 23       	and	r25, r21
    32fe:	11 f0       	breq	.+4      	; 0x3304 <__mulsf3+0x1c>
    3300:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>
    3304:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_nan>
    3308:	11 24       	eor	r1, r1
    330a:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__fp_szero>

0000330e <__mulsf3x>:
    330e:	0e 94 46 19 	call	0x328c	; 0x328c <__fp_split3>
    3312:	70 f3       	brcs	.-36     	; 0x32f0 <__mulsf3+0x8>

00003314 <__mulsf3_pse>:
    3314:	95 9f       	mul	r25, r21
    3316:	c1 f3       	breq	.-16     	; 0x3308 <__mulsf3+0x20>
    3318:	95 0f       	add	r25, r21
    331a:	50 e0       	ldi	r21, 0x00	; 0
    331c:	55 1f       	adc	r21, r21
    331e:	62 9f       	mul	r22, r18
    3320:	f0 01       	movw	r30, r0
    3322:	72 9f       	mul	r23, r18
    3324:	bb 27       	eor	r27, r27
    3326:	f0 0d       	add	r31, r0
    3328:	b1 1d       	adc	r27, r1
    332a:	63 9f       	mul	r22, r19
    332c:	aa 27       	eor	r26, r26
    332e:	f0 0d       	add	r31, r0
    3330:	b1 1d       	adc	r27, r1
    3332:	aa 1f       	adc	r26, r26
    3334:	64 9f       	mul	r22, r20
    3336:	66 27       	eor	r22, r22
    3338:	b0 0d       	add	r27, r0
    333a:	a1 1d       	adc	r26, r1
    333c:	66 1f       	adc	r22, r22
    333e:	82 9f       	mul	r24, r18
    3340:	22 27       	eor	r18, r18
    3342:	b0 0d       	add	r27, r0
    3344:	a1 1d       	adc	r26, r1
    3346:	62 1f       	adc	r22, r18
    3348:	73 9f       	mul	r23, r19
    334a:	b0 0d       	add	r27, r0
    334c:	a1 1d       	adc	r26, r1
    334e:	62 1f       	adc	r22, r18
    3350:	83 9f       	mul	r24, r19
    3352:	a0 0d       	add	r26, r0
    3354:	61 1d       	adc	r22, r1
    3356:	22 1f       	adc	r18, r18
    3358:	74 9f       	mul	r23, r20
    335a:	33 27       	eor	r19, r19
    335c:	a0 0d       	add	r26, r0
    335e:	61 1d       	adc	r22, r1
    3360:	23 1f       	adc	r18, r19
    3362:	84 9f       	mul	r24, r20
    3364:	60 0d       	add	r22, r0
    3366:	21 1d       	adc	r18, r1
    3368:	82 2f       	mov	r24, r18
    336a:	76 2f       	mov	r23, r22
    336c:	6a 2f       	mov	r22, r26
    336e:	11 24       	eor	r1, r1
    3370:	9f 57       	subi	r25, 0x7F	; 127
    3372:	50 40       	sbci	r21, 0x00	; 0
    3374:	9a f0       	brmi	.+38     	; 0x339c <__mulsf3_pse+0x88>
    3376:	f1 f0       	breq	.+60     	; 0x33b4 <__mulsf3_pse+0xa0>
    3378:	88 23       	and	r24, r24
    337a:	4a f0       	brmi	.+18     	; 0x338e <__mulsf3_pse+0x7a>
    337c:	ee 0f       	add	r30, r30
    337e:	ff 1f       	adc	r31, r31
    3380:	bb 1f       	adc	r27, r27
    3382:	66 1f       	adc	r22, r22
    3384:	77 1f       	adc	r23, r23
    3386:	88 1f       	adc	r24, r24
    3388:	91 50       	subi	r25, 0x01	; 1
    338a:	50 40       	sbci	r21, 0x00	; 0
    338c:	a9 f7       	brne	.-22     	; 0x3378 <__mulsf3_pse+0x64>
    338e:	9e 3f       	cpi	r25, 0xFE	; 254
    3390:	51 05       	cpc	r21, r1
    3392:	80 f0       	brcs	.+32     	; 0x33b4 <__mulsf3_pse+0xa0>
    3394:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>
    3398:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__fp_szero>
    339c:	5f 3f       	cpi	r21, 0xFF	; 255
    339e:	e4 f3       	brlt	.-8      	; 0x3398 <__mulsf3_pse+0x84>
    33a0:	98 3e       	cpi	r25, 0xE8	; 232
    33a2:	d4 f3       	brlt	.-12     	; 0x3398 <__mulsf3_pse+0x84>
    33a4:	86 95       	lsr	r24
    33a6:	77 95       	ror	r23
    33a8:	67 95       	ror	r22
    33aa:	b7 95       	ror	r27
    33ac:	f7 95       	ror	r31
    33ae:	e7 95       	ror	r30
    33b0:	9f 5f       	subi	r25, 0xFF	; 255
    33b2:	c1 f7       	brne	.-16     	; 0x33a4 <__mulsf3_pse+0x90>
    33b4:	fe 2b       	or	r31, r30
    33b6:	88 0f       	add	r24, r24
    33b8:	91 1d       	adc	r25, r1
    33ba:	96 95       	lsr	r25
    33bc:	87 95       	ror	r24
    33be:	97 f9       	bld	r25, 7
    33c0:	08 95       	ret

000033c2 <pow>:
    33c2:	fa 01       	movw	r30, r20
    33c4:	ee 0f       	add	r30, r30
    33c6:	ff 1f       	adc	r31, r31
    33c8:	30 96       	adiw	r30, 0x00	; 0
    33ca:	21 05       	cpc	r18, r1
    33cc:	31 05       	cpc	r19, r1
    33ce:	a1 f1       	breq	.+104    	; 0x3438 <pow+0x76>
    33d0:	61 15       	cp	r22, r1
    33d2:	71 05       	cpc	r23, r1
    33d4:	61 f4       	brne	.+24     	; 0x33ee <pow+0x2c>
    33d6:	80 38       	cpi	r24, 0x80	; 128
    33d8:	bf e3       	ldi	r27, 0x3F	; 63
    33da:	9b 07       	cpc	r25, r27
    33dc:	49 f1       	breq	.+82     	; 0x3430 <pow+0x6e>
    33de:	68 94       	set
    33e0:	90 38       	cpi	r25, 0x80	; 128
    33e2:	81 05       	cpc	r24, r1
    33e4:	61 f0       	breq	.+24     	; 0x33fe <pow+0x3c>
    33e6:	80 38       	cpi	r24, 0x80	; 128
    33e8:	bf ef       	ldi	r27, 0xFF	; 255
    33ea:	9b 07       	cpc	r25, r27
    33ec:	41 f0       	breq	.+16     	; 0x33fe <pow+0x3c>
    33ee:	99 23       	and	r25, r25
    33f0:	4a f5       	brpl	.+82     	; 0x3444 <pow+0x82>
    33f2:	ff 3f       	cpi	r31, 0xFF	; 255
    33f4:	e1 05       	cpc	r30, r1
    33f6:	31 05       	cpc	r19, r1
    33f8:	21 05       	cpc	r18, r1
    33fa:	19 f1       	breq	.+70     	; 0x3442 <pow+0x80>
    33fc:	e8 94       	clt
    33fe:	08 94       	sec
    3400:	e7 95       	ror	r30
    3402:	d9 01       	movw	r26, r18
    3404:	aa 23       	and	r26, r26
    3406:	29 f4       	brne	.+10     	; 0x3412 <pow+0x50>
    3408:	ab 2f       	mov	r26, r27
    340a:	be 2f       	mov	r27, r30
    340c:	f8 5f       	subi	r31, 0xF8	; 248
    340e:	d0 f3       	brcs	.-12     	; 0x3404 <pow+0x42>
    3410:	10 c0       	rjmp	.+32     	; 0x3432 <pow+0x70>
    3412:	ff 5f       	subi	r31, 0xFF	; 255
    3414:	70 f4       	brcc	.+28     	; 0x3432 <pow+0x70>
    3416:	a6 95       	lsr	r26
    3418:	e0 f7       	brcc	.-8      	; 0x3412 <pow+0x50>
    341a:	f7 39       	cpi	r31, 0x97	; 151
    341c:	50 f0       	brcs	.+20     	; 0x3432 <pow+0x70>
    341e:	19 f0       	breq	.+6      	; 0x3426 <pow+0x64>
    3420:	ff 3a       	cpi	r31, 0xAF	; 175
    3422:	38 f4       	brcc	.+14     	; 0x3432 <pow+0x70>
    3424:	9f 77       	andi	r25, 0x7F	; 127
    3426:	9f 93       	push	r25
    3428:	0d d0       	rcall	.+26     	; 0x3444 <pow+0x82>
    342a:	0f 90       	pop	r0
    342c:	07 fc       	sbrc	r0, 7
    342e:	90 58       	subi	r25, 0x80	; 128
    3430:	08 95       	ret
    3432:	46 f0       	brts	.+16     	; 0x3444 <pow+0x82>
    3434:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_nan>
    3438:	60 e0       	ldi	r22, 0x00	; 0
    343a:	70 e0       	ldi	r23, 0x00	; 0
    343c:	80 e8       	ldi	r24, 0x80	; 128
    343e:	9f e3       	ldi	r25, 0x3F	; 63
    3440:	08 95       	ret
    3442:	4f e7       	ldi	r20, 0x7F	; 127
    3444:	9f 77       	andi	r25, 0x7F	; 127
    3446:	5f 93       	push	r21
    3448:	4f 93       	push	r20
    344a:	3f 93       	push	r19
    344c:	2f 93       	push	r18
    344e:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <log>
    3452:	2f 91       	pop	r18
    3454:	3f 91       	pop	r19
    3456:	4f 91       	pop	r20
    3458:	5f 91       	pop	r21
    345a:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsf3>
    345e:	0c 94 3e 1a 	jmp	0x347c	; 0x347c <exp>

00003462 <__unordsf2>:
    3462:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__fp_cmp>
    3466:	88 0b       	sbc	r24, r24
    3468:	99 0b       	sbc	r25, r25
    346a:	08 95       	ret
    346c:	29 f4       	brne	.+10     	; 0x3478 <__unordsf2+0x16>
    346e:	16 f0       	brts	.+4      	; 0x3474 <__unordsf2+0x12>
    3470:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>
    3474:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__fp_zero>
    3478:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_nan>

0000347c <exp>:
    347c:	0e 94 4e 19 	call	0x329c	; 0x329c <__fp_splitA>
    3480:	a8 f3       	brcs	.-22     	; 0x346c <__unordsf2+0xa>
    3482:	96 38       	cpi	r25, 0x86	; 134
    3484:	a0 f7       	brcc	.-24     	; 0x346e <__unordsf2+0xc>
    3486:	07 f8       	bld	r0, 7
    3488:	0f 92       	push	r0
    348a:	e8 94       	clt
    348c:	2b e3       	ldi	r18, 0x3B	; 59
    348e:	3a ea       	ldi	r19, 0xAA	; 170
    3490:	48 eb       	ldi	r20, 0xB8	; 184
    3492:	5f e7       	ldi	r21, 0x7F	; 127
    3494:	0e 94 8a 19 	call	0x3314	; 0x3314 <__mulsf3_pse>
    3498:	0f 92       	push	r0
    349a:	0f 92       	push	r0
    349c:	0f 92       	push	r0
    349e:	4d b7       	in	r20, 0x3d	; 61
    34a0:	5e b7       	in	r21, 0x3e	; 62
    34a2:	0f 92       	push	r0
    34a4:	0e 94 29 1b 	call	0x3652	; 0x3652 <modf>
    34a8:	e8 e6       	ldi	r30, 0x68	; 104
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__fp_powser>
    34b0:	4f 91       	pop	r20
    34b2:	5f 91       	pop	r21
    34b4:	ef 91       	pop	r30
    34b6:	ff 91       	pop	r31
    34b8:	e5 95       	asr	r30
    34ba:	ee 1f       	adc	r30, r30
    34bc:	ff 1f       	adc	r31, r31
    34be:	49 f0       	breq	.+18     	; 0x34d2 <exp+0x56>
    34c0:	fe 57       	subi	r31, 0x7E	; 126
    34c2:	e0 68       	ori	r30, 0x80	; 128
    34c4:	44 27       	eor	r20, r20
    34c6:	ee 0f       	add	r30, r30
    34c8:	44 1f       	adc	r20, r20
    34ca:	fa 95       	dec	r31
    34cc:	e1 f7       	brne	.-8      	; 0x34c6 <exp+0x4a>
    34ce:	41 95       	neg	r20
    34d0:	55 0b       	sbc	r21, r21
    34d2:	0e 94 a3 1a 	call	0x3546	; 0x3546 <ldexp>
    34d6:	0f 90       	pop	r0
    34d8:	07 fe       	sbrs	r0, 7
    34da:	0c 94 97 1a 	jmp	0x352e	; 0x352e <inverse>
    34de:	08 95       	ret

000034e0 <__fp_powser>:
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	1f 93       	push	r17
    34e6:	0f 93       	push	r16
    34e8:	ff 92       	push	r15
    34ea:	ef 92       	push	r14
    34ec:	df 92       	push	r13
    34ee:	7b 01       	movw	r14, r22
    34f0:	8c 01       	movw	r16, r24
    34f2:	68 94       	set
    34f4:	06 c0       	rjmp	.+12     	; 0x3502 <__fp_powser+0x22>
    34f6:	da 2e       	mov	r13, r26
    34f8:	ef 01       	movw	r28, r30
    34fa:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3x>
    34fe:	fe 01       	movw	r30, r28
    3500:	e8 94       	clt
    3502:	a5 91       	lpm	r26, Z+
    3504:	25 91       	lpm	r18, Z+
    3506:	35 91       	lpm	r19, Z+
    3508:	45 91       	lpm	r20, Z+
    350a:	55 91       	lpm	r21, Z+
    350c:	a6 f3       	brts	.-24     	; 0x34f6 <__fp_powser+0x16>
    350e:	ef 01       	movw	r28, r30
    3510:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__addsf3x>
    3514:	fe 01       	movw	r30, r28
    3516:	97 01       	movw	r18, r14
    3518:	a8 01       	movw	r20, r16
    351a:	da 94       	dec	r13
    351c:	69 f7       	brne	.-38     	; 0x34f8 <__fp_powser+0x18>
    351e:	df 90       	pop	r13
    3520:	ef 90       	pop	r14
    3522:	ff 90       	pop	r15
    3524:	0f 91       	pop	r16
    3526:	1f 91       	pop	r17
    3528:	cf 91       	pop	r28
    352a:	df 91       	pop	r29
    352c:	08 95       	ret

0000352e <inverse>:
    352e:	9b 01       	movw	r18, r22
    3530:	ac 01       	movw	r20, r24
    3532:	60 e0       	ldi	r22, 0x00	; 0
    3534:	70 e0       	ldi	r23, 0x00	; 0
    3536:	80 e8       	ldi	r24, 0x80	; 128
    3538:	9f e3       	ldi	r25, 0x3F	; 63
    353a:	0c 94 15 18 	jmp	0x302a	; 0x302a <__divsf3>
    353e:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>
    3542:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__fp_mpack>

00003546 <ldexp>:
    3546:	0e 94 4e 19 	call	0x329c	; 0x329c <__fp_splitA>
    354a:	d8 f3       	brcs	.-10     	; 0x3542 <inverse+0x14>
    354c:	99 23       	and	r25, r25
    354e:	c9 f3       	breq	.-14     	; 0x3542 <inverse+0x14>
    3550:	94 0f       	add	r25, r20
    3552:	51 1d       	adc	r21, r1
    3554:	a3 f3       	brvs	.-24     	; 0x353e <inverse+0x10>
    3556:	91 50       	subi	r25, 0x01	; 1
    3558:	50 40       	sbci	r21, 0x00	; 0
    355a:	94 f0       	brlt	.+36     	; 0x3580 <ldexp+0x3a>
    355c:	59 f0       	breq	.+22     	; 0x3574 <ldexp+0x2e>
    355e:	88 23       	and	r24, r24
    3560:	32 f0       	brmi	.+12     	; 0x356e <ldexp+0x28>
    3562:	66 0f       	add	r22, r22
    3564:	77 1f       	adc	r23, r23
    3566:	88 1f       	adc	r24, r24
    3568:	91 50       	subi	r25, 0x01	; 1
    356a:	50 40       	sbci	r21, 0x00	; 0
    356c:	c1 f7       	brne	.-16     	; 0x355e <ldexp+0x18>
    356e:	9e 3f       	cpi	r25, 0xFE	; 254
    3570:	51 05       	cpc	r21, r1
    3572:	2c f7       	brge	.-54     	; 0x353e <inverse+0x10>
    3574:	88 0f       	add	r24, r24
    3576:	91 1d       	adc	r25, r1
    3578:	96 95       	lsr	r25
    357a:	87 95       	ror	r24
    357c:	97 f9       	bld	r25, 7
    357e:	08 95       	ret
    3580:	5f 3f       	cpi	r21, 0xFF	; 255
    3582:	ac f0       	brlt	.+42     	; 0x35ae <ldexp+0x68>
    3584:	98 3e       	cpi	r25, 0xE8	; 232
    3586:	9c f0       	brlt	.+38     	; 0x35ae <ldexp+0x68>
    3588:	bb 27       	eor	r27, r27
    358a:	86 95       	lsr	r24
    358c:	77 95       	ror	r23
    358e:	67 95       	ror	r22
    3590:	b7 95       	ror	r27
    3592:	08 f4       	brcc	.+2      	; 0x3596 <ldexp+0x50>
    3594:	b1 60       	ori	r27, 0x01	; 1
    3596:	93 95       	inc	r25
    3598:	c1 f7       	brne	.-16     	; 0x358a <ldexp+0x44>
    359a:	bb 0f       	add	r27, r27
    359c:	58 f7       	brcc	.-42     	; 0x3574 <ldexp+0x2e>
    359e:	11 f4       	brne	.+4      	; 0x35a4 <ldexp+0x5e>
    35a0:	60 ff       	sbrs	r22, 0
    35a2:	e8 cf       	rjmp	.-48     	; 0x3574 <ldexp+0x2e>
    35a4:	6f 5f       	subi	r22, 0xFF	; 255
    35a6:	7f 4f       	sbci	r23, 0xFF	; 255
    35a8:	8f 4f       	sbci	r24, 0xFF	; 255
    35aa:	9f 4f       	sbci	r25, 0xFF	; 255
    35ac:	e3 cf       	rjmp	.-58     	; 0x3574 <ldexp+0x2e>
    35ae:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__fp_szero>
    35b2:	16 f0       	brts	.+4      	; 0x35b8 <ldexp+0x72>
    35b4:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__fp_mpack>
    35b8:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_nan>
    35bc:	68 94       	set
    35be:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>

000035c2 <log>:
    35c2:	0e 94 4e 19 	call	0x329c	; 0x329c <__fp_splitA>
    35c6:	a8 f3       	brcs	.-22     	; 0x35b2 <ldexp+0x6c>
    35c8:	99 23       	and	r25, r25
    35ca:	c1 f3       	breq	.-16     	; 0x35bc <ldexp+0x76>
    35cc:	ae f3       	brts	.-22     	; 0x35b8 <ldexp+0x72>
    35ce:	df 93       	push	r29
    35d0:	cf 93       	push	r28
    35d2:	1f 93       	push	r17
    35d4:	0f 93       	push	r16
    35d6:	ff 92       	push	r15
    35d8:	c9 2f       	mov	r28, r25
    35da:	dd 27       	eor	r29, r29
    35dc:	88 23       	and	r24, r24
    35de:	2a f0       	brmi	.+10     	; 0x35ea <log+0x28>
    35e0:	21 97       	sbiw	r28, 0x01	; 1
    35e2:	66 0f       	add	r22, r22
    35e4:	77 1f       	adc	r23, r23
    35e6:	88 1f       	adc	r24, r24
    35e8:	da f7       	brpl	.-10     	; 0x35e0 <log+0x1e>
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	40 e8       	ldi	r20, 0x80	; 128
    35f0:	5f eb       	ldi	r21, 0xBF	; 191
    35f2:	9f e3       	ldi	r25, 0x3F	; 63
    35f4:	88 39       	cpi	r24, 0x98	; 152
    35f6:	20 f0       	brcs	.+8      	; 0x3600 <log+0x3e>
    35f8:	80 3e       	cpi	r24, 0xE0	; 224
    35fa:	38 f0       	brcs	.+14     	; 0x360a <log+0x48>
    35fc:	21 96       	adiw	r28, 0x01	; 1
    35fe:	8f 77       	andi	r24, 0x7F	; 127
    3600:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__addsf3>
    3604:	e0 e9       	ldi	r30, 0x90	; 144
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	04 c0       	rjmp	.+8      	; 0x3612 <log+0x50>
    360a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__addsf3>
    360e:	ed eb       	ldi	r30, 0xBD	; 189
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__fp_powser>
    3616:	8b 01       	movw	r16, r22
    3618:	be 01       	movw	r22, r28
    361a:	ec 01       	movw	r28, r24
    361c:	fb 2e       	mov	r15, r27
    361e:	6f 57       	subi	r22, 0x7F	; 127
    3620:	71 09       	sbc	r23, r1
    3622:	75 95       	asr	r23
    3624:	77 1f       	adc	r23, r23
    3626:	88 0b       	sbc	r24, r24
    3628:	99 0b       	sbc	r25, r25
    362a:	0e 94 bf 18 	call	0x317e	; 0x317e <__floatsisf>
    362e:	28 e1       	ldi	r18, 0x18	; 24
    3630:	32 e7       	ldi	r19, 0x72	; 114
    3632:	41 e3       	ldi	r20, 0x31	; 49
    3634:	5f e3       	ldi	r21, 0x3F	; 63
    3636:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3x>
    363a:	af 2d       	mov	r26, r15
    363c:	98 01       	movw	r18, r16
    363e:	ae 01       	movw	r20, r28
    3640:	ff 90       	pop	r15
    3642:	0f 91       	pop	r16
    3644:	1f 91       	pop	r17
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__addsf3x>
    364e:	0c 94 35 19 	jmp	0x326a	; 0x326a <__fp_round>

00003652 <modf>:
    3652:	fa 01       	movw	r30, r20
    3654:	dc 01       	movw	r26, r24
    3656:	aa 0f       	add	r26, r26
    3658:	bb 1f       	adc	r27, r27
    365a:	9b 01       	movw	r18, r22
    365c:	ac 01       	movw	r20, r24
    365e:	bf 57       	subi	r27, 0x7F	; 127
    3660:	28 f4       	brcc	.+10     	; 0x366c <modf+0x1a>
    3662:	22 27       	eor	r18, r18
    3664:	33 27       	eor	r19, r19
    3666:	44 27       	eor	r20, r20
    3668:	50 78       	andi	r21, 0x80	; 128
    366a:	20 c0       	rjmp	.+64     	; 0x36ac <modf+0x5a>
    366c:	b7 51       	subi	r27, 0x17	; 23
    366e:	90 f4       	brcc	.+36     	; 0x3694 <modf+0x42>
    3670:	ab 2f       	mov	r26, r27
    3672:	00 24       	eor	r0, r0
    3674:	46 95       	lsr	r20
    3676:	37 95       	ror	r19
    3678:	27 95       	ror	r18
    367a:	01 1c       	adc	r0, r1
    367c:	a3 95       	inc	r26
    367e:	d2 f3       	brmi	.-12     	; 0x3674 <modf+0x22>
    3680:	00 20       	and	r0, r0
    3682:	71 f0       	breq	.+28     	; 0x36a0 <modf+0x4e>
    3684:	22 0f       	add	r18, r18
    3686:	33 1f       	adc	r19, r19
    3688:	44 1f       	adc	r20, r20
    368a:	b3 95       	inc	r27
    368c:	da f3       	brmi	.-10     	; 0x3684 <modf+0x32>
    368e:	0e d0       	rcall	.+28     	; 0x36ac <modf+0x5a>
    3690:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__subsf3>
    3694:	61 30       	cpi	r22, 0x01	; 1
    3696:	71 05       	cpc	r23, r1
    3698:	a0 e8       	ldi	r26, 0x80	; 128
    369a:	8a 07       	cpc	r24, r26
    369c:	b9 46       	sbci	r27, 0x69	; 105
    369e:	30 f4       	brcc	.+12     	; 0x36ac <modf+0x5a>
    36a0:	9b 01       	movw	r18, r22
    36a2:	ac 01       	movw	r20, r24
    36a4:	66 27       	eor	r22, r22
    36a6:	77 27       	eor	r23, r23
    36a8:	88 27       	eor	r24, r24
    36aa:	90 78       	andi	r25, 0x80	; 128
    36ac:	30 96       	adiw	r30, 0x00	; 0
    36ae:	21 f0       	breq	.+8      	; 0x36b8 <modf+0x66>
    36b0:	20 83       	st	Z, r18
    36b2:	31 83       	std	Z+1, r19	; 0x01
    36b4:	42 83       	std	Z+2, r20	; 0x02
    36b6:	53 83       	std	Z+3, r21	; 0x03
    36b8:	08 95       	ret

000036ba <__fp_mpack>:
    36ba:	9f 3f       	cpi	r25, 0xFF	; 255
    36bc:	31 f0       	breq	.+12     	; 0x36ca <__fp_mpack_finite+0xc>

000036be <__fp_mpack_finite>:
    36be:	91 50       	subi	r25, 0x01	; 1
    36c0:	20 f4       	brcc	.+8      	; 0x36ca <__fp_mpack_finite+0xc>
    36c2:	87 95       	ror	r24
    36c4:	77 95       	ror	r23
    36c6:	67 95       	ror	r22
    36c8:	b7 95       	ror	r27
    36ca:	88 0f       	add	r24, r24
    36cc:	91 1d       	adc	r25, r1
    36ce:	96 95       	lsr	r25
    36d0:	87 95       	ror	r24
    36d2:	97 f9       	bld	r25, 7
    36d4:	08 95       	ret

000036d6 <__udivmodsi4>:
    36d6:	a1 e2       	ldi	r26, 0x21	; 33
    36d8:	1a 2e       	mov	r1, r26
    36da:	aa 1b       	sub	r26, r26
    36dc:	bb 1b       	sub	r27, r27
    36de:	fd 01       	movw	r30, r26
    36e0:	0d c0       	rjmp	.+26     	; 0x36fc <__udivmodsi4_ep>

000036e2 <__udivmodsi4_loop>:
    36e2:	aa 1f       	adc	r26, r26
    36e4:	bb 1f       	adc	r27, r27
    36e6:	ee 1f       	adc	r30, r30
    36e8:	ff 1f       	adc	r31, r31
    36ea:	a2 17       	cp	r26, r18
    36ec:	b3 07       	cpc	r27, r19
    36ee:	e4 07       	cpc	r30, r20
    36f0:	f5 07       	cpc	r31, r21
    36f2:	20 f0       	brcs	.+8      	; 0x36fc <__udivmodsi4_ep>
    36f4:	a2 1b       	sub	r26, r18
    36f6:	b3 0b       	sbc	r27, r19
    36f8:	e4 0b       	sbc	r30, r20
    36fa:	f5 0b       	sbc	r31, r21

000036fc <__udivmodsi4_ep>:
    36fc:	66 1f       	adc	r22, r22
    36fe:	77 1f       	adc	r23, r23
    3700:	88 1f       	adc	r24, r24
    3702:	99 1f       	adc	r25, r25
    3704:	1a 94       	dec	r1
    3706:	69 f7       	brne	.-38     	; 0x36e2 <__udivmodsi4_loop>
    3708:	60 95       	com	r22
    370a:	70 95       	com	r23
    370c:	80 95       	com	r24
    370e:	90 95       	com	r25
    3710:	9b 01       	movw	r18, r22
    3712:	ac 01       	movw	r20, r24
    3714:	bd 01       	movw	r22, r26
    3716:	cf 01       	movw	r24, r30
    3718:	08 95       	ret

0000371a <__tablejump2__>:
    371a:	ee 0f       	add	r30, r30
    371c:	ff 1f       	adc	r31, r31
    371e:	05 90       	lpm	r0, Z+
    3720:	f4 91       	lpm	r31, Z
    3722:	e0 2d       	mov	r30, r0
    3724:	09 94       	ijmp

00003726 <sprintf>:
    3726:	ae e0       	ldi	r26, 0x0E	; 14
    3728:	b0 e0       	ldi	r27, 0x00	; 0
    372a:	e9 e9       	ldi	r30, 0x99	; 153
    372c:	fb e1       	ldi	r31, 0x1B	; 27
    372e:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <__prologue_saves__+0x1c>
    3732:	0d 89       	ldd	r16, Y+21	; 0x15
    3734:	1e 89       	ldd	r17, Y+22	; 0x16
    3736:	86 e0       	ldi	r24, 0x06	; 6
    3738:	8c 83       	std	Y+4, r24	; 0x04
    373a:	1a 83       	std	Y+2, r17	; 0x02
    373c:	09 83       	std	Y+1, r16	; 0x01
    373e:	8f ef       	ldi	r24, 0xFF	; 255
    3740:	9f e7       	ldi	r25, 0x7F	; 127
    3742:	9e 83       	std	Y+6, r25	; 0x06
    3744:	8d 83       	std	Y+5, r24	; 0x05
    3746:	ae 01       	movw	r20, r28
    3748:	47 5e       	subi	r20, 0xE7	; 231
    374a:	5f 4f       	sbci	r21, 0xFF	; 255
    374c:	6f 89       	ldd	r22, Y+23	; 0x17
    374e:	78 8d       	ldd	r23, Y+24	; 0x18
    3750:	ce 01       	movw	r24, r28
    3752:	01 96       	adiw	r24, 0x01	; 1
    3754:	0e 94 b6 1b 	call	0x376c	; 0x376c <vfprintf>
    3758:	2f 81       	ldd	r18, Y+7	; 0x07
    375a:	38 85       	ldd	r19, Y+8	; 0x08
    375c:	02 0f       	add	r16, r18
    375e:	13 1f       	adc	r17, r19
    3760:	f8 01       	movw	r30, r16
    3762:	10 82       	st	Z, r1
    3764:	2e 96       	adiw	r28, 0x0e	; 14
    3766:	e4 e0       	ldi	r30, 0x04	; 4
    3768:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__epilogue_restores__+0x1c>

0000376c <vfprintf>:
    376c:	ab e0       	ldi	r26, 0x0B	; 11
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	ec eb       	ldi	r30, 0xBC	; 188
    3772:	fb e1       	ldi	r31, 0x1B	; 27
    3774:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__prologue_saves__>
    3778:	7c 01       	movw	r14, r24
    377a:	3b 01       	movw	r6, r22
    377c:	8a 01       	movw	r16, r20
    377e:	fc 01       	movw	r30, r24
    3780:	17 82       	std	Z+7, r1	; 0x07
    3782:	16 82       	std	Z+6, r1	; 0x06
    3784:	83 81       	ldd	r24, Z+3	; 0x03
    3786:	81 ff       	sbrs	r24, 1
    3788:	c8 c1       	rjmp	.+912    	; 0x3b1a <vfprintf+0x3ae>
    378a:	ce 01       	movw	r24, r28
    378c:	01 96       	adiw	r24, 0x01	; 1
    378e:	5c 01       	movw	r10, r24
    3790:	f7 01       	movw	r30, r14
    3792:	93 81       	ldd	r25, Z+3	; 0x03
    3794:	f3 01       	movw	r30, r6
    3796:	93 fd       	sbrc	r25, 3
    3798:	85 91       	lpm	r24, Z+
    379a:	93 ff       	sbrs	r25, 3
    379c:	81 91       	ld	r24, Z+
    379e:	3f 01       	movw	r6, r30
    37a0:	88 23       	and	r24, r24
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <vfprintf+0x3a>
    37a4:	53 c1       	rjmp	.+678    	; 0x3a4c <vfprintf+0x2e0>
    37a6:	85 32       	cpi	r24, 0x25	; 37
    37a8:	39 f4       	brne	.+14     	; 0x37b8 <vfprintf+0x4c>
    37aa:	93 fd       	sbrc	r25, 3
    37ac:	85 91       	lpm	r24, Z+
    37ae:	93 ff       	sbrs	r25, 3
    37b0:	81 91       	ld	r24, Z+
    37b2:	3f 01       	movw	r6, r30
    37b4:	85 32       	cpi	r24, 0x25	; 37
    37b6:	29 f4       	brne	.+10     	; 0x37c2 <vfprintf+0x56>
    37b8:	b7 01       	movw	r22, r14
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <fputc>
    37c0:	e7 cf       	rjmp	.-50     	; 0x3790 <vfprintf+0x24>
    37c2:	91 2c       	mov	r9, r1
    37c4:	21 2c       	mov	r2, r1
    37c6:	31 2c       	mov	r3, r1
    37c8:	ff e1       	ldi	r31, 0x1F	; 31
    37ca:	f3 15       	cp	r31, r3
    37cc:	38 f0       	brcs	.+14     	; 0x37dc <vfprintf+0x70>
    37ce:	8b 32       	cpi	r24, 0x2B	; 43
    37d0:	11 f1       	breq	.+68     	; 0x3816 <vfprintf+0xaa>
    37d2:	90 f4       	brcc	.+36     	; 0x37f8 <vfprintf+0x8c>
    37d4:	80 32       	cpi	r24, 0x20	; 32
    37d6:	09 f1       	breq	.+66     	; 0x381a <vfprintf+0xae>
    37d8:	83 32       	cpi	r24, 0x23	; 35
    37da:	29 f1       	breq	.+74     	; 0x3826 <vfprintf+0xba>
    37dc:	37 fc       	sbrc	r3, 7
    37de:	3c c0       	rjmp	.+120    	; 0x3858 <vfprintf+0xec>
    37e0:	20 ed       	ldi	r18, 0xD0	; 208
    37e2:	28 0f       	add	r18, r24
    37e4:	2a 30       	cpi	r18, 0x0A	; 10
    37e6:	50 f5       	brcc	.+84     	; 0x383c <vfprintf+0xd0>
    37e8:	36 fe       	sbrs	r3, 6
    37ea:	20 c0       	rjmp	.+64     	; 0x382c <vfprintf+0xc0>
    37ec:	8a e0       	ldi	r24, 0x0A	; 10
    37ee:	98 9e       	mul	r9, r24
    37f0:	20 0d       	add	r18, r0
    37f2:	11 24       	eor	r1, r1
    37f4:	92 2e       	mov	r9, r18
    37f6:	06 c0       	rjmp	.+12     	; 0x3804 <vfprintf+0x98>
    37f8:	8d 32       	cpi	r24, 0x2D	; 45
    37fa:	91 f0       	breq	.+36     	; 0x3820 <vfprintf+0xb4>
    37fc:	80 33       	cpi	r24, 0x30	; 48
    37fe:	71 f7       	brne	.-36     	; 0x37dc <vfprintf+0x70>
    3800:	68 94       	set
    3802:	30 f8       	bld	r3, 0
    3804:	f3 01       	movw	r30, r6
    3806:	93 fd       	sbrc	r25, 3
    3808:	85 91       	lpm	r24, Z+
    380a:	93 ff       	sbrs	r25, 3
    380c:	81 91       	ld	r24, Z+
    380e:	3f 01       	movw	r6, r30
    3810:	81 11       	cpse	r24, r1
    3812:	da cf       	rjmp	.-76     	; 0x37c8 <vfprintf+0x5c>
    3814:	21 c0       	rjmp	.+66     	; 0x3858 <vfprintf+0xec>
    3816:	68 94       	set
    3818:	31 f8       	bld	r3, 1
    381a:	68 94       	set
    381c:	32 f8       	bld	r3, 2
    381e:	f2 cf       	rjmp	.-28     	; 0x3804 <vfprintf+0x98>
    3820:	68 94       	set
    3822:	33 f8       	bld	r3, 3
    3824:	ef cf       	rjmp	.-34     	; 0x3804 <vfprintf+0x98>
    3826:	68 94       	set
    3828:	34 f8       	bld	r3, 4
    382a:	ec cf       	rjmp	.-40     	; 0x3804 <vfprintf+0x98>
    382c:	ea e0       	ldi	r30, 0x0A	; 10
    382e:	2e 9e       	mul	r2, r30
    3830:	20 0d       	add	r18, r0
    3832:	11 24       	eor	r1, r1
    3834:	22 2e       	mov	r2, r18
    3836:	68 94       	set
    3838:	35 f8       	bld	r3, 5
    383a:	e4 cf       	rjmp	.-56     	; 0x3804 <vfprintf+0x98>
    383c:	8e 32       	cpi	r24, 0x2E	; 46
    383e:	29 f4       	brne	.+10     	; 0x384a <vfprintf+0xde>
    3840:	36 fc       	sbrc	r3, 6
    3842:	04 c1       	rjmp	.+520    	; 0x3a4c <vfprintf+0x2e0>
    3844:	68 94       	set
    3846:	36 f8       	bld	r3, 6
    3848:	dd cf       	rjmp	.-70     	; 0x3804 <vfprintf+0x98>
    384a:	8c 36       	cpi	r24, 0x6C	; 108
    384c:	19 f4       	brne	.+6      	; 0x3854 <vfprintf+0xe8>
    384e:	68 94       	set
    3850:	37 f8       	bld	r3, 7
    3852:	d8 cf       	rjmp	.-80     	; 0x3804 <vfprintf+0x98>
    3854:	88 36       	cpi	r24, 0x68	; 104
    3856:	b1 f2       	breq	.-84     	; 0x3804 <vfprintf+0x98>
    3858:	98 2f       	mov	r25, r24
    385a:	9f 7d       	andi	r25, 0xDF	; 223
    385c:	95 54       	subi	r25, 0x45	; 69
    385e:	93 30       	cpi	r25, 0x03	; 3
    3860:	e0 f0       	brcs	.+56     	; 0x389a <vfprintf+0x12e>
    3862:	83 36       	cpi	r24, 0x63	; 99
    3864:	a1 f1       	breq	.+104    	; 0x38ce <vfprintf+0x162>
    3866:	83 37       	cpi	r24, 0x73	; 115
    3868:	c1 f1       	breq	.+112    	; 0x38da <vfprintf+0x16e>
    386a:	83 35       	cpi	r24, 0x53	; 83
    386c:	09 f0       	breq	.+2      	; 0x3870 <vfprintf+0x104>
    386e:	63 c0       	rjmp	.+198    	; 0x3936 <vfprintf+0x1ca>
    3870:	28 01       	movw	r4, r16
    3872:	f2 e0       	ldi	r31, 0x02	; 2
    3874:	4f 0e       	add	r4, r31
    3876:	51 1c       	adc	r5, r1
    3878:	f8 01       	movw	r30, r16
    387a:	c0 80       	ld	r12, Z
    387c:	d1 80       	ldd	r13, Z+1	; 0x01
    387e:	69 2d       	mov	r22, r9
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	36 fc       	sbrc	r3, 6
    3884:	02 c0       	rjmp	.+4      	; 0x388a <vfprintf+0x11e>
    3886:	6f ef       	ldi	r22, 0xFF	; 255
    3888:	7f ef       	ldi	r23, 0xFF	; 255
    388a:	c6 01       	movw	r24, r12
    388c:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <strnlen_P>
    3890:	4c 01       	movw	r8, r24
    3892:	68 94       	set
    3894:	37 f8       	bld	r3, 7
    3896:	82 01       	movw	r16, r4
    3898:	0a c0       	rjmp	.+20     	; 0x38ae <vfprintf+0x142>
    389a:	0c 5f       	subi	r16, 0xFC	; 252
    389c:	1f 4f       	sbci	r17, 0xFF	; 255
    389e:	ff e3       	ldi	r31, 0x3F	; 63
    38a0:	f9 83       	std	Y+1, r31	; 0x01
    38a2:	88 24       	eor	r8, r8
    38a4:	83 94       	inc	r8
    38a6:	91 2c       	mov	r9, r1
    38a8:	65 01       	movw	r12, r10
    38aa:	e8 94       	clt
    38ac:	37 f8       	bld	r3, 7
    38ae:	33 fe       	sbrs	r3, 3
    38b0:	2d c0       	rjmp	.+90     	; 0x390c <vfprintf+0x1a0>
    38b2:	52 2c       	mov	r5, r2
    38b4:	81 14       	cp	r8, r1
    38b6:	91 04       	cpc	r9, r1
    38b8:	71 f5       	brne	.+92     	; 0x3916 <vfprintf+0x1aa>
    38ba:	55 20       	and	r5, r5
    38bc:	09 f4       	brne	.+2      	; 0x38c0 <vfprintf+0x154>
    38be:	68 cf       	rjmp	.-304    	; 0x3790 <vfprintf+0x24>
    38c0:	b7 01       	movw	r22, r14
    38c2:	80 e2       	ldi	r24, 0x20	; 32
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <fputc>
    38ca:	5a 94       	dec	r5
    38cc:	f6 cf       	rjmp	.-20     	; 0x38ba <vfprintf+0x14e>
    38ce:	f8 01       	movw	r30, r16
    38d0:	80 81       	ld	r24, Z
    38d2:	89 83       	std	Y+1, r24	; 0x01
    38d4:	0e 5f       	subi	r16, 0xFE	; 254
    38d6:	1f 4f       	sbci	r17, 0xFF	; 255
    38d8:	e4 cf       	rjmp	.-56     	; 0x38a2 <vfprintf+0x136>
    38da:	28 01       	movw	r4, r16
    38dc:	f2 e0       	ldi	r31, 0x02	; 2
    38de:	4f 0e       	add	r4, r31
    38e0:	51 1c       	adc	r5, r1
    38e2:	f8 01       	movw	r30, r16
    38e4:	c0 80       	ld	r12, Z
    38e6:	d1 80       	ldd	r13, Z+1	; 0x01
    38e8:	69 2d       	mov	r22, r9
    38ea:	70 e0       	ldi	r23, 0x00	; 0
    38ec:	36 fc       	sbrc	r3, 6
    38ee:	02 c0       	rjmp	.+4      	; 0x38f4 <vfprintf+0x188>
    38f0:	6f ef       	ldi	r22, 0xFF	; 255
    38f2:	7f ef       	ldi	r23, 0xFF	; 255
    38f4:	c6 01       	movw	r24, r12
    38f6:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <strnlen>
    38fa:	4c 01       	movw	r8, r24
    38fc:	82 01       	movw	r16, r4
    38fe:	d5 cf       	rjmp	.-86     	; 0x38aa <vfprintf+0x13e>
    3900:	b7 01       	movw	r22, r14
    3902:	80 e2       	ldi	r24, 0x20	; 32
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <fputc>
    390a:	2a 94       	dec	r2
    390c:	28 14       	cp	r2, r8
    390e:	19 04       	cpc	r1, r9
    3910:	09 f0       	breq	.+2      	; 0x3914 <vfprintf+0x1a8>
    3912:	b0 f7       	brcc	.-20     	; 0x3900 <vfprintf+0x194>
    3914:	ce cf       	rjmp	.-100    	; 0x38b2 <vfprintf+0x146>
    3916:	f6 01       	movw	r30, r12
    3918:	37 fc       	sbrc	r3, 7
    391a:	85 91       	lpm	r24, Z+
    391c:	37 fe       	sbrs	r3, 7
    391e:	81 91       	ld	r24, Z+
    3920:	6f 01       	movw	r12, r30
    3922:	b7 01       	movw	r22, r14
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <fputc>
    392a:	51 10       	cpse	r5, r1
    392c:	5a 94       	dec	r5
    392e:	f1 e0       	ldi	r31, 0x01	; 1
    3930:	8f 1a       	sub	r8, r31
    3932:	91 08       	sbc	r9, r1
    3934:	bf cf       	rjmp	.-130    	; 0x38b4 <vfprintf+0x148>
    3936:	84 36       	cpi	r24, 0x64	; 100
    3938:	19 f0       	breq	.+6      	; 0x3940 <vfprintf+0x1d4>
    393a:	89 36       	cpi	r24, 0x69	; 105
    393c:	09 f0       	breq	.+2      	; 0x3940 <vfprintf+0x1d4>
    393e:	77 c0       	rjmp	.+238    	; 0x3a2e <vfprintf+0x2c2>
    3940:	f8 01       	movw	r30, r16
    3942:	37 fe       	sbrs	r3, 7
    3944:	6b c0       	rjmp	.+214    	; 0x3a1c <vfprintf+0x2b0>
    3946:	60 81       	ld	r22, Z
    3948:	71 81       	ldd	r23, Z+1	; 0x01
    394a:	82 81       	ldd	r24, Z+2	; 0x02
    394c:	93 81       	ldd	r25, Z+3	; 0x03
    394e:	0c 5f       	subi	r16, 0xFC	; 252
    3950:	1f 4f       	sbci	r17, 0xFF	; 255
    3952:	f3 2d       	mov	r31, r3
    3954:	ff 76       	andi	r31, 0x6F	; 111
    3956:	3f 2e       	mov	r3, r31
    3958:	97 ff       	sbrs	r25, 7
    395a:	09 c0       	rjmp	.+18     	; 0x396e <vfprintf+0x202>
    395c:	90 95       	com	r25
    395e:	80 95       	com	r24
    3960:	70 95       	com	r23
    3962:	61 95       	neg	r22
    3964:	7f 4f       	sbci	r23, 0xFF	; 255
    3966:	8f 4f       	sbci	r24, 0xFF	; 255
    3968:	9f 4f       	sbci	r25, 0xFF	; 255
    396a:	68 94       	set
    396c:	37 f8       	bld	r3, 7
    396e:	2a e0       	ldi	r18, 0x0A	; 10
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	a5 01       	movw	r20, r10
    3974:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__ultoa_invert>
    3978:	c8 2e       	mov	r12, r24
    397a:	ca 18       	sub	r12, r10
    397c:	8c 2c       	mov	r8, r12
    397e:	43 2c       	mov	r4, r3
    3980:	36 fe       	sbrs	r3, 6
    3982:	0c c0       	rjmp	.+24     	; 0x399c <vfprintf+0x230>
    3984:	e8 94       	clt
    3986:	40 f8       	bld	r4, 0
    3988:	c9 14       	cp	r12, r9
    398a:	40 f4       	brcc	.+16     	; 0x399c <vfprintf+0x230>
    398c:	34 fe       	sbrs	r3, 4
    398e:	05 c0       	rjmp	.+10     	; 0x399a <vfprintf+0x22e>
    3990:	32 fc       	sbrc	r3, 2
    3992:	03 c0       	rjmp	.+6      	; 0x399a <vfprintf+0x22e>
    3994:	f3 2d       	mov	r31, r3
    3996:	fe 7e       	andi	r31, 0xEE	; 238
    3998:	4f 2e       	mov	r4, r31
    399a:	89 2c       	mov	r8, r9
    399c:	44 fe       	sbrs	r4, 4
    399e:	95 c0       	rjmp	.+298    	; 0x3aca <vfprintf+0x35e>
    39a0:	fe 01       	movw	r30, r28
    39a2:	ec 0d       	add	r30, r12
    39a4:	f1 1d       	adc	r31, r1
    39a6:	80 81       	ld	r24, Z
    39a8:	80 33       	cpi	r24, 0x30	; 48
    39aa:	09 f0       	breq	.+2      	; 0x39ae <vfprintf+0x242>
    39ac:	87 c0       	rjmp	.+270    	; 0x3abc <vfprintf+0x350>
    39ae:	24 2d       	mov	r18, r4
    39b0:	29 7e       	andi	r18, 0xE9	; 233
    39b2:	42 2e       	mov	r4, r18
    39b4:	84 2d       	mov	r24, r4
    39b6:	88 70       	andi	r24, 0x08	; 8
    39b8:	58 2e       	mov	r5, r24
    39ba:	43 fc       	sbrc	r4, 3
    39bc:	95 c0       	rjmp	.+298    	; 0x3ae8 <vfprintf+0x37c>
    39be:	40 fe       	sbrs	r4, 0
    39c0:	8f c0       	rjmp	.+286    	; 0x3ae0 <vfprintf+0x374>
    39c2:	9c 2c       	mov	r9, r12
    39c4:	82 14       	cp	r8, r2
    39c6:	18 f4       	brcc	.+6      	; 0x39ce <vfprintf+0x262>
    39c8:	2c 0c       	add	r2, r12
    39ca:	92 2c       	mov	r9, r2
    39cc:	98 18       	sub	r9, r8
    39ce:	44 fe       	sbrs	r4, 4
    39d0:	91 c0       	rjmp	.+290    	; 0x3af4 <vfprintf+0x388>
    39d2:	b7 01       	movw	r22, r14
    39d4:	80 e3       	ldi	r24, 0x30	; 48
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <fputc>
    39dc:	42 fe       	sbrs	r4, 2
    39de:	09 c0       	rjmp	.+18     	; 0x39f2 <vfprintf+0x286>
    39e0:	88 e7       	ldi	r24, 0x78	; 120
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	41 fe       	sbrs	r4, 1
    39e6:	02 c0       	rjmp	.+4      	; 0x39ec <vfprintf+0x280>
    39e8:	88 e5       	ldi	r24, 0x58	; 88
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	b7 01       	movw	r22, r14
    39ee:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <fputc>
    39f2:	c9 14       	cp	r12, r9
    39f4:	08 f4       	brcc	.+2      	; 0x39f8 <vfprintf+0x28c>
    39f6:	8a c0       	rjmp	.+276    	; 0x3b0c <vfprintf+0x3a0>
    39f8:	ca 94       	dec	r12
    39fa:	d1 2c       	mov	r13, r1
    39fc:	9f ef       	ldi	r25, 0xFF	; 255
    39fe:	c9 1a       	sub	r12, r25
    3a00:	d9 0a       	sbc	r13, r25
    3a02:	ca 0c       	add	r12, r10
    3a04:	db 1c       	adc	r13, r11
    3a06:	f6 01       	movw	r30, r12
    3a08:	82 91       	ld	r24, -Z
    3a0a:	6f 01       	movw	r12, r30
    3a0c:	b7 01       	movw	r22, r14
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <fputc>
    3a14:	ac 14       	cp	r10, r12
    3a16:	bd 04       	cpc	r11, r13
    3a18:	b1 f7       	brne	.-20     	; 0x3a06 <vfprintf+0x29a>
    3a1a:	4f cf       	rjmp	.-354    	; 0x38ba <vfprintf+0x14e>
    3a1c:	60 81       	ld	r22, Z
    3a1e:	71 81       	ldd	r23, Z+1	; 0x01
    3a20:	07 2e       	mov	r0, r23
    3a22:	00 0c       	add	r0, r0
    3a24:	88 0b       	sbc	r24, r24
    3a26:	99 0b       	sbc	r25, r25
    3a28:	0e 5f       	subi	r16, 0xFE	; 254
    3a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a2c:	92 cf       	rjmp	.-220    	; 0x3952 <vfprintf+0x1e6>
    3a2e:	d3 2c       	mov	r13, r3
    3a30:	e8 94       	clt
    3a32:	d4 f8       	bld	r13, 4
    3a34:	2a e0       	ldi	r18, 0x0A	; 10
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	85 37       	cpi	r24, 0x75	; 117
    3a3a:	39 f1       	breq	.+78     	; 0x3a8a <vfprintf+0x31e>
    3a3c:	23 2d       	mov	r18, r3
    3a3e:	29 7f       	andi	r18, 0xF9	; 249
    3a40:	d2 2e       	mov	r13, r18
    3a42:	8f 36       	cpi	r24, 0x6F	; 111
    3a44:	01 f1       	breq	.+64     	; 0x3a86 <vfprintf+0x31a>
    3a46:	48 f4       	brcc	.+18     	; 0x3a5a <vfprintf+0x2ee>
    3a48:	88 35       	cpi	r24, 0x58	; 88
    3a4a:	a9 f0       	breq	.+42     	; 0x3a76 <vfprintf+0x30a>
    3a4c:	f7 01       	movw	r30, r14
    3a4e:	86 81       	ldd	r24, Z+6	; 0x06
    3a50:	97 81       	ldd	r25, Z+7	; 0x07
    3a52:	2b 96       	adiw	r28, 0x0b	; 11
    3a54:	e2 e1       	ldi	r30, 0x12	; 18
    3a56:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__epilogue_restores__>
    3a5a:	80 37       	cpi	r24, 0x70	; 112
    3a5c:	49 f0       	breq	.+18     	; 0x3a70 <vfprintf+0x304>
    3a5e:	88 37       	cpi	r24, 0x78	; 120
    3a60:	a9 f7       	brne	.-22     	; 0x3a4c <vfprintf+0x2e0>
    3a62:	d4 fe       	sbrs	r13, 4
    3a64:	02 c0       	rjmp	.+4      	; 0x3a6a <vfprintf+0x2fe>
    3a66:	68 94       	set
    3a68:	d2 f8       	bld	r13, 2
    3a6a:	20 e1       	ldi	r18, 0x10	; 16
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	0d c0       	rjmp	.+26     	; 0x3a8a <vfprintf+0x31e>
    3a70:	68 94       	set
    3a72:	d4 f8       	bld	r13, 4
    3a74:	f6 cf       	rjmp	.-20     	; 0x3a62 <vfprintf+0x2f6>
    3a76:	34 fe       	sbrs	r3, 4
    3a78:	03 c0       	rjmp	.+6      	; 0x3a80 <vfprintf+0x314>
    3a7a:	82 2f       	mov	r24, r18
    3a7c:	86 60       	ori	r24, 0x06	; 6
    3a7e:	d8 2e       	mov	r13, r24
    3a80:	20 e1       	ldi	r18, 0x10	; 16
    3a82:	32 e0       	ldi	r19, 0x02	; 2
    3a84:	02 c0       	rjmp	.+4      	; 0x3a8a <vfprintf+0x31e>
    3a86:	28 e0       	ldi	r18, 0x08	; 8
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	f8 01       	movw	r30, r16
    3a8c:	d7 fe       	sbrs	r13, 7
    3a8e:	0f c0       	rjmp	.+30     	; 0x3aae <vfprintf+0x342>
    3a90:	60 81       	ld	r22, Z
    3a92:	71 81       	ldd	r23, Z+1	; 0x01
    3a94:	82 81       	ldd	r24, Z+2	; 0x02
    3a96:	93 81       	ldd	r25, Z+3	; 0x03
    3a98:	0c 5f       	subi	r16, 0xFC	; 252
    3a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a9c:	a5 01       	movw	r20, r10
    3a9e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__ultoa_invert>
    3aa2:	c8 2e       	mov	r12, r24
    3aa4:	ca 18       	sub	r12, r10
    3aa6:	3d 2c       	mov	r3, r13
    3aa8:	e8 94       	clt
    3aaa:	37 f8       	bld	r3, 7
    3aac:	67 cf       	rjmp	.-306    	; 0x397c <vfprintf+0x210>
    3aae:	60 81       	ld	r22, Z
    3ab0:	71 81       	ldd	r23, Z+1	; 0x01
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	0e 5f       	subi	r16, 0xFE	; 254
    3ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aba:	f0 cf       	rjmp	.-32     	; 0x3a9c <vfprintf+0x330>
    3abc:	42 fc       	sbrc	r4, 2
    3abe:	02 c0       	rjmp	.+4      	; 0x3ac4 <vfprintf+0x358>
    3ac0:	83 94       	inc	r8
    3ac2:	78 cf       	rjmp	.-272    	; 0x39b4 <vfprintf+0x248>
    3ac4:	83 94       	inc	r8
    3ac6:	83 94       	inc	r8
    3ac8:	75 cf       	rjmp	.-278    	; 0x39b4 <vfprintf+0x248>
    3aca:	84 2d       	mov	r24, r4
    3acc:	86 78       	andi	r24, 0x86	; 134
    3ace:	09 f4       	brne	.+2      	; 0x3ad2 <vfprintf+0x366>
    3ad0:	71 cf       	rjmp	.-286    	; 0x39b4 <vfprintf+0x248>
    3ad2:	f6 cf       	rjmp	.-20     	; 0x3ac0 <vfprintf+0x354>
    3ad4:	b7 01       	movw	r22, r14
    3ad6:	80 e2       	ldi	r24, 0x20	; 32
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <fputc>
    3ade:	83 94       	inc	r8
    3ae0:	82 14       	cp	r8, r2
    3ae2:	c0 f3       	brcs	.-16     	; 0x3ad4 <vfprintf+0x368>
    3ae4:	51 2c       	mov	r5, r1
    3ae6:	73 cf       	rjmp	.-282    	; 0x39ce <vfprintf+0x262>
    3ae8:	52 2c       	mov	r5, r2
    3aea:	58 18       	sub	r5, r8
    3aec:	82 14       	cp	r8, r2
    3aee:	08 f4       	brcc	.+2      	; 0x3af2 <vfprintf+0x386>
    3af0:	6e cf       	rjmp	.-292    	; 0x39ce <vfprintf+0x262>
    3af2:	f8 cf       	rjmp	.-16     	; 0x3ae4 <vfprintf+0x378>
    3af4:	84 2d       	mov	r24, r4
    3af6:	86 78       	andi	r24, 0x86	; 134
    3af8:	09 f4       	brne	.+2      	; 0x3afc <vfprintf+0x390>
    3afa:	7b cf       	rjmp	.-266    	; 0x39f2 <vfprintf+0x286>
    3afc:	8b e2       	ldi	r24, 0x2B	; 43
    3afe:	41 fe       	sbrs	r4, 1
    3b00:	80 e2       	ldi	r24, 0x20	; 32
    3b02:	47 fc       	sbrc	r4, 7
    3b04:	8d e2       	ldi	r24, 0x2D	; 45
    3b06:	b7 01       	movw	r22, r14
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	71 cf       	rjmp	.-286    	; 0x39ee <vfprintf+0x282>
    3b0c:	b7 01       	movw	r22, r14
    3b0e:	80 e3       	ldi	r24, 0x30	; 48
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <fputc>
    3b16:	9a 94       	dec	r9
    3b18:	6c cf       	rjmp	.-296    	; 0x39f2 <vfprintf+0x286>
    3b1a:	8f ef       	ldi	r24, 0xFF	; 255
    3b1c:	9f ef       	ldi	r25, 0xFF	; 255
    3b1e:	99 cf       	rjmp	.-206    	; 0x3a52 <vfprintf+0x2e6>

00003b20 <strnlen_P>:
    3b20:	fc 01       	movw	r30, r24
    3b22:	05 90       	lpm	r0, Z+
    3b24:	61 50       	subi	r22, 0x01	; 1
    3b26:	70 40       	sbci	r23, 0x00	; 0
    3b28:	01 10       	cpse	r0, r1
    3b2a:	d8 f7       	brcc	.-10     	; 0x3b22 <strnlen_P+0x2>
    3b2c:	80 95       	com	r24
    3b2e:	90 95       	com	r25
    3b30:	8e 0f       	add	r24, r30
    3b32:	9f 1f       	adc	r25, r31
    3b34:	08 95       	ret

00003b36 <strnlen>:
    3b36:	fc 01       	movw	r30, r24
    3b38:	61 50       	subi	r22, 0x01	; 1
    3b3a:	70 40       	sbci	r23, 0x00	; 0
    3b3c:	01 90       	ld	r0, Z+
    3b3e:	01 10       	cpse	r0, r1
    3b40:	d8 f7       	brcc	.-10     	; 0x3b38 <strnlen+0x2>
    3b42:	80 95       	com	r24
    3b44:	90 95       	com	r25
    3b46:	8e 0f       	add	r24, r30
    3b48:	9f 1f       	adc	r25, r31
    3b4a:	08 95       	ret

00003b4c <fputc>:
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	18 2f       	mov	r17, r24
    3b56:	09 2f       	mov	r16, r25
    3b58:	eb 01       	movw	r28, r22
    3b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5c:	81 fd       	sbrc	r24, 1
    3b5e:	09 c0       	rjmp	.+18     	; 0x3b72 <fputc+0x26>
    3b60:	1f ef       	ldi	r17, 0xFF	; 255
    3b62:	0f ef       	ldi	r16, 0xFF	; 255
    3b64:	81 2f       	mov	r24, r17
    3b66:	90 2f       	mov	r25, r16
    3b68:	df 91       	pop	r29
    3b6a:	cf 91       	pop	r28
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	08 95       	ret
    3b72:	82 ff       	sbrs	r24, 2
    3b74:	14 c0       	rjmp	.+40     	; 0x3b9e <fputc+0x52>
    3b76:	2e 81       	ldd	r18, Y+6	; 0x06
    3b78:	3f 81       	ldd	r19, Y+7	; 0x07
    3b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b7e:	28 17       	cp	r18, r24
    3b80:	39 07       	cpc	r19, r25
    3b82:	3c f4       	brge	.+14     	; 0x3b92 <fputc+0x46>
    3b84:	e8 81       	ld	r30, Y
    3b86:	f9 81       	ldd	r31, Y+1	; 0x01
    3b88:	cf 01       	movw	r24, r30
    3b8a:	01 96       	adiw	r24, 0x01	; 1
    3b8c:	99 83       	std	Y+1, r25	; 0x01
    3b8e:	88 83       	st	Y, r24
    3b90:	10 83       	st	Z, r17
    3b92:	8e 81       	ldd	r24, Y+6	; 0x06
    3b94:	9f 81       	ldd	r25, Y+7	; 0x07
    3b96:	01 96       	adiw	r24, 0x01	; 1
    3b98:	9f 83       	std	Y+7, r25	; 0x07
    3b9a:	8e 83       	std	Y+6, r24	; 0x06
    3b9c:	e3 cf       	rjmp	.-58     	; 0x3b64 <fputc+0x18>
    3b9e:	e8 85       	ldd	r30, Y+8	; 0x08
    3ba0:	f9 85       	ldd	r31, Y+9	; 0x09
    3ba2:	81 2f       	mov	r24, r17
    3ba4:	09 95       	icall
    3ba6:	89 2b       	or	r24, r25
    3ba8:	a1 f3       	breq	.-24     	; 0x3b92 <fputc+0x46>
    3baa:	da cf       	rjmp	.-76     	; 0x3b60 <fputc+0x14>

00003bac <__ultoa_invert>:
    3bac:	fa 01       	movw	r30, r20
    3bae:	aa 27       	eor	r26, r26
    3bb0:	28 30       	cpi	r18, 0x08	; 8
    3bb2:	51 f1       	breq	.+84     	; 0x3c08 <__ultoa_invert+0x5c>
    3bb4:	20 31       	cpi	r18, 0x10	; 16
    3bb6:	81 f1       	breq	.+96     	; 0x3c18 <__ultoa_invert+0x6c>
    3bb8:	e8 94       	clt
    3bba:	6f 93       	push	r22
    3bbc:	6e 7f       	andi	r22, 0xFE	; 254
    3bbe:	6e 5f       	subi	r22, 0xFE	; 254
    3bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc2:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc6:	af 4f       	sbci	r26, 0xFF	; 255
    3bc8:	b1 e0       	ldi	r27, 0x01	; 1
    3bca:	3e d0       	rcall	.+124    	; 0x3c48 <__ultoa_invert+0x9c>
    3bcc:	b4 e0       	ldi	r27, 0x04	; 4
    3bce:	3c d0       	rcall	.+120    	; 0x3c48 <__ultoa_invert+0x9c>
    3bd0:	67 0f       	add	r22, r23
    3bd2:	78 1f       	adc	r23, r24
    3bd4:	89 1f       	adc	r24, r25
    3bd6:	9a 1f       	adc	r25, r26
    3bd8:	a1 1d       	adc	r26, r1
    3bda:	68 0f       	add	r22, r24
    3bdc:	79 1f       	adc	r23, r25
    3bde:	8a 1f       	adc	r24, r26
    3be0:	91 1d       	adc	r25, r1
    3be2:	a1 1d       	adc	r26, r1
    3be4:	6a 0f       	add	r22, r26
    3be6:	71 1d       	adc	r23, r1
    3be8:	81 1d       	adc	r24, r1
    3bea:	91 1d       	adc	r25, r1
    3bec:	a1 1d       	adc	r26, r1
    3bee:	20 d0       	rcall	.+64     	; 0x3c30 <__ultoa_invert+0x84>
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <__ultoa_invert+0x48>
    3bf2:	68 94       	set
    3bf4:	3f 91       	pop	r19
    3bf6:	2a e0       	ldi	r18, 0x0A	; 10
    3bf8:	26 9f       	mul	r18, r22
    3bfa:	11 24       	eor	r1, r1
    3bfc:	30 19       	sub	r19, r0
    3bfe:	30 5d       	subi	r19, 0xD0	; 208
    3c00:	31 93       	st	Z+, r19
    3c02:	de f6       	brtc	.-74     	; 0x3bba <__ultoa_invert+0xe>
    3c04:	cf 01       	movw	r24, r30
    3c06:	08 95       	ret
    3c08:	46 2f       	mov	r20, r22
    3c0a:	47 70       	andi	r20, 0x07	; 7
    3c0c:	40 5d       	subi	r20, 0xD0	; 208
    3c0e:	41 93       	st	Z+, r20
    3c10:	b3 e0       	ldi	r27, 0x03	; 3
    3c12:	0f d0       	rcall	.+30     	; 0x3c32 <__ultoa_invert+0x86>
    3c14:	c9 f7       	brne	.-14     	; 0x3c08 <__ultoa_invert+0x5c>
    3c16:	f6 cf       	rjmp	.-20     	; 0x3c04 <__ultoa_invert+0x58>
    3c18:	46 2f       	mov	r20, r22
    3c1a:	4f 70       	andi	r20, 0x0F	; 15
    3c1c:	40 5d       	subi	r20, 0xD0	; 208
    3c1e:	4a 33       	cpi	r20, 0x3A	; 58
    3c20:	18 f0       	brcs	.+6      	; 0x3c28 <__ultoa_invert+0x7c>
    3c22:	49 5d       	subi	r20, 0xD9	; 217
    3c24:	31 fd       	sbrc	r19, 1
    3c26:	40 52       	subi	r20, 0x20	; 32
    3c28:	41 93       	st	Z+, r20
    3c2a:	02 d0       	rcall	.+4      	; 0x3c30 <__ultoa_invert+0x84>
    3c2c:	a9 f7       	brne	.-22     	; 0x3c18 <__ultoa_invert+0x6c>
    3c2e:	ea cf       	rjmp	.-44     	; 0x3c04 <__ultoa_invert+0x58>
    3c30:	b4 e0       	ldi	r27, 0x04	; 4
    3c32:	a6 95       	lsr	r26
    3c34:	97 95       	ror	r25
    3c36:	87 95       	ror	r24
    3c38:	77 95       	ror	r23
    3c3a:	67 95       	ror	r22
    3c3c:	ba 95       	dec	r27
    3c3e:	c9 f7       	brne	.-14     	; 0x3c32 <__ultoa_invert+0x86>
    3c40:	00 97       	sbiw	r24, 0x00	; 0
    3c42:	61 05       	cpc	r22, r1
    3c44:	71 05       	cpc	r23, r1
    3c46:	08 95       	ret
    3c48:	9b 01       	movw	r18, r22
    3c4a:	ac 01       	movw	r20, r24
    3c4c:	0a 2e       	mov	r0, r26
    3c4e:	06 94       	lsr	r0
    3c50:	57 95       	ror	r21
    3c52:	47 95       	ror	r20
    3c54:	37 95       	ror	r19
    3c56:	27 95       	ror	r18
    3c58:	ba 95       	dec	r27
    3c5a:	c9 f7       	brne	.-14     	; 0x3c4e <__ultoa_invert+0xa2>
    3c5c:	62 0f       	add	r22, r18
    3c5e:	73 1f       	adc	r23, r19
    3c60:	84 1f       	adc	r24, r20
    3c62:	95 1f       	adc	r25, r21
    3c64:	a0 1d       	adc	r26, r0
    3c66:	08 95       	ret

00003c68 <__prologue_saves__>:
    3c68:	2f 92       	push	r2
    3c6a:	3f 92       	push	r3
    3c6c:	4f 92       	push	r4
    3c6e:	5f 92       	push	r5
    3c70:	6f 92       	push	r6
    3c72:	7f 92       	push	r7
    3c74:	8f 92       	push	r8
    3c76:	9f 92       	push	r9
    3c78:	af 92       	push	r10
    3c7a:	bf 92       	push	r11
    3c7c:	cf 92       	push	r12
    3c7e:	df 92       	push	r13
    3c80:	ef 92       	push	r14
    3c82:	ff 92       	push	r15
    3c84:	0f 93       	push	r16
    3c86:	1f 93       	push	r17
    3c88:	cf 93       	push	r28
    3c8a:	df 93       	push	r29
    3c8c:	cd b7       	in	r28, 0x3d	; 61
    3c8e:	de b7       	in	r29, 0x3e	; 62
    3c90:	ca 1b       	sub	r28, r26
    3c92:	db 0b       	sbc	r29, r27
    3c94:	0f b6       	in	r0, 0x3f	; 63
    3c96:	f8 94       	cli
    3c98:	de bf       	out	0x3e, r29	; 62
    3c9a:	0f be       	out	0x3f, r0	; 63
    3c9c:	cd bf       	out	0x3d, r28	; 61
    3c9e:	09 94       	ijmp

00003ca0 <__epilogue_restores__>:
    3ca0:	2a 88       	ldd	r2, Y+18	; 0x12
    3ca2:	39 88       	ldd	r3, Y+17	; 0x11
    3ca4:	48 88       	ldd	r4, Y+16	; 0x10
    3ca6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ca8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3caa:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cac:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cae:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cb0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cb2:	b9 84       	ldd	r11, Y+9	; 0x09
    3cb4:	c8 84       	ldd	r12, Y+8	; 0x08
    3cb6:	df 80       	ldd	r13, Y+7	; 0x07
    3cb8:	ee 80       	ldd	r14, Y+6	; 0x06
    3cba:	fd 80       	ldd	r15, Y+5	; 0x05
    3cbc:	0c 81       	ldd	r16, Y+4	; 0x04
    3cbe:	1b 81       	ldd	r17, Y+3	; 0x03
    3cc0:	aa 81       	ldd	r26, Y+2	; 0x02
    3cc2:	b9 81       	ldd	r27, Y+1	; 0x01
    3cc4:	ce 0f       	add	r28, r30
    3cc6:	d1 1d       	adc	r29, r1
    3cc8:	0f b6       	in	r0, 0x3f	; 63
    3cca:	f8 94       	cli
    3ccc:	de bf       	out	0x3e, r29	; 62
    3cce:	0f be       	out	0x3f, r0	; 63
    3cd0:	cd bf       	out	0x3d, r28	; 61
    3cd2:	ed 01       	movw	r28, r26
    3cd4:	08 95       	ret

00003cd6 <_exit>:
    3cd6:	f8 94       	cli

00003cd8 <__stop_program>:
    3cd8:	ff cf       	rjmp	.-2      	; 0x3cd8 <__stop_program>

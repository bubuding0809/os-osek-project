
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000348  00800100  00003854  000038e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003854  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000192  00800448  00800448  00003c30  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000688  00000000  00000000  00003c88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000185d0  00000000  00000000  00004310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003725  00000000  00000000  0001c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004d83  00000000  00000000  00020005  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000107c  00000000  00000000  00024d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004340  00000000  00000000  00025e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000078c1  00000000  00000000  0002a144  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e8  00000000  00000000  00031a05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      24:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_9>
      28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      2c:	0c 94 cd 12 	jmp	0x259a	; 0x259a <__vector_11>
      30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      40:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__vector_16>
      44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      48:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__vector_18>
      4c:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__vector_19>
      50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      54:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      58:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      5c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      60:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      64:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <setup+0x44>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	00 00       	nop
      ec:	00 08       	sbc	r0, r0
      ee:	00 02       	muls	r16, r16
      f0:	01 00       	.word	0x0001	; ????
      f2:	00 03       	mulsu	r16, r16
      f4:	04 07       	cpc	r16, r20
	...

000000fe <digital_pin_to_bit_mask_PGM>:
      fe:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     10e:	04 08 10 20                                         ... 

00000112 <digital_pin_to_port_PGM>:
     112:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     122:	03 03 03 03                                         ....

00000126 <port_to_input_PGM>:
     126:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000130 <port_to_output_PGM>:
     130:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000013a <port_to_mode_PGM>:
     13a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000144 <__ctors_start>:
     144:	62 08       	sbc	r6, r2
     146:	82 0b       	sbc	r24, r18

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d8 e0       	ldi	r29, 0x08	; 8
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	14 e0       	ldi	r17, 0x04	; 4
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	e4 e5       	ldi	r30, 0x54	; 84
     15c:	f8 e3       	ldi	r31, 0x38	; 56
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x10>
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	a8 34       	cpi	r26, 0x48	; 72
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0xc>

0000016a <__do_clear_bss>:
     16a:	25 e0       	ldi	r18, 0x05	; 5
     16c:	a8 e4       	ldi	r26, 0x48	; 72
     16e:	b4 e0       	ldi	r27, 0x04	; 4
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	aa 3d       	cpi	r26, 0xDA	; 218
     176:	b2 07       	cpc	r27, r18
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>

0000017a <__do_global_ctors>:
     17a:	10 e0       	ldi	r17, 0x00	; 0
     17c:	c4 ea       	ldi	r28, 0xA4	; 164
     17e:	d0 e0       	ldi	r29, 0x00	; 0
     180:	04 c0       	rjmp	.+8      	; 0x18a <__do_global_ctors+0x10>
     182:	21 97       	sbiw	r28, 0x01	; 1
     184:	fe 01       	movw	r30, r28
     186:	0e 94 4a 19 	call	0x3294	; 0x3294 <__tablejump2__>
     18a:	c2 3a       	cpi	r28, 0xA2	; 162
     18c:	d1 07       	cpc	r29, r17
     18e:	c9 f7       	brne	.-14     	; 0x182 <__do_global_ctors+0x8>
     190:	0e 94 19 05 	call	0xa32	; 0xa32 <main>
     194:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <_exit>

00000198 <__bad_interrupt>:
     198:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__vector_default>

0000019c <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     19c:	2f 92       	push	r2
     19e:	3f 92       	push	r3
     1a0:	4f 92       	push	r4
     1a2:	5f 92       	push	r5
     1a4:	6f 92       	push	r6
     1a6:	7f 92       	push	r7
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	bf 92       	push	r11
     1b0:	cf 92       	push	r12
     1b2:	df 92       	push	r13
     1b4:	ef 92       	push	r14
     1b6:	ff 92       	push	r15
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	e4 2f       	mov	r30, r20
     1c2:	f5 2f       	mov	r31, r21
     1c4:	41 90       	ld	r4, Z+
     1c6:	50 80       	ld	r5, Z
     1c8:	4f 92       	push	r4
     1ca:	5f 92       	push	r5
     1cc:	e4 2f       	mov	r30, r20
     1ce:	f5 2f       	mov	r31, r21
     1d0:	4d b6       	in	r4, 0x3d	; 61
     1d2:	5e b6       	in	r5, 0x3e	; 62
     1d4:	41 92       	st	Z+, r4
     1d6:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     1d8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>

000001dc <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     1dc:	e6 2f       	mov	r30, r22
     1de:	f7 2f       	mov	r31, r23
     1e0:	41 90       	ld	r4, Z+
     1e2:	50 80       	ld	r5, Z
     1e4:	4d be       	out	0x3d, r4	; 61
     1e6:	5e be       	out	0x3e, r5	; 62
     1e8:	5f 90       	pop	r5
     1ea:	4f 90       	pop	r4
     1ec:	e6 2f       	mov	r30, r22
     1ee:	f7 2f       	mov	r31, r23
     1f0:	41 92       	st	Z+, r4
     1f2:	50 82       	st	Z, r5
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	bf 90       	pop	r11
     206:	af 90       	pop	r10
     208:	9f 90       	pop	r9
     20a:	8f 90       	pop	r8
     20c:	7f 90       	pop	r7
     20e:	6f 90       	pop	r6
     210:	5f 90       	pop	r5
     212:	4f 90       	pop	r4
     214:	3f 90       	pop	r3
     216:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     218:	0c 94 08 10 	jmp	0x2010	; 0x2010 <osEE_scheduler_task_wrapper_restore>

0000021c <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     21c:	e6 2f       	mov	r30, r22
    mov r31, r23
     21e:	f7 2f       	mov	r31, r23
    ld  r20, z+
     220:	41 91       	ld	r20, Z+
    ld  r21, z
     222:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     224:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     226:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     228:	0c 94 1e 10 	jmp	0x203c	; 0x203c <osEE_scheduler_task_wrapper_run>

0000022c <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     22c:	2f 92       	push	r2
     22e:	3f 92       	push	r3
     230:	4f 92       	push	r4
     232:	5f 92       	push	r5
     234:	6f 92       	push	r6
     236:	7f 92       	push	r7
     238:	8f 92       	push	r8
     23a:	9f 92       	push	r9
     23c:	af 92       	push	r10
     23e:	bf 92       	push	r11
     240:	cf 92       	push	r12
     242:	df 92       	push	r13
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	e4 2f       	mov	r30, r20
     252:	f5 2f       	mov	r31, r21
     254:	41 90       	ld	r4, Z+
     256:	50 80       	ld	r5, Z
     258:	4f 92       	push	r4
     25a:	5f 92       	push	r5
     25c:	e4 2f       	mov	r30, r20
     25e:	f5 2f       	mov	r31, r21
     260:	4d b6       	in	r4, 0x3d	; 61
     262:	5e b6       	in	r5, 0x3e	; 62
     264:	41 92       	st	Z+, r4
     266:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     268:	0c 94 0e 01 	jmp	0x21c	; 0x21c <osEE_hal_ready2stacked>

0000026c <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     26c:	e8 2f       	mov	r30, r24
    mov r31, r25
     26e:	f9 2f       	mov	r31, r25
    ld  r20, z+
     270:	41 91       	ld	r20, Z+
    ld  r21, z
     272:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     274:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     276:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     278:	e6 2f       	mov	r30, r22
    mov r31, r23
     27a:	f7 2f       	mov	r31, r23

    ijmp
     27c:	09 94       	ijmp
	...

00000280 <_ZN5Print17availableForWriteEv>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 95       	ret

00000286 <_ZN5Print5flushEv>:
     286:	08 95       	ret

00000288 <_ZN13LiquidCrystal11pulseEnableEv>:
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	ec 01       	movw	r28, r24
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	8e 81       	ldd	r24, Y+6	; 0x06
     292:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 c7 08 	call	0x118e	; 0x118e <delayMicroseconds>
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	8e 81       	ldd	r24, Y+6	; 0x06
     2a2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 c7 08 	call	0x118e	; 0x118e <delayMicroseconds>
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	8e 81       	ldd	r24, Y+6	; 0x06
     2b2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     2b6:	84 e6       	ldi	r24, 0x64	; 100
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	0c 94 c7 08 	jmp	0x118e	; 0x118e <delayMicroseconds>

000002c2 <_ZN13LiquidCrystal10write4bitsEh>:
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	6c 01       	movw	r12, r24
     2d4:	7c 01       	movw	r14, r24
     2d6:	87 e0       	ldi	r24, 0x07	; 7
     2d8:	e8 0e       	add	r14, r24
     2da:	f1 1c       	adc	r15, r1
     2dc:	d0 e0       	ldi	r29, 0x00	; 0
     2de:	c0 e0       	ldi	r28, 0x00	; 0
     2e0:	06 2f       	mov	r16, r22
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	b8 01       	movw	r22, r16
     2e6:	0c 2e       	mov	r0, r28
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     2ea:	75 95       	asr	r23
     2ec:	67 95       	ror	r22
     2ee:	0a 94       	dec	r0
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <_ZN13LiquidCrystal10write4bitsEh+0x28>
     2f2:	61 70       	andi	r22, 0x01	; 1
     2f4:	f7 01       	movw	r30, r14
     2f6:	81 91       	ld	r24, Z+
     2f8:	7f 01       	movw	r14, r30
     2fa:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     2fe:	21 96       	adiw	r28, 0x01	; 1
     300:	c4 30       	cpi	r28, 0x04	; 4
     302:	d1 05       	cpc	r29, r1
     304:	79 f7       	brne	.-34     	; 0x2e4 <_ZN13LiquidCrystal10write4bitsEh+0x22>
     306:	c6 01       	movw	r24, r12
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	0c 94 44 01 	jmp	0x288	; 0x288 <_ZN13LiquidCrystal11pulseEnableEv>

0000031c <_ZN13LiquidCrystal10write8bitsEh>:
     31c:	cf 92       	push	r12
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	6c 01       	movw	r12, r24
     32e:	7c 01       	movw	r14, r24
     330:	87 e0       	ldi	r24, 0x07	; 7
     332:	e8 0e       	add	r14, r24
     334:	f1 1c       	adc	r15, r1
     336:	d0 e0       	ldi	r29, 0x00	; 0
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	06 2f       	mov	r16, r22
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	b8 01       	movw	r22, r16
     340:	0c 2e       	mov	r0, r28
     342:	02 c0       	rjmp	.+4      	; 0x348 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     344:	75 95       	asr	r23
     346:	67 95       	ror	r22
     348:	0a 94       	dec	r0
     34a:	e2 f7       	brpl	.-8      	; 0x344 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     34c:	61 70       	andi	r22, 0x01	; 1
     34e:	f7 01       	movw	r30, r14
     350:	81 91       	ld	r24, Z+
     352:	7f 01       	movw	r14, r30
     354:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     358:	21 96       	adiw	r28, 0x01	; 1
     35a:	c8 30       	cpi	r28, 0x08	; 8
     35c:	d1 05       	cpc	r29, r1
     35e:	79 f7       	brne	.-34     	; 0x33e <_ZN13LiquidCrystal10write8bitsEh+0x22>
     360:	c6 01       	movw	r24, r12
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	df 90       	pop	r13
     370:	cf 90       	pop	r12
     372:	0c 94 44 01 	jmp	0x288	; 0x288 <_ZN13LiquidCrystal11pulseEnableEv>

00000376 <_ZN13LiquidCrystal4sendEhh>:
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	ec 01       	movw	r28, r24
     37e:	16 2f       	mov	r17, r22
     380:	64 2f       	mov	r22, r20
     382:	8c 81       	ldd	r24, Y+4	; 0x04
     384:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	8f 3f       	cpi	r24, 0xFF	; 255
     38c:	19 f0       	breq	.+6      	; 0x394 <_ZN13LiquidCrystal4sendEhh+0x1e>
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     394:	8f 85       	ldd	r24, Y+15	; 0x0f
     396:	61 2f       	mov	r22, r17
     398:	84 ff       	sbrs	r24, 4
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <_ZN13LiquidCrystal4sendEhh+0x32>
     39c:	ce 01       	movw	r24, r28
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_ZN13LiquidCrystal10write8bitsEh>
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	75 95       	asr	r23
     3ae:	67 95       	ror	r22
     3b0:	8a 95       	dec	r24
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <_ZN13LiquidCrystal4sendEhh+0x36>
     3b4:	ce 01       	movw	r24, r28
     3b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     3ba:	61 2f       	mov	r22, r17
     3bc:	ce 01       	movw	r24, r28
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>

000003c8 <_ZN13LiquidCrystal7commandEh>:
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	0c 94 bb 01 	jmp	0x376	; 0x376 <_ZN13LiquidCrystal4sendEhh>

000003ce <_ZN13LiquidCrystal5clearEv>:
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     3d4:	80 ed       	ldi	r24, 0xD0	; 208
     3d6:	97 e0       	ldi	r25, 0x07	; 7
     3d8:	0c 94 c7 08 	jmp	0x118e	; 0x118e <delayMicroseconds>

000003dc <_ZN13LiquidCrystal9setCursorEhh>:
     3dc:	44 30       	cpi	r20, 0x04	; 4
     3de:	08 f0       	brcs	.+2      	; 0x3e2 <_ZN13LiquidCrystal9setCursorEhh+0x6>
     3e0:	43 e0       	ldi	r20, 0x03	; 3
     3e2:	fc 01       	movw	r30, r24
     3e4:	23 89       	ldd	r18, Z+19	; 0x13
     3e6:	42 17       	cp	r20, r18
     3e8:	10 f0       	brcs	.+4      	; 0x3ee <_ZN13LiquidCrystal9setCursorEhh+0x12>
     3ea:	4f ef       	ldi	r20, 0xFF	; 255
     3ec:	42 0f       	add	r20, r18
     3ee:	fc 01       	movw	r30, r24
     3f0:	e4 0f       	add	r30, r20
     3f2:	f1 1d       	adc	r31, r1
     3f4:	24 89       	ldd	r18, Z+20	; 0x14
     3f6:	62 0f       	add	r22, r18
     3f8:	60 68       	ori	r22, 0x80	; 128
     3fa:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>

000003fe <_ZN13LiquidCrystal7displayEv>:
     3fe:	fc 01       	movw	r30, r24
     400:	60 89       	ldd	r22, Z+16	; 0x10
     402:	26 2f       	mov	r18, r22
     404:	24 60       	ori	r18, 0x04	; 4
     406:	20 8b       	std	Z+16, r18	; 0x10
     408:	6c 60       	ori	r22, 0x0C	; 12
     40a:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>

0000040e <_ZN13LiquidCrystal5beginEhhh>:
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	ec 01       	movw	r28, r24
     418:	42 30       	cpi	r20, 0x02	; 2
     41a:	18 f0       	brcs	.+6      	; 0x422 <_ZN13LiquidCrystal5beginEhhh+0x14>
     41c:	8f 85       	ldd	r24, Y+15	; 0x0f
     41e:	88 60       	ori	r24, 0x08	; 8
     420:	8f 87       	std	Y+15, r24	; 0x0f
     422:	4b 8b       	std	Y+19, r20	; 0x13
     424:	1c 8a       	std	Y+20, r1	; 0x14
     426:	80 e4       	ldi	r24, 0x40	; 64
     428:	8d 8b       	std	Y+21, r24	; 0x15
     42a:	6e 8b       	std	Y+22, r22	; 0x16
     42c:	60 5c       	subi	r22, 0xC0	; 192
     42e:	6f 8b       	std	Y+23, r22	; 0x17
     430:	22 23       	and	r18, r18
     432:	29 f0       	breq	.+10     	; 0x43e <_ZN13LiquidCrystal5beginEhhh+0x30>
     434:	41 30       	cpi	r20, 0x01	; 1
     436:	19 f4       	brne	.+6      	; 0x43e <_ZN13LiquidCrystal5beginEhhh+0x30>
     438:	8f 85       	ldd	r24, Y+15	; 0x0f
     43a:	84 60       	ori	r24, 0x04	; 4
     43c:	8f 87       	std	Y+15, r24	; 0x0f
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	8c 81       	ldd	r24, Y+4	; 0x04
     442:	0e 94 36 09 	call	0x126c	; 0x126c <pinMode>
     446:	8d 81       	ldd	r24, Y+5	; 0x05
     448:	8f 3f       	cpi	r24, 0xFF	; 255
     44a:	19 f0       	breq	.+6      	; 0x452 <_ZN13LiquidCrystal5beginEhhh+0x44>
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	0e 94 36 09 	call	0x126c	; 0x126c <pinMode>
     452:	61 e0       	ldi	r22, 0x01	; 1
     454:	8e 81       	ldd	r24, Y+6	; 0x06
     456:	0e 94 36 09 	call	0x126c	; 0x126c <pinMode>
     45a:	8e 01       	movw	r16, r28
     45c:	98 01       	movw	r18, r16
     45e:	2c 1b       	sub	r18, r28
     460:	3d 0b       	sbc	r19, r29
     462:	8f 85       	ldd	r24, Y+15	; 0x0f
     464:	84 fd       	sbrc	r24, 4
     466:	0d c0       	rjmp	.+26     	; 0x482 <_ZN13LiquidCrystal5beginEhhh+0x74>
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0f 5f       	subi	r16, 0xFF	; 255
     46e:	1f 4f       	sbci	r17, 0xFF	; 255
     470:	28 17       	cp	r18, r24
     472:	39 07       	cpc	r19, r25
     474:	4c f4       	brge	.+18     	; 0x488 <_ZN13LiquidCrystal5beginEhhh+0x7a>
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	f8 01       	movw	r30, r16
     47a:	86 81       	ldd	r24, Z+6	; 0x06
     47c:	0e 94 36 09 	call	0x126c	; 0x126c <pinMode>
     480:	ed cf       	rjmp	.-38     	; 0x45c <_ZN13LiquidCrystal5beginEhhh+0x4e>
     482:	88 e0       	ldi	r24, 0x08	; 8
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	f2 cf       	rjmp	.-28     	; 0x46c <_ZN13LiquidCrystal5beginEhhh+0x5e>
     488:	80 e5       	ldi	r24, 0x50	; 80
     48a:	93 ec       	ldi	r25, 0xC3	; 195
     48c:	0e 94 c7 08 	call	0x118e	; 0x118e <delayMicroseconds>
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	8c 81       	ldd	r24, Y+4	; 0x04
     494:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	8e 81       	ldd	r24, Y+6	; 0x06
     49c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     4a0:	8d 81       	ldd	r24, Y+5	; 0x05
     4a2:	8f 3f       	cpi	r24, 0xFF	; 255
     4a4:	19 f0       	breq	.+6      	; 0x4ac <_ZN13LiquidCrystal5beginEhhh+0x9e>
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     4ac:	6f 85       	ldd	r22, Y+15	; 0x0f
     4ae:	64 fd       	sbrc	r22, 4
     4b0:	33 c0       	rjmp	.+102    	; 0x518 <_ZN13LiquidCrystal5beginEhhh+0x10a>
     4b2:	63 e0       	ldi	r22, 0x03	; 3
     4b4:	ce 01       	movw	r24, r28
     4b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ba:	84 e9       	ldi	r24, 0x94	; 148
     4bc:	91 e1       	ldi	r25, 0x11	; 17
     4be:	0e 94 c7 08 	call	0x118e	; 0x118e <delayMicroseconds>
     4c2:	63 e0       	ldi	r22, 0x03	; 3
     4c4:	ce 01       	movw	r24, r28
     4c6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ca:	84 e9       	ldi	r24, 0x94	; 148
     4cc:	91 e1       	ldi	r25, 0x11	; 17
     4ce:	0e 94 c7 08 	call	0x118e	; 0x118e <delayMicroseconds>
     4d2:	63 e0       	ldi	r22, 0x03	; 3
     4d4:	ce 01       	movw	r24, r28
     4d6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4da:	86 e9       	ldi	r24, 0x96	; 150
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 c7 08 	call	0x118e	; 0x118e <delayMicroseconds>
     4e2:	62 e0       	ldi	r22, 0x02	; 2
     4e4:	ce 01       	movw	r24, r28
     4e6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ea:	6f 85       	ldd	r22, Y+15	; 0x0f
     4ec:	60 62       	ori	r22, 0x20	; 32
     4ee:	ce 01       	movw	r24, r28
     4f0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     4f4:	84 e0       	ldi	r24, 0x04	; 4
     4f6:	88 8b       	std	Y+16, r24	; 0x10
     4f8:	ce 01       	movw	r24, r28
     4fa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN13LiquidCrystal7displayEv>
     4fe:	ce 01       	movw	r24, r28
     500:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN13LiquidCrystal5clearEv>
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	89 8b       	std	Y+17, r24	; 0x11
     508:	66 e0       	ldi	r22, 0x06	; 6
     50a:	ce 01       	movw	r24, r28
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     518:	60 62       	ori	r22, 0x20	; 32
     51a:	ce 01       	movw	r24, r28
     51c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     520:	84 e9       	ldi	r24, 0x94	; 148
     522:	91 e1       	ldi	r25, 0x11	; 17
     524:	0e 94 c7 08 	call	0x118e	; 0x118e <delayMicroseconds>
     528:	6f 85       	ldd	r22, Y+15	; 0x0f
     52a:	60 62       	ori	r22, 0x20	; 32
     52c:	ce 01       	movw	r24, r28
     52e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     532:	86 e9       	ldi	r24, 0x96	; 150
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 c7 08 	call	0x118e	; 0x118e <delayMicroseconds>
     53a:	6f 85       	ldd	r22, Y+15	; 0x0f
     53c:	60 62       	ori	r22, 0x20	; 32
     53e:	ce 01       	movw	r24, r28
     540:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     544:	d2 cf       	rjmp	.-92     	; 0x4ea <_ZN13LiquidCrystal5beginEhhh+0xdc>

00000546 <_ZN13LiquidCrystalC1Ehhhhhh>:
     546:	cf 92       	push	r12
     548:	ef 92       	push	r14
     54a:	0f 93       	push	r16
     54c:	fc 01       	movw	r30, r24
     54e:	13 82       	std	Z+3, r1	; 0x03
     550:	12 82       	std	Z+2, r1	; 0x02
     552:	8f e9       	ldi	r24, 0x9F	; 159
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	91 83       	std	Z+1, r25	; 0x01
     558:	80 83       	st	Z, r24
     55a:	64 83       	std	Z+4, r22	; 0x04
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	85 83       	std	Z+5, r24	; 0x05
     560:	46 83       	std	Z+6, r20	; 0x06
     562:	27 83       	std	Z+7, r18	; 0x07
     564:	00 87       	std	Z+8, r16	; 0x08
     566:	e1 86       	std	Z+9, r14	; 0x09
     568:	c2 86       	std	Z+10, r12	; 0x0a
     56a:	13 86       	std	Z+11, r1	; 0x0b
     56c:	14 86       	std	Z+12, r1	; 0x0c
     56e:	15 86       	std	Z+13, r1	; 0x0d
     570:	16 86       	std	Z+14, r1	; 0x0e
     572:	17 86       	std	Z+15, r1	; 0x0f
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	60 e1       	ldi	r22, 0x10	; 16
     57a:	cf 01       	movw	r24, r30
     57c:	0f 91       	pop	r16
     57e:	ef 90       	pop	r14
     580:	cf 90       	pop	r12
     582:	0c 94 07 02 	jmp	0x40e	; 0x40e <_ZN13LiquidCrystal5beginEhhh>

00000586 <_ZN13LiquidCrystal10createCharEhPh>:
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	8c 01       	movw	r16, r24
     594:	7a 01       	movw	r14, r20
     596:	67 70       	andi	r22, 0x07	; 7
     598:	88 e0       	ldi	r24, 0x08	; 8
     59a:	68 9f       	mul	r22, r24
     59c:	b0 01       	movw	r22, r0
     59e:	11 24       	eor	r1, r1
     5a0:	60 64       	ori	r22, 0x40	; 64
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     5a8:	e7 01       	movw	r28, r14
     5aa:	a8 e0       	ldi	r26, 0x08	; 8
     5ac:	ea 0e       	add	r14, r26
     5ae:	f1 1c       	adc	r15, r1
     5b0:	69 91       	ld	r22, Y+
     5b2:	d8 01       	movw	r26, r16
     5b4:	ed 91       	ld	r30, X+
     5b6:	fc 91       	ld	r31, X
     5b8:	01 90       	ld	r0, Z+
     5ba:	f0 81       	ld	r31, Z
     5bc:	e0 2d       	mov	r30, r0
     5be:	c8 01       	movw	r24, r16
     5c0:	09 95       	icall
     5c2:	ce 15       	cp	r28, r14
     5c4:	df 05       	cpc	r29, r15
     5c6:	a1 f7       	brne	.-24     	; 0x5b0 <_ZN13LiquidCrystal10createCharEhPh+0x2a>
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	08 95       	ret

000005d6 <_ZN13LiquidCrystal5writeEh>:
     5d6:	41 e0       	ldi	r20, 0x01	; 1
     5d8:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN13LiquidCrystal4sendEhh>
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	08 95       	ret

000005e2 <__vector_9>:
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
     604:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_ZL8ISRCount>
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZL8ISRCount>
     60e:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <_ZL7Channel>
     612:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <_ZL8ISRCount>
     616:	8e 2f       	mov	r24, r30
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	fc 01       	movw	r30, r24
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	e8 0f       	add	r30, r24
     622:	f9 1f       	adc	r31, r25
     624:	e4 5b       	subi	r30, 0xB4	; 180
     626:	fb 4f       	sbci	r31, 0xFB	; 251
     628:	81 81       	ldd	r24, Z+1	; 0x01
     62a:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <_ZL7Channel>
     62e:	82 13       	cpse	r24, r18
     630:	1d c0       	rjmp	.+58     	; 0x66c <__vector_9+0x8a>
     632:	8e 2f       	mov	r24, r30
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	fc 01       	movw	r30, r24
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	e8 0f       	add	r30, r24
     63e:	f9 1f       	adc	r31, r25
     640:	e4 5b       	subi	r30, 0xB4	; 180
     642:	fb 4f       	sbci	r31, 0xFB	; 251
     644:	82 81       	ldd	r24, Z+2	; 0x02
     646:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0f be       	out	0x3f, r0	; 63
     666:	0f 90       	pop	r0
     668:	1f 90       	pop	r1
     66a:	18 95       	reti
     66c:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <_ZL8ISRCount>
     670:	8e 2f       	mov	r24, r30
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	fc 01       	movw	r30, r24
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	e8 0f       	add	r30, r24
     67c:	f9 1f       	adc	r31, r25
     67e:	e4 5b       	subi	r30, 0xB4	; 180
     680:	fb 4f       	sbci	r31, 0xFB	; 251
     682:	81 81       	ldd	r24, Z+1	; 0x01
     684:	82 17       	cp	r24, r18
     686:	08 f7       	brcc	.-62     	; 0x64a <__vector_9+0x68>
     688:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <_ZL7Channel>
     68c:	8e 2f       	mov	r24, r30
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	fc 01       	movw	r30, r24
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	e8 0f       	add	r30, r24
     698:	f9 1f       	adc	r31, r25
     69a:	e4 5b       	subi	r30, 0xB4	; 180
     69c:	fb 4f       	sbci	r31, 0xFB	; 251
     69e:	80 81       	ld	r24, Z
     6a0:	85 ff       	sbrs	r24, 5
     6a2:	10 c0       	rjmp	.+32     	; 0x6c4 <__vector_9+0xe2>
     6a4:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <_ZL7Channel>
     6a8:	8e 2f       	mov	r24, r30
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	fc 01       	movw	r30, r24
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	e8 0f       	add	r30, r24
     6b4:	f9 1f       	adc	r31, r25
     6b6:	e4 5b       	subi	r30, 0xB4	; 180
     6b8:	fb 4f       	sbci	r31, 0xFB	; 251
     6ba:	80 81       	ld	r24, Z
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	8f 71       	andi	r24, 0x1F	; 31
     6c0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     6c4:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZL7Channel>
     6c8:	8f 5f       	subi	r24, 0xFF	; 255
     6ca:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <_ZL7Channel>
     6ce:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZL8ISRCount>
     6d2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     6d6:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZL7Channel>
     6da:	88 23       	and	r24, r24
     6dc:	19 f1       	breq	.+70     	; 0x724 <__vector_9+0x142>
     6de:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZL7Channel>
     6e2:	89 30       	cpi	r24, 0x09	; 9
     6e4:	f8 f4       	brcc	.+62     	; 0x724 <__vector_9+0x142>
     6e6:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <_ZL7Channel>
     6ea:	8e 2f       	mov	r24, r30
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	fc 01       	movw	r30, r24
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	e8 0f       	add	r30, r24
     6f6:	f9 1f       	adc	r31, r25
     6f8:	e4 5b       	subi	r30, 0xB4	; 180
     6fa:	fb 4f       	sbci	r31, 0xFB	; 251
     6fc:	80 81       	ld	r24, Z
     6fe:	85 ff       	sbrs	r24, 5
     700:	a4 cf       	rjmp	.-184    	; 0x64a <__vector_9+0x68>
     702:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <_ZL7Channel>
     706:	8e 2f       	mov	r24, r30
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	fc 01       	movw	r30, r24
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	e8 0f       	add	r30, r24
     712:	f9 1f       	adc	r31, r25
     714:	e4 5b       	subi	r30, 0xB4	; 180
     716:	fb 4f       	sbci	r31, 0xFB	; 251
     718:	80 81       	ld	r24, Z
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	8f 71       	andi	r24, 0x1F	; 31
     71e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     722:	93 cf       	rjmp	.-218    	; 0x64a <__vector_9+0x68>
     724:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZL7Channel>
     728:	89 30       	cpi	r24, 0x09	; 9
     72a:	08 f4       	brcc	.+2      	; 0x72e <__vector_9+0x14c>
     72c:	8e cf       	rjmp	.-228    	; 0x64a <__vector_9+0x68>
     72e:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZL7Channel>
     732:	8b cf       	rjmp	.-234    	; 0x64a <__vector_9+0x68>

00000734 <_ZN11ServoTimer2C1Ev>:
     734:	fc 01       	movw	r30, r24
     736:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <ChannelCount>
     73a:	98 30       	cpi	r25, 0x08	; 8
     73c:	28 f4       	brcc	.+10     	; 0x748 <_ZN11ServoTimer2C1Ev+0x14>
     73e:	9f 5f       	subi	r25, 0xFF	; 255
     740:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <ChannelCount>
     744:	90 83       	st	Z, r25
     746:	08 95       	ret
     748:	10 82       	st	Z, r1
     74a:	08 95       	ret

0000074c <_ZN11ServoTimer26attachEi>:
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
     754:	16 2f       	mov	r17, r22
     756:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__data_end>
     75a:	81 11       	cpse	r24, r1
     75c:	22 c0       	rjmp	.+68     	; 0x7a2 <_ZN11ServoTimer26attachEi+0x56>
     75e:	ec e4       	ldi	r30, 0x4C	; 76
     760:	f4 e0       	ldi	r31, 0x04	; 4
     762:	84 e6       	ldi	r24, 0x64	; 100
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	3b e0       	ldi	r19, 0x0B	; 11
     768:	27 e5       	ldi	r18, 0x57	; 87
     76a:	34 83       	std	Z+4, r19	; 0x04
     76c:	25 83       	std	Z+5, r18	; 0x05
     76e:	33 96       	adiw	r30, 0x03	; 3
     770:	8e 17       	cp	r24, r30
     772:	9f 07       	cpc	r25, r31
     774:	d1 f7       	brne	.-12     	; 0x76a <_ZN11ServoTimer26attachEi+0x1e>
     776:	8e e3       	ldi	r24, 0x3E	; 62
     778:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_ZL6servos+0x1>
     77c:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZL7Channel>
     780:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZL8ISRCount>
     784:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     788:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     792:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	87 bb       	out	0x17, r24	; 23
     79a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     79e:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <__data_end>
     7a2:	88 81       	ld	r24, Y
     7a4:	88 23       	and	r24, r24
     7a6:	a1 f0       	breq	.+40     	; 0x7d0 <_ZN11ServoTimer26attachEi+0x84>
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	81 2f       	mov	r24, r17
     7ac:	0e 94 36 09 	call	0x126c	; 0x126c <pinMode>
     7b0:	e8 81       	ld	r30, Y
     7b2:	8e 2f       	mov	r24, r30
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	fc 01       	movw	r30, r24
     7b8:	ee 0f       	add	r30, r30
     7ba:	ff 1f       	adc	r31, r31
     7bc:	e8 0f       	add	r30, r24
     7be:	f9 1f       	adc	r31, r25
     7c0:	e4 5b       	subi	r30, 0xB4	; 180
     7c2:	fb 4f       	sbci	r31, 0xFB	; 251
     7c4:	1f 71       	andi	r17, 0x1F	; 31
     7c6:	60 81       	ld	r22, Z
     7c8:	60 7e       	andi	r22, 0xE0	; 224
     7ca:	61 2b       	or	r22, r17
     7cc:	60 62       	ori	r22, 0x20	; 32
     7ce:	60 83       	st	Z, r22
     7d0:	88 81       	ld	r24, Y
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	08 95       	ret

000007da <_ZN11ServoTimer25writeEi>:
     7da:	dc 01       	movw	r26, r24
     7dc:	ec 91       	ld	r30, X
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	8e 0f       	add	r24, r30
     7e2:	88 30       	cpi	r24, 0x08	; 8
     7e4:	f8 f4       	brcc	.+62     	; 0x824 <_ZN11ServoTimer25writeEi+0x4a>
     7e6:	cb 01       	movw	r24, r22
     7e8:	6b 3c       	cpi	r22, 0xCB	; 203
     7ea:	78 40       	sbci	r23, 0x08	; 8
     7ec:	14 f0       	brlt	.+4      	; 0x7f2 <_ZN11ServoTimer25writeEi+0x18>
     7ee:	8a ec       	ldi	r24, 0xCA	; 202
     7f0:	98 e0       	ldi	r25, 0x08	; 8
     7f2:	8e 3e       	cpi	r24, 0xEE	; 238
     7f4:	22 e0       	ldi	r18, 0x02	; 2
     7f6:	92 07       	cpc	r25, r18
     7f8:	14 f4       	brge	.+4      	; 0x7fe <_ZN11ServoTimer25writeEi+0x24>
     7fa:	8e ee       	ldi	r24, 0xEE	; 238
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	08 97       	sbiw	r24, 0x08	; 8
     800:	ac 01       	movw	r20, r24
     802:	44 0f       	add	r20, r20
     804:	45 2f       	mov	r20, r21
     806:	44 1f       	adc	r20, r20
     808:	55 0b       	sbc	r21, r21
     80a:	2e 2f       	mov	r18, r30
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	f9 01       	movw	r30, r18
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	e2 0f       	add	r30, r18
     816:	f3 1f       	adc	r31, r19
     818:	e4 5b       	subi	r30, 0xB4	; 180
     81a:	fb 4f       	sbci	r31, 0xFB	; 251
     81c:	41 83       	std	Z+1, r20	; 0x01
     81e:	88 0f       	add	r24, r24
     820:	80 95       	com	r24
     822:	82 83       	std	Z+2, r24	; 0x02
     824:	08 95       	ret

00000826 <StartupHook>:
     826:	08 95       	ret

00000828 <idle_hook>:
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <idle_hook+0xa>
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	8d b7       	in	r24, 0x3d	; 61
     838:	9e b7       	in	r25, 0x3e	; 62
     83a:	9a 83       	std	Y+2, r25	; 0x02
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <main_sp>
     842:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <main_sp+0x1>
     846:	89 2b       	or	r24, r25
     848:	a9 f4       	brne	.+42     	; 0x874 <idle_hook+0x4c>
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	9a 81       	ldd	r25, Y+2	; 0x02
     84e:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <main_sp+0x1>
     852:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <main_sp>
     856:	f8 94       	cli
     858:	81 e2       	ldi	r24, 0x21	; 33
     85a:	9a e0       	ldi	r25, 0x0A	; 10
     85c:	89 2b       	or	r24, r25
     85e:	11 f0       	breq	.+4      	; 0x864 <idle_hook+0x3c>
     860:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z14serialEventRunv>
     864:	78 94       	sei
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	08 95       	ret
     874:	20 91 67 04 	lds	r18, 0x0467	; 0x800467 <main_sp>
     878:	30 91 68 04 	lds	r19, 0x0468	; 0x800468 <main_sp+0x1>
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	9a 81       	ldd	r25, Y+2	; 0x02
     880:	28 17       	cp	r18, r24
     882:	39 07       	cpc	r19, r25
     884:	41 f3       	breq	.-48     	; 0x856 <idle_hook+0x2e>
     886:	f8 94       	cli
     888:	87 ea       	ldi	r24, 0xA7	; 167
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 23 05 	call	0xa46	; 0xa46 <serial_print>
     890:	01 e2       	ldi	r16, 0x21	; 33
     892:	1a e0       	ldi	r17, 0x0A	; 10
     894:	01 15       	cp	r16, r1
     896:	11 05       	cpc	r17, r1
     898:	e9 f3       	breq	.-6      	; 0x894 <idle_hook+0x6c>
     89a:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z14serialEventRunv>
     89e:	fa cf       	rjmp	.-12     	; 0x894 <idle_hook+0x6c>

000008a0 <setup>:
     8a0:	65 e0       	ldi	r22, 0x05	; 5
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	81 e9       	ldi	r24, 0x91	; 145
     8a6:	94 e0       	ldi	r25, 0x04	; 4
     8a8:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN11ServoTimer26attachEi>
     8ac:	6e ee       	ldi	r22, 0xEE	; 238
     8ae:	72 e0       	ldi	r23, 0x02	; 2
     8b0:	81 e9       	ldi	r24, 0x91	; 145
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     8b8:	64 e0       	ldi	r22, 0x04	; 4
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 e9       	ldi	r24, 0x90	; 144
     8be:	94 e0       	ldi	r25, 0x04	; 4
     8c0:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN11ServoTimer26attachEi>
     8c4:	6e ee       	ldi	r22, 0xEE	; 238
     8c6:	72 e0       	ldi	r23, 0x02	; 2
     8c8:	80 e9       	ldi	r24, 0x90	; 144
     8ca:	94 e0       	ldi	r25, 0x04	; 4
     8cc:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	44 e0       	ldi	r20, 0x04	; 4
     8d4:	64 e1       	ldi	r22, 0x14	; 20
     8d6:	88 e7       	ldi	r24, 0x78	; 120
     8d8:	94 e0       	ldi	r25, 0x04	; 4
     8da:	0e 94 07 02 	call	0x40e	; 0x40e <_ZN13LiquidCrystal5beginEhhh>
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	51 e0       	ldi	r21, 0x01	; 1
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	88 e7       	ldi	r24, 0x78	; 120
     8e6:	94 e0       	ldi	r25, 0x04	; 4
     8e8:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN13LiquidCrystal10createCharEhPh>
     8ec:	88 e7       	ldi	r24, 0x78	; 120
     8ee:	94 e0       	ldi	r25, 0x04	; 4
     8f0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN13LiquidCrystal5clearEv>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	83 e1       	ldi	r24, 0x13	; 19
     8f8:	0e 94 36 09 	call	0x126c	; 0x126c <pinMode>
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	82 e1       	ldi	r24, 0x12	; 18
     900:	0e 94 36 09 	call	0x126c	; 0x126c <pinMode>
     904:	61 e0       	ldi	r22, 0x01	; 1
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	0e 94 36 09 	call	0x126c	; 0x126c <pinMode>
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	87 e0       	ldi	r24, 0x07	; 7
     910:	0e 94 36 09 	call	0x126c	; 0x126c <pinMode>
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	87 e0       	ldi	r24, 0x07	; 7
     920:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     924:	e9 e6       	ldi	r30, 0x69	; 105
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	82 60       	ori	r24, 0x02	; 2
     92c:	80 83       	st	Z, r24
     92e:	e8 9a       	sbi	0x1d, 0	; 29
     930:	26 e0       	ldi	r18, 0x06	; 6
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	52 ec       	ldi	r21, 0xC2	; 194
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	8b e9       	ldi	r24, 0x9B	; 155
     93c:	94 e0       	ldi	r25, 0x04	; 4
     93e:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN14HardwareSerial5beginEmh>
     942:	63 ec       	ldi	r22, 0xC3	; 195
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	8b e9       	ldi	r24, 0x9B	; 155
     948:	94 e0       	ldi	r25, 0x04	; 4
     94a:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>

0000094e <ErrorHook>:
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	ec 01       	movw	r28, r24
     958:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <osEE_get_service_id>
     95c:	8c 01       	movw	r16, r24
     95e:	c4 30       	cpi	r28, 0x04	; 4
     960:	d1 05       	cpc	r29, r1
     962:	09 f4       	brne	.+2      	; 0x966 <ErrorHook+0x18>
     964:	4c c0       	rjmp	.+152    	; 0x9fe <ErrorHook+0xb0>
     966:	c8 f4       	brcc	.+50     	; 0x99a <ErrorHook+0x4c>
     968:	c1 30       	cpi	r28, 0x01	; 1
     96a:	d1 05       	cpc	r29, r1
     96c:	79 f1       	breq	.+94     	; 0x9cc <ErrorHook+0x7e>
     96e:	c3 30       	cpi	r28, 0x03	; 3
     970:	d1 05       	cpc	r29, r1
     972:	c1 f1       	breq	.+112    	; 0x9e4 <ErrorHook+0x96>
     974:	4a e0       	ldi	r20, 0x0A	; 10
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	be 01       	movw	r22, r28
     97a:	8b e9       	ldi	r24, 0x9B	; 155
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <_ZN5Print5printEii>
     982:	6f ed       	ldi	r22, 0xDF	; 223
     984:	71 e0       	ldi	r23, 0x01	; 1
     986:	8b e9       	ldi	r24, 0x9B	; 155
     988:	94 e0       	ldi	r25, 0x04	; 4
     98a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
     98e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <osEE_get_service_id>
     992:	4a e0       	ldi	r20, 0x0A	; 10
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	bc 01       	movw	r22, r24
     998:	1d c0       	rjmp	.+58     	; 0x9d4 <ErrorHook+0x86>
     99a:	c7 30       	cpi	r28, 0x07	; 7
     99c:	d1 05       	cpc	r29, r1
     99e:	c9 f1       	breq	.+114    	; 0xa12 <ErrorHook+0xc4>
     9a0:	ce 30       	cpi	r28, 0x0E	; 14
     9a2:	d1 05       	cpc	r29, r1
     9a4:	39 f7       	brne	.-50     	; 0x974 <ErrorHook+0x26>
     9a6:	60 e1       	ldi	r22, 0x10	; 16
     9a8:	72 e0       	ldi	r23, 0x02	; 2
     9aa:	8b e9       	ldi	r24, 0x9B	; 155
     9ac:	94 e0       	ldi	r25, 0x04	; 4
     9ae:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
     9b2:	06 32       	cpi	r16, 0x26	; 38
     9b4:	11 05       	cpc	r17, r1
     9b6:	c1 f5       	brne	.+112    	; 0xa28 <ErrorHook+0xda>
     9b8:	64 e2       	ldi	r22, 0x24	; 36
     9ba:	72 e0       	ldi	r23, 0x02	; 2
     9bc:	8b e9       	ldi	r24, 0x9B	; 155
     9be:	94 e0       	ldi	r25, 0x04	; 4
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     9cc:	4a e0       	ldi	r20, 0x0A	; 10
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	8b e9       	ldi	r24, 0x9B	; 155
     9d6:	94 e0       	ldi	r25, 0x04	; 4
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <_ZN5Print7printlnEii>
     9e4:	68 ed       	ldi	r22, 0xD8	; 216
     9e6:	71 e0       	ldi	r23, 0x01	; 1
     9e8:	8b e9       	ldi	r24, 0x9B	; 155
     9ea:	94 e0       	ldi	r25, 0x04	; 4
     9ec:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
     9f0:	4a e0       	ldi	r20, 0x0A	; 10
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	b8 01       	movw	r22, r16
     9f6:	8b e9       	ldi	r24, 0x9B	; 155
     9f8:	94 e0       	ldi	r25, 0x04	; 4
     9fa:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_ZN5Print7printlnEii>
     9fe:	61 ee       	ldi	r22, 0xE1	; 225
     a00:	71 e0       	ldi	r23, 0x01	; 1
     a02:	8b e9       	ldi	r24, 0x9B	; 155
     a04:	94 e0       	ldi	r25, 0x04	; 4
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
     a12:	6c ee       	ldi	r22, 0xEC	; 236
     a14:	71 e0       	ldi	r23, 0x01	; 1
     a16:	8b e9       	ldi	r24, 0x9B	; 155
     a18:	94 e0       	ldi	r25, 0x04	; 4
     a1a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
     a1e:	68 ef       	ldi	r22, 0xF8	; 248
     a20:	71 e0       	ldi	r23, 0x01	; 1
     a22:	08 32       	cpi	r16, 0x28	; 40
     a24:	11 05       	cpc	r17, r1
     a26:	51 f2       	breq	.-108    	; 0x9bc <ErrorHook+0x6e>
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <main>:
     a32:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <init>
     a36:	0e 94 50 04 	call	0x8a0	; 0x8a0 <setup>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <StartOS>
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	08 95       	ret

00000a46 <serial_print>:
     a46:	f8 94       	cli
     a48:	fc 01       	movw	r30, r24
     a4a:	01 90       	ld	r0, Z+
     a4c:	00 20       	and	r0, r0
     a4e:	e9 f7       	brne	.-6      	; 0xa4a <serial_print+0x4>
     a50:	31 97       	sbiw	r30, 0x01	; 1
     a52:	af 01       	movw	r20, r30
     a54:	48 1b       	sub	r20, r24
     a56:	59 0b       	sbc	r21, r25
     a58:	bc 01       	movw	r22, r24
     a5a:	8b e9       	ldi	r24, 0x9B	; 155
     a5c:	94 e0       	ldi	r25, 0x04	; 4
     a5e:	0e 94 af 0b 	call	0x175e	; 0x175e <_ZN5Print5writeEPKhj>
     a62:	78 94       	sei
     a64:	08 95       	ret

00000a66 <FuncClockTask>:
     a66:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <second>
     a6a:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <second+0x1>
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	8c 33       	cpi	r24, 0x3C	; 60
     a72:	91 05       	cpc	r25, r1
     a74:	41 f0       	breq	.+16     	; 0xa86 <FuncClockTask+0x20>
     a76:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <second+0x1>
     a7a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <second>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <isNewTime>
     a84:	08 95       	ret
     a86:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <second+0x1>
     a8a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <second>
     a8e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <minute>
     a92:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <minute+0x1>
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	8c 33       	cpi	r24, 0x3C	; 60
     a9a:	91 05       	cpc	r25, r1
     a9c:	29 f0       	breq	.+10     	; 0xaa8 <FuncClockTask+0x42>
     a9e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <minute+0x1>
     aa2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <minute>
     aa6:	eb cf       	rjmp	.-42     	; 0xa7e <FuncClockTask+0x18>
     aa8:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <minute+0x1>
     aac:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <minute>
     ab0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <hour>
     ab4:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <hour+0x1>
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	88 31       	cpi	r24, 0x18	; 24
     abc:	91 05       	cpc	r25, r1
     abe:	29 f0       	breq	.+10     	; 0xaca <FuncClockTask+0x64>
     ac0:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <hour+0x1>
     ac4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <hour>
     ac8:	da cf       	rjmp	.-76     	; 0xa7e <FuncClockTask+0x18>
     aca:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <hour+0x1>
     ace:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <hour>
     ad2:	d5 cf       	rjmp	.-86     	; 0xa7e <FuncClockTask+0x18>

00000ad4 <FuncToggleEastServoTask>:
     ad4:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <eastContracted>
     ad8:	88 23       	and	r24, r24
     ada:	c9 f0       	breq	.+50     	; 0xb0e <FuncToggleEastServoTask+0x3a>
     adc:	68 e4       	ldi	r22, 0x48	; 72
     ade:	73 e0       	ldi	r23, 0x03	; 3
     ae0:	8b e9       	ldi	r24, 0x9B	; 155
     ae2:	94 e0       	ldi	r25, 0x04	; 4
     ae4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     ae8:	6a ec       	ldi	r22, 0xCA	; 202
     aea:	78 e0       	ldi	r23, 0x08	; 8
     aec:	81 e9       	ldi	r24, 0x91	; 145
     aee:	94 e0       	ldi	r25, 0x04	; 4
     af0:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     af4:	6c e5       	ldi	r22, 0x5C	; 92
     af6:	73 e0       	ldi	r23, 0x03	; 3
     af8:	8b e9       	ldi	r24, 0x9B	; 155
     afa:	94 e0       	ldi	r25, 0x04	; 4
     afc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     b00:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <eastContracted>
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	89 27       	eor	r24, r25
     b08:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <eastContracted>
     b0c:	08 95       	ret
     b0e:	6f e6       	ldi	r22, 0x6F	; 111
     b10:	73 e0       	ldi	r23, 0x03	; 3
     b12:	8b e9       	ldi	r24, 0x9B	; 155
     b14:	94 e0       	ldi	r25, 0x04	; 4
     b16:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     b1a:	6e ee       	ldi	r22, 0xEE	; 238
     b1c:	72 e0       	ldi	r23, 0x02	; 2
     b1e:	81 e9       	ldi	r24, 0x91	; 145
     b20:	94 e0       	ldi	r25, 0x04	; 4
     b22:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     b26:	67 e8       	ldi	r22, 0x87	; 135
     b28:	73 e0       	ldi	r23, 0x03	; 3
     b2a:	e6 cf       	rjmp	.-52     	; 0xaf8 <FuncToggleEastServoTask+0x24>

00000b2c <FuncToggleWestServoTask>:
     b2c:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <westContracted>
     b30:	88 23       	and	r24, r24
     b32:	c9 f0       	breq	.+50     	; 0xb66 <FuncToggleWestServoTask+0x3a>
     b34:	6e e9       	ldi	r22, 0x9E	; 158
     b36:	73 e0       	ldi	r23, 0x03	; 3
     b38:	8b e9       	ldi	r24, 0x9B	; 155
     b3a:	94 e0       	ldi	r25, 0x04	; 4
     b3c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     b40:	6a ec       	ldi	r22, 0xCA	; 202
     b42:	78 e0       	ldi	r23, 0x08	; 8
     b44:	80 e9       	ldi	r24, 0x90	; 144
     b46:	94 e0       	ldi	r25, 0x04	; 4
     b48:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     b4c:	62 eb       	ldi	r22, 0xB2	; 178
     b4e:	73 e0       	ldi	r23, 0x03	; 3
     b50:	8b e9       	ldi	r24, 0x9B	; 155
     b52:	94 e0       	ldi	r25, 0x04	; 4
     b54:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     b58:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <westContracted>
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	89 27       	eor	r24, r25
     b60:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <westContracted>
     b64:	08 95       	ret
     b66:	65 ec       	ldi	r22, 0xC5	; 197
     b68:	73 e0       	ldi	r23, 0x03	; 3
     b6a:	8b e9       	ldi	r24, 0x9B	; 155
     b6c:	94 e0       	ldi	r25, 0x04	; 4
     b6e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     b72:	6e ee       	ldi	r22, 0xEE	; 238
     b74:	72 e0       	ldi	r23, 0x02	; 2
     b76:	80 e9       	ldi	r24, 0x90	; 144
     b78:	94 e0       	ldi	r25, 0x04	; 4
     b7a:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     b7e:	67 e8       	ldi	r22, 0x87	; 135
     b80:	73 e0       	ldi	r23, 0x03	; 3
     b82:	e6 cf       	rjmp	.-52     	; 0xb50 <FuncToggleWestServoTask+0x24>

00000b84 <FuncToggleServoTask>:
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	00 d0       	rcall	.+0      	; 0xb8a <FuncToggleServoTask+0x6>
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	11 e0       	ldi	r17, 0x01	; 1
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <WaitEvent>
     b98:	be 01       	movw	r22, r28
     b9a:	6f 5f       	subi	r22, 0xFF	; 255
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	86 e0       	ldi	r24, 0x06	; 6
     ba0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <GetEvent>
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	81 ff       	sbrs	r24, 1
     ba8:	1f c0       	rjmp	.+62     	; 0xbe8 <FuncToggleServoTask+0x64>
     baa:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <eastContracted>
     bae:	88 23       	and	r24, r24
     bb0:	f1 f1       	breq	.+124    	; 0xc2e <FuncToggleServoTask+0xaa>
     bb2:	68 e4       	ldi	r22, 0x48	; 72
     bb4:	73 e0       	ldi	r23, 0x03	; 3
     bb6:	8b e9       	ldi	r24, 0x9B	; 155
     bb8:	94 e0       	ldi	r25, 0x04	; 4
     bba:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     bbe:	6a ec       	ldi	r22, 0xCA	; 202
     bc0:	78 e0       	ldi	r23, 0x08	; 8
     bc2:	81 e9       	ldi	r24, 0x91	; 145
     bc4:	94 e0       	ldi	r25, 0x04	; 4
     bc6:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     bca:	6c e5       	ldi	r22, 0x5C	; 92
     bcc:	73 e0       	ldi	r23, 0x03	; 3
     bce:	8b e9       	ldi	r24, 0x9B	; 155
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     bd6:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <eastContracted>
     bda:	81 27       	eor	r24, r17
     bdc:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <eastContracted>
     be0:	82 e0       	ldi	r24, 0x02	; 2
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <ClearEvent>
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	80 ff       	sbrs	r24, 0
     bec:	d1 cf       	rjmp	.-94     	; 0xb90 <FuncToggleServoTask+0xc>
     bee:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <westContracted>
     bf2:	88 23       	and	r24, r24
     bf4:	59 f1       	breq	.+86     	; 0xc4c <FuncToggleServoTask+0xc8>
     bf6:	6e e9       	ldi	r22, 0x9E	; 158
     bf8:	73 e0       	ldi	r23, 0x03	; 3
     bfa:	8b e9       	ldi	r24, 0x9B	; 155
     bfc:	94 e0       	ldi	r25, 0x04	; 4
     bfe:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     c02:	6a ec       	ldi	r22, 0xCA	; 202
     c04:	78 e0       	ldi	r23, 0x08	; 8
     c06:	80 e9       	ldi	r24, 0x90	; 144
     c08:	94 e0       	ldi	r25, 0x04	; 4
     c0a:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     c0e:	62 eb       	ldi	r22, 0xB2	; 178
     c10:	73 e0       	ldi	r23, 0x03	; 3
     c12:	8b e9       	ldi	r24, 0x9B	; 155
     c14:	94 e0       	ldi	r25, 0x04	; 4
     c16:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     c1a:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <westContracted>
     c1e:	81 27       	eor	r24, r17
     c20:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <westContracted>
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <ClearEvent>
     c2c:	b1 cf       	rjmp	.-158    	; 0xb90 <FuncToggleServoTask+0xc>
     c2e:	6f e6       	ldi	r22, 0x6F	; 111
     c30:	73 e0       	ldi	r23, 0x03	; 3
     c32:	8b e9       	ldi	r24, 0x9B	; 155
     c34:	94 e0       	ldi	r25, 0x04	; 4
     c36:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     c3a:	6e ee       	ldi	r22, 0xEE	; 238
     c3c:	72 e0       	ldi	r23, 0x02	; 2
     c3e:	81 e9       	ldi	r24, 0x91	; 145
     c40:	94 e0       	ldi	r25, 0x04	; 4
     c42:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     c46:	67 e8       	ldi	r22, 0x87	; 135
     c48:	73 e0       	ldi	r23, 0x03	; 3
     c4a:	c1 cf       	rjmp	.-126    	; 0xbce <FuncToggleServoTask+0x4a>
     c4c:	65 ec       	ldi	r22, 0xC5	; 197
     c4e:	73 e0       	ldi	r23, 0x03	; 3
     c50:	8b e9       	ldi	r24, 0x9B	; 155
     c52:	94 e0       	ldi	r25, 0x04	; 4
     c54:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5Print7printlnEPKc>
     c58:	6e ee       	ldi	r22, 0xEE	; 238
     c5a:	72 e0       	ldi	r23, 0x02	; 2
     c5c:	80 e9       	ldi	r24, 0x90	; 144
     c5e:	94 e0       	ldi	r25, 0x04	; 4
     c60:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     c64:	67 e8       	ldi	r22, 0x87	; 135
     c66:	73 e0       	ldi	r23, 0x03	; 3
     c68:	d4 cf       	rjmp	.-88     	; 0xc12 <FuncToggleServoTask+0x8e>

00000c6a <FuncDisplayTask>:
     c6a:	8f 92       	push	r8
     c6c:	9f 92       	push	r9
     c6e:	af 92       	push	r10
     c70:	bf 92       	push	r11
     c72:	cf 92       	push	r12
     c74:	df 92       	push	r13
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	64 97       	sbiw	r28, 0x14	; 20
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	88 e7       	ldi	r24, 0x78	; 120
     c98:	94 e0       	ldi	r25, 0x04	; 4
     c9a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     c9e:	80 90 6c 04 	lds	r8, 0x046C	; 0x80046c <dataLux>
     ca2:	90 90 6d 04 	lds	r9, 0x046D	; 0x80046d <dataLux+0x1>
     ca6:	a0 90 6e 04 	lds	r10, 0x046E	; 0x80046e <dataLux+0x2>
     caa:	b0 90 6f 04 	lds	r11, 0x046F	; 0x80046f <dataLux+0x3>
     cae:	c0 90 70 04 	lds	r12, 0x0470	; 0x800470 <dataLux+0x4>
     cb2:	d0 90 71 04 	lds	r13, 0x0471	; 0x800471 <dataLux+0x5>
     cb6:	e0 90 72 04 	lds	r14, 0x0472	; 0x800472 <dataLux+0x6>
     cba:	f0 90 73 04 	lds	r15, 0x0473	; 0x800473 <dataLux+0x7>
     cbe:	c5 01       	movw	r24, r10
     cc0:	b4 01       	movw	r22, r8
     cc2:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__fixsfsi>
     cc6:	7f 93       	push	r23
     cc8:	6f 93       	push	r22
     cca:	a7 01       	movw	r20, r14
     ccc:	96 01       	movw	r18, r12
     cce:	c5 01       	movw	r24, r10
     cd0:	b4 01       	movw	r22, r8
     cd2:	0e 94 66 15 	call	0x2acc	; 0x2acc <__addsf3>
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	5f e3       	ldi	r21, 0x3F	; 63
     cde:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <__mulsf3>
     ce2:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__fixsfsi>
     ce6:	7f 93       	push	r23
     ce8:	6f 93       	push	r22
     cea:	c7 01       	movw	r24, r14
     cec:	b6 01       	movw	r22, r12
     cee:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__fixsfsi>
     cf2:	7f 93       	push	r23
     cf4:	6f 93       	push	r22
     cf6:	85 ee       	ldi	r24, 0xE5	; 229
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	9f 93       	push	r25
     cfc:	8f 93       	push	r24
     cfe:	8e 01       	movw	r16, r28
     d00:	0f 5f       	subi	r16, 0xFF	; 255
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	1f 93       	push	r17
     d06:	0f 93       	push	r16
     d08:	0e 94 50 19 	call	0x32a0	; 0x32a0 <sprintf>
     d0c:	b8 01       	movw	r22, r16
     d0e:	88 e7       	ldi	r24, 0x78	; 120
     d10:	94 e0       	ldi	r25, 0x04	; 4
     d12:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	88 e7       	ldi	r24, 0x78	; 120
     d1c:	94 e0       	ldi	r25, 0x04	; 4
     d1e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <westContracted>
     d30:	21 ee       	ldi	r18, 0xE1	; 225
     d32:	33 e0       	ldi	r19, 0x03	; 3
     d34:	88 23       	and	r24, r24
     d36:	11 f0       	breq	.+4      	; 0xd3c <FuncDisplayTask+0xd2>
     d38:	2d ed       	ldi	r18, 0xDD	; 221
     d3a:	33 e0       	ldi	r19, 0x03	; 3
     d3c:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <eastContracted>
     d40:	81 11       	cpse	r24, r1
     d42:	89 c0       	rjmp	.+274    	; 0xe56 <FuncDisplayTask+0x1ec>
     d44:	81 ee       	ldi	r24, 0xE1	; 225
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	3f 93       	push	r19
     d4a:	2f 93       	push	r18
     d4c:	9f 93       	push	r25
     d4e:	8f 93       	push	r24
     d50:	8a ef       	ldi	r24, 0xFA	; 250
     d52:	93 e0       	ldi	r25, 0x03	; 3
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24
     d58:	1f 93       	push	r17
     d5a:	0f 93       	push	r16
     d5c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <sprintf>
     d60:	b8 01       	movw	r22, r16
     d62:	88 e7       	ldi	r24, 0x78	; 120
     d64:	94 e0       	ldi	r25, 0x04	; 4
     d66:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
     d6a:	42 e0       	ldi	r20, 0x02	; 2
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	88 e7       	ldi	r24, 0x78	; 120
     d70:	94 e0       	ldi	r25, 0x04	; 4
     d72:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     d76:	87 e0       	ldi	r24, 0x07	; 7
     d78:	0e 94 a0 09 	call	0x1340	; 0x1340 <digitalRead>
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	89 2b       	or	r24, r25
     d88:	09 f0       	breq	.+2      	; 0xd8c <FuncDisplayTask+0x122>
     d8a:	68 c0       	rjmp	.+208    	; 0xe5c <FuncDisplayTask+0x1f2>
     d8c:	91 ee       	ldi	r25, 0xE1	; 225
     d8e:	e9 2e       	mov	r14, r25
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	f9 2e       	mov	r15, r25
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	0e 94 a0 09 	call	0x1340	; 0x1340 <digitalRead>
     d9a:	89 2b       	or	r24, r25
     d9c:	09 f0       	breq	.+2      	; 0xda0 <FuncDisplayTask+0x136>
     d9e:	63 c0       	rjmp	.+198    	; 0xe66 <FuncDisplayTask+0x1fc>
     da0:	81 ee       	ldi	r24, 0xE1	; 225
     da2:	93 e0       	ldi	r25, 0x03	; 3
     da4:	ff 92       	push	r15
     da6:	ef 92       	push	r14
     da8:	9f 93       	push	r25
     daa:	8f 93       	push	r24
     dac:	8c e0       	ldi	r24, 0x0C	; 12
     dae:	94 e0       	ldi	r25, 0x04	; 4
     db0:	9f 93       	push	r25
     db2:	8f 93       	push	r24
     db4:	1f 93       	push	r17
     db6:	0f 93       	push	r16
     db8:	0e 94 50 19 	call	0x32a0	; 0x32a0 <sprintf>
     dbc:	b8 01       	movw	r22, r16
     dbe:	88 e7       	ldi	r24, 0x78	; 120
     dc0:	94 e0       	ldi	r25, 0x04	; 4
     dc2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <isNewTime>
     dd4:	88 23       	and	r24, r24
     dd6:	51 f1       	breq	.+84     	; 0xe2c <FuncDisplayTask+0x1c2>
     dd8:	43 e0       	ldi	r20, 0x03	; 3
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	88 e7       	ldi	r24, 0x78	; 120
     dde:	94 e0       	ldi	r25, 0x04	; 4
     de0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     de4:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <second+0x1>
     de8:	8f 93       	push	r24
     dea:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <second>
     dee:	8f 93       	push	r24
     df0:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <minute+0x1>
     df4:	8f 93       	push	r24
     df6:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <minute>
     dfa:	8f 93       	push	r24
     dfc:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <hour+0x1>
     e00:	8f 93       	push	r24
     e02:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <hour>
     e06:	8f 93       	push	r24
     e08:	8e e1       	ldi	r24, 0x1E	; 30
     e0a:	94 e0       	ldi	r25, 0x04	; 4
     e0c:	9f 93       	push	r25
     e0e:	8f 93       	push	r24
     e10:	1f 93       	push	r17
     e12:	0f 93       	push	r16
     e14:	0e 94 50 19 	call	0x32a0	; 0x32a0 <sprintf>
     e18:	b8 01       	movw	r22, r16
     e1a:	88 e7       	ldi	r24, 0x78	; 120
     e1c:	94 e0       	ldi	r25, 0x04	; 4
     e1e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <TerminateTask>
     e30:	64 96       	adiw	r28, 0x14	; 20
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	df 90       	pop	r13
     e4a:	cf 90       	pop	r12
     e4c:	bf 90       	pop	r11
     e4e:	af 90       	pop	r10
     e50:	9f 90       	pop	r9
     e52:	8f 90       	pop	r8
     e54:	08 95       	ret
     e56:	8d ed       	ldi	r24, 0xDD	; 221
     e58:	93 e0       	ldi	r25, 0x03	; 3
     e5a:	76 cf       	rjmp	.-276    	; 0xd48 <FuncDisplayTask+0xde>
     e5c:	8d ed       	ldi	r24, 0xDD	; 221
     e5e:	e8 2e       	mov	r14, r24
     e60:	83 e0       	ldi	r24, 0x03	; 3
     e62:	f8 2e       	mov	r15, r24
     e64:	97 cf       	rjmp	.-210    	; 0xd94 <FuncDisplayTask+0x12a>
     e66:	8d ed       	ldi	r24, 0xDD	; 221
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	9c cf       	rjmp	.-200    	; 0xda4 <FuncDisplayTask+0x13a>

00000e6c <getLux>:
     e6c:	cf 92       	push	r12
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	bc 01       	movw	r22, r24
     e76:	99 0f       	add	r25, r25
     e78:	88 0b       	sbc	r24, r24
     e7a:	99 0b       	sbc	r25, r25
     e7c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__floatsisf>
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 ec       	ldi	r19, 0xC0	; 192
     e84:	4f e7       	ldi	r20, 0x7F	; 127
     e86:	54 e4       	ldi	r21, 0x44	; 68
     e88:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divsf3>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 ea       	ldi	r20, 0xA0	; 160
     e92:	50 e4       	ldi	r21, 0x40	; 64
     e94:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <__mulsf3>
     e98:	6b 01       	movw	r12, r22
     e9a:	7c 01       	movw	r14, r24
     e9c:	ac 01       	movw	r20, r24
     e9e:	9b 01       	movw	r18, r22
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	80 ea       	ldi	r24, 0xA0	; 160
     ea6:	90 e4       	ldi	r25, 0x40	; 64
     ea8:	0e 94 65 15 	call	0x2aca	; 0x2aca <__subsf3>
     eac:	a7 01       	movw	r20, r14
     eae:	96 01       	movw	r18, r12
     eb0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divsf3>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e4       	ldi	r19, 0x40	; 64
     eb8:	4c e9       	ldi	r20, 0x9C	; 156
     eba:	55 e4       	ldi	r21, 0x45	; 69
     ebc:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <__mulsf3>
     ec0:	22 ec       	ldi	r18, 0xC2	; 194
     ec2:	3f e2       	ldi	r19, 0x2F	; 47
     ec4:	45 e9       	ldi	r20, 0x95	; 149
     ec6:	5f eb       	ldi	r21, 0xBF	; 191
     ec8:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <pow>
     ecc:	2e e1       	ldi	r18, 0x1E	; 30
     ece:	38 e4       	ldi	r19, 0x48	; 72
     ed0:	49 e5       	ldi	r20, 0x59	; 89
     ed2:	59 e4       	ldi	r21, 0x49	; 73
     ed4:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <__mulsf3>
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	cf 90       	pop	r12
     ee0:	08 95       	ret

00000ee2 <FuncDetectTask>:
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	83 e1       	ldi	r24, 0x13	; 19
     ef0:	0e 94 c9 09 	call	0x1392	; 0x1392 <analogRead>
     ef4:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <dataRaw+0x1>
     ef8:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <dataRaw>
     efc:	82 e1       	ldi	r24, 0x12	; 18
     efe:	0e 94 c9 09 	call	0x1392	; 0x1392 <analogRead>
     f02:	ec 01       	movw	r28, r24
     f04:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <dataRaw+0x3>
     f08:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <dataRaw+0x2>
     f0c:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <dataRaw>
     f10:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <dataRaw+0x1>
     f14:	0e 94 36 07 	call	0xe6c	; 0xe6c <getLux>
     f18:	6b 01       	movw	r12, r22
     f1a:	7c 01       	movw	r14, r24
     f1c:	c0 92 6c 04 	sts	0x046C, r12	; 0x80046c <dataLux>
     f20:	d0 92 6d 04 	sts	0x046D, r13	; 0x80046d <dataLux+0x1>
     f24:	e0 92 6e 04 	sts	0x046E, r14	; 0x80046e <dataLux+0x2>
     f28:	f0 92 6f 04 	sts	0x046F, r15	; 0x80046f <dataLux+0x3>
     f2c:	ce 01       	movw	r24, r28
     f2e:	0e 94 36 07 	call	0xe6c	; 0xe6c <getLux>
     f32:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <dataLux+0x4>
     f36:	70 93 71 04 	sts	0x0471, r23	; 0x800471 <dataLux+0x5>
     f3a:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <dataLux+0x6>
     f3e:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <dataLux+0x7>
     f42:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <hour>
     f46:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <hour+0x1>
     f4a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <minute>
     f4e:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <minute+0x1>
     f52:	22 31       	cpi	r18, 0x12	; 18
     f54:	31 05       	cpc	r19, r1
     f56:	3c f1       	brlt	.+78     	; 0xfa6 <FuncDetectTask+0xc4>
     f58:	8e 31       	cpi	r24, 0x1E	; 30
     f5a:	91 05       	cpc	r25, r1
     f5c:	54 f5       	brge	.+84     	; 0xfb2 <FuncDetectTask+0xd0>
     f5e:	4e 97       	sbiw	r24, 0x1e	; 30
     f60:	0c f4       	brge	.+2      	; 0xf64 <FuncDetectTask+0x82>
     f62:	3e c0       	rjmp	.+124    	; 0xfe0 <FuncDetectTask+0xfe>
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	48 e4       	ldi	r20, 0x48	; 72
     f6a:	53 e4       	ldi	r21, 0x43	; 67
     f6c:	c7 01       	movw	r24, r14
     f6e:	b6 01       	movw	r22, r12
     f70:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <__cmpsf2>
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	18 16       	cp	r1, r24
     f78:	0c f4       	brge	.+2      	; 0xf7c <FuncDetectTask+0x9a>
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	48 e4       	ldi	r20, 0x48	; 72
     f88:	53 e4       	ldi	r21, 0x43	; 67
     f8a:	60 91 70 04 	lds	r22, 0x0470	; 0x800470 <dataLux+0x4>
     f8e:	70 91 71 04 	lds	r23, 0x0471	; 0x800471 <dataLux+0x5>
     f92:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <dataLux+0x6>
     f96:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <dataLux+0x7>
     f9a:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <__cmpsf2>
     f9e:	18 16       	cp	r1, r24
     fa0:	b4 f4       	brge	.+44     	; 0xfce <FuncDetectTask+0xec>
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	15 c0       	rjmp	.+42     	; 0xfd0 <FuncDetectTask+0xee>
     fa6:	27 30       	cpi	r18, 0x07	; 7
     fa8:	31 05       	cpc	r19, r1
     faa:	cc f6       	brge	.-78     	; 0xf5e <FuncDetectTask+0x7c>
     fac:	8e 31       	cpi	r24, 0x1E	; 30
     fae:	91 05       	cpc	r25, r1
     fb0:	9c f4       	brge	.+38     	; 0xfd8 <FuncDetectTask+0xf6>
     fb2:	83 e0       	ldi	r24, 0x03	; 3
     fb4:	0e 94 a0 09 	call	0x1340	; 0x1340 <digitalRead>
     fb8:	89 2b       	or	r24, r25
     fba:	21 f4       	brne	.+8      	; 0xfc4 <FuncDetectTask+0xe2>
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     fc4:	87 e0       	ldi	r24, 0x07	; 7
     fc6:	0e 94 a0 09 	call	0x1340	; 0x1340 <digitalRead>
     fca:	89 2b       	or	r24, r25
     fcc:	49 f4       	brne	.+18     	; 0xfe0 <FuncDetectTask+0xfe>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	87 e0       	ldi	r24, 0x07	; 7
     fd2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <digitalWrite>
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <FuncDetectTask+0xfe>
     fd8:	26 30       	cpi	r18, 0x06	; 6
     fda:	31 05       	cpc	r19, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <FuncDetectTask+0xfe>
     fde:	bf cf       	rjmp	.-130    	; 0xf5e <FuncDetectTask+0x7c>
     fe0:	c0 90 6c 04 	lds	r12, 0x046C	; 0x80046c <dataLux>
     fe4:	d0 90 6d 04 	lds	r13, 0x046D	; 0x80046d <dataLux+0x1>
     fe8:	e0 90 6e 04 	lds	r14, 0x046E	; 0x80046e <dataLux+0x2>
     fec:	f0 90 6f 04 	lds	r15, 0x046F	; 0x80046f <dataLux+0x3>
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	4a ef       	ldi	r20, 0xFA	; 250
     ff6:	53 e4       	ldi	r21, 0x43	; 67
     ff8:	c7 01       	movw	r24, r14
     ffa:	b6 01       	movw	r22, r12
     ffc:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <__cmpsf2>
    1000:	87 ff       	sbrs	r24, 7
    1002:	2c c0       	rjmp	.+88     	; 0x105c <FuncDetectTask+0x17a>
    1004:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <eastContracted>
    1008:	81 11       	cpse	r24, r1
    100a:	46 c0       	rjmp	.+140    	; 0x1098 <FuncDetectTask+0x1b6>
    100c:	62 e0       	ldi	r22, 0x02	; 2
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	86 e0       	ldi	r24, 0x06	; 6
    1012:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <SetEvent>
    1016:	c0 90 70 04 	lds	r12, 0x0470	; 0x800470 <dataLux+0x4>
    101a:	d0 90 71 04 	lds	r13, 0x0471	; 0x800471 <dataLux+0x5>
    101e:	e0 90 72 04 	lds	r14, 0x0472	; 0x800472 <dataLux+0x6>
    1022:	f0 90 73 04 	lds	r15, 0x0473	; 0x800473 <dataLux+0x7>
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	4a ef       	ldi	r20, 0xFA	; 250
    102c:	53 e4       	ldi	r21, 0x43	; 67
    102e:	c7 01       	movw	r24, r14
    1030:	b6 01       	movw	r22, r12
    1032:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <__cmpsf2>
    1036:	87 ff       	sbrs	r24, 7
    1038:	20 c0       	rjmp	.+64     	; 0x107a <FuncDetectTask+0x198>
    103a:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <westContracted>
    103e:	81 11       	cpse	r24, r1
    1040:	36 c0       	rjmp	.+108    	; 0x10ae <FuncDetectTask+0x1cc>
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	86 e0       	ldi	r24, 0x06	; 6
    1048:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <SetEvent>
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <TerminateTask>
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	4a ef       	ldi	r20, 0xFA	; 250
    1062:	53 e4       	ldi	r21, 0x43	; 67
    1064:	c7 01       	movw	r24, r14
    1066:	b6 01       	movw	r22, r12
    1068:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__gesf2>
    106c:	87 fd       	sbrc	r24, 7
    106e:	d3 cf       	rjmp	.-90     	; 0x1016 <FuncDetectTask+0x134>
    1070:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <eastContracted>
    1074:	88 23       	and	r24, r24
    1076:	79 f2       	breq	.-98     	; 0x1016 <FuncDetectTask+0x134>
    1078:	c9 cf       	rjmp	.-110    	; 0x100c <FuncDetectTask+0x12a>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	4a ef       	ldi	r20, 0xFA	; 250
    1080:	53 e4       	ldi	r21, 0x43	; 67
    1082:	c7 01       	movw	r24, r14
    1084:	b6 01       	movw	r22, r12
    1086:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__gesf2>
    108a:	87 fd       	sbrc	r24, 7
    108c:	df cf       	rjmp	.-66     	; 0x104c <FuncDetectTask+0x16a>
    108e:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <westContracted>
    1092:	88 23       	and	r24, r24
    1094:	d9 f2       	breq	.-74     	; 0x104c <FuncDetectTask+0x16a>
    1096:	d5 cf       	rjmp	.-86     	; 0x1042 <FuncDetectTask+0x160>
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	4a ef       	ldi	r20, 0xFA	; 250
    109e:	53 e4       	ldi	r21, 0x43	; 67
    10a0:	c7 01       	movw	r24, r14
    10a2:	b6 01       	movw	r22, r12
    10a4:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__gesf2>
    10a8:	87 fd       	sbrc	r24, 7
    10aa:	b5 cf       	rjmp	.-150    	; 0x1016 <FuncDetectTask+0x134>
    10ac:	af cf       	rjmp	.-162    	; 0x100c <FuncDetectTask+0x12a>
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	4a ef       	ldi	r20, 0xFA	; 250
    10b4:	53 e4       	ldi	r21, 0x43	; 67
    10b6:	c7 01       	movw	r24, r14
    10b8:	b6 01       	movw	r22, r12
    10ba:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__gesf2>
    10be:	87 fd       	sbrc	r24, 7
    10c0:	c5 cf       	rjmp	.-118    	; 0x104c <FuncDetectTask+0x16a>
    10c2:	bf cf       	rjmp	.-130    	; 0x1042 <FuncDetectTask+0x160>

000010c4 <_GLOBAL__sub_I_eastServo>:
    10c4:	cf 92       	push	r12
    10c6:	ef 92       	push	r14
    10c8:	0f 93       	push	r16
    10ca:	81 e9       	ldi	r24, 0x91	; 145
    10cc:	94 e0       	ldi	r25, 0x04	; 4
    10ce:	0e 94 9a 03 	call	0x734	; 0x734 <_ZN11ServoTimer2C1Ev>
    10d2:	80 e9       	ldi	r24, 0x90	; 144
    10d4:	94 e0       	ldi	r25, 0x04	; 4
    10d6:	0e 94 9a 03 	call	0x734	; 0x734 <_ZN11ServoTimer2C1Ev>
    10da:	8d e0       	ldi	r24, 0x0D	; 13
    10dc:	c8 2e       	mov	r12, r24
    10de:	9c e0       	ldi	r25, 0x0C	; 12
    10e0:	e9 2e       	mov	r14, r25
    10e2:	0b e0       	ldi	r16, 0x0B	; 11
    10e4:	2a e0       	ldi	r18, 0x0A	; 10
    10e6:	49 e0       	ldi	r20, 0x09	; 9
    10e8:	68 e0       	ldi	r22, 0x08	; 8
    10ea:	88 e7       	ldi	r24, 0x78	; 120
    10ec:	94 e0       	ldi	r25, 0x04	; 4
    10ee:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN13LiquidCrystalC1Ehhhhhh>
    10f2:	0f 91       	pop	r16
    10f4:	ef 90       	pop	r14
    10f6:	cf 90       	pop	r12
    10f8:	08 95       	ret

000010fa <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	2f 93       	push	r18
    1106:	3f 93       	push	r19
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <timer0_millis>
    1114:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <timer0_millis+0x1>
    1118:	a0 91 95 04 	lds	r26, 0x0495	; 0x800495 <timer0_millis+0x2>
    111c:	b0 91 96 04 	lds	r27, 0x0496	; 0x800496 <timer0_millis+0x3>
    1120:	30 91 92 04 	lds	r19, 0x0492	; 0x800492 <timer0_fract>
    1124:	23 e0       	ldi	r18, 0x03	; 3
    1126:	23 0f       	add	r18, r19
    1128:	2d 37       	cpi	r18, 0x7D	; 125
    112a:	58 f5       	brcc	.+86     	; 0x1182 <__vector_16+0x88>
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	a1 1d       	adc	r26, r1
    1130:	b1 1d       	adc	r27, r1
    1132:	20 93 92 04 	sts	0x0492, r18	; 0x800492 <timer0_fract>
    1136:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <timer0_millis>
    113a:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <timer0_millis+0x1>
    113e:	a0 93 95 04 	sts	0x0495, r26	; 0x800495 <timer0_millis+0x2>
    1142:	b0 93 96 04 	sts	0x0496, r27	; 0x800496 <timer0_millis+0x3>
    1146:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <timer0_overflow_count>
    114a:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <timer0_overflow_count+0x1>
    114e:	a0 91 99 04 	lds	r26, 0x0499	; 0x800499 <timer0_overflow_count+0x2>
    1152:	b0 91 9a 04 	lds	r27, 0x049A	; 0x80049a <timer0_overflow_count+0x3>
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	a1 1d       	adc	r26, r1
    115a:	b1 1d       	adc	r27, r1
    115c:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <timer0_overflow_count>
    1160:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <timer0_overflow_count+0x1>
    1164:	a0 93 99 04 	sts	0x0499, r26	; 0x800499 <timer0_overflow_count+0x2>
    1168:	b0 93 9a 04 	sts	0x049A, r27	; 0x80049a <timer0_overflow_count+0x3>
    116c:	bf 91       	pop	r27
    116e:	af 91       	pop	r26
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti
    1182:	26 e8       	ldi	r18, 0x86	; 134
    1184:	23 0f       	add	r18, r19
    1186:	02 96       	adiw	r24, 0x02	; 2
    1188:	a1 1d       	adc	r26, r1
    118a:	b1 1d       	adc	r27, r1
    118c:	d2 cf       	rjmp	.-92     	; 0x1132 <__vector_16+0x38>

0000118e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	91 05       	cpc	r25, r1
    1192:	38 f0       	brcs	.+14     	; 0x11a2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    119c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <delayMicroseconds+0x10>
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
    11a2:	08 95       	ret

000011a4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    11a4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    11a6:	84 b5       	in	r24, 0x24	; 36
    11a8:	82 60       	ori	r24, 0x02	; 2
    11aa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    11ac:	84 b5       	in	r24, 0x24	; 36
    11ae:	81 60       	ori	r24, 0x01	; 1
    11b0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    11b2:	85 b5       	in	r24, 0x25	; 37
    11b4:	82 60       	ori	r24, 0x02	; 2
    11b6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    11b8:	85 b5       	in	r24, 0x25	; 37
    11ba:	81 60       	ori	r24, 0x01	; 1
    11bc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    11be:	ee e6       	ldi	r30, 0x6E	; 110
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	81 60       	ori	r24, 0x01	; 1
    11c6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    11c8:	e1 e8       	ldi	r30, 0x81	; 129
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    11ce:	80 81       	ld	r24, Z
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    11d4:	80 81       	ld	r24, Z
    11d6:	81 60       	ori	r24, 0x01	; 1
    11d8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    11da:	e0 e8       	ldi	r30, 0x80	; 128
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	81 60       	ori	r24, 0x01	; 1
    11e2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    11e4:	e1 eb       	ldi	r30, 0xB1	; 177
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	84 60       	ori	r24, 0x04	; 4
    11ec:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    11ee:	e0 eb       	ldi	r30, 0xB0	; 176
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    11f8:	ea e7       	ldi	r30, 0x7A	; 122
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	84 60       	ori	r24, 0x04	; 4
    1200:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1202:	80 81       	ld	r24, Z
    1204:	82 60       	ori	r24, 0x02	; 2
    1206:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1208:	80 81       	ld	r24, Z
    120a:	81 60       	ori	r24, 0x01	; 1
    120c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    120e:	80 81       	ld	r24, Z
    1210:	80 68       	ori	r24, 0x80	; 128
    1212:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1214:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
#endif
}
    1218:	08 95       	ret

0000121a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    121a:	83 30       	cpi	r24, 0x03	; 3
    121c:	81 f0       	breq	.+32     	; 0x123e <turnOffPWM+0x24>
    121e:	28 f4       	brcc	.+10     	; 0x122a <turnOffPWM+0x10>
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	99 f0       	breq	.+38     	; 0x124a <turnOffPWM+0x30>
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	a9 f0       	breq	.+42     	; 0x1252 <turnOffPWM+0x38>
    1228:	08 95       	ret
    122a:	87 30       	cpi	r24, 0x07	; 7
    122c:	a9 f0       	breq	.+42     	; 0x1258 <turnOffPWM+0x3e>
    122e:	88 30       	cpi	r24, 0x08	; 8
    1230:	c9 f0       	breq	.+50     	; 0x1264 <turnOffPWM+0x4a>
    1232:	84 30       	cpi	r24, 0x04	; 4
    1234:	b1 f4       	brne	.+44     	; 0x1262 <turnOffPWM+0x48>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1236:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    123a:	8f 7d       	andi	r24, 0xDF	; 223
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    123e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1242:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1244:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1248:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    124a:	84 b5       	in	r24, 0x24	; 36
    124c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    124e:	84 bd       	out	0x24, r24	; 36
    1250:	08 95       	ret
    1252:	84 b5       	in	r24, 0x24	; 36
    1254:	8f 7d       	andi	r24, 0xDF	; 223
    1256:	fb cf       	rjmp	.-10     	; 0x124e <turnOffPWM+0x34>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1258:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    125c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    125e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
    1262:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1264:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1268:	8f 7d       	andi	r24, 0xDF	; 223
    126a:	f9 cf       	rjmp	.-14     	; 0x125e <turnOffPWM+0x44>

0000126c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	fc 01       	movw	r30, r24
    1274:	e2 50       	subi	r30, 0x02	; 2
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    127a:	8e 5e       	subi	r24, 0xEE	; 238
    127c:	9e 4f       	sbci	r25, 0xFE	; 254
    127e:	fc 01       	movw	r30, r24
    1280:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1282:	88 23       	and	r24, r24
    1284:	c9 f0       	breq	.+50     	; 0x12b8 <pinMode+0x4c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	fc 01       	movw	r30, r24
    128e:	e6 5c       	subi	r30, 0xC6	; 198
    1290:	fe 4f       	sbci	r31, 0xFE	; 254
    1292:	a5 91       	lpm	r26, Z+
    1294:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    1296:	fc 01       	movw	r30, r24
    1298:	e0 5d       	subi	r30, 0xD0	; 208
    129a:	fe 4f       	sbci	r31, 0xFE	; 254
    129c:	c5 91       	lpm	r28, Z+
    129e:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    12a0:	61 11       	cpse	r22, r1
    12a2:	0d c0       	rjmp	.+26     	; 0x12be <pinMode+0x52>
		uint8_t oldSREG = SREG;
    12a4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    12a6:	f8 94       	cli
		*reg &= ~bit;
    12a8:	8c 91       	ld	r24, X
    12aa:	20 95       	com	r18
    12ac:	82 23       	and	r24, r18
    12ae:	8c 93       	st	X, r24
		*out &= ~bit;
    12b0:	88 81       	ld	r24, Y
    12b2:	28 23       	and	r18, r24
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out |= bit;
    12b4:	28 83       	st	Y, r18
		SREG = oldSREG;
    12b6:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    12be:	62 30       	cpi	r22, 0x02	; 2
    12c0:	51 f4       	brne	.+20     	; 0x12d6 <pinMode+0x6a>
		uint8_t oldSREG = SREG;
    12c2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    12c4:	f8 94       	cli
		*reg &= ~bit;
    12c6:	3c 91       	ld	r19, X
    12c8:	82 2f       	mov	r24, r18
    12ca:	80 95       	com	r24
    12cc:	83 23       	and	r24, r19
    12ce:	8c 93       	st	X, r24
		*out |= bit;
    12d0:	e8 81       	ld	r30, Y
    12d2:	2e 2b       	or	r18, r30
    12d4:	ef cf       	rjmp	.-34     	; 0x12b4 <pinMode+0x48>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    12d6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    12d8:	f8 94       	cli
		*reg |= bit;
    12da:	ec 91       	ld	r30, X
    12dc:	2e 2b       	or	r18, r30
    12de:	2c 93       	st	X, r18
		SREG = oldSREG;
    12e0:	8f bf       	out	0x3f, r24	; 63
    12e2:	ea cf       	rjmp	.-44     	; 0x12b8 <pinMode+0x4c>

000012e4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	f9 01       	movw	r30, r18
    12f0:	e6 51       	subi	r30, 0x16	; 22
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    12f6:	f9 01       	movw	r30, r18
    12f8:	e2 50       	subi	r30, 0x02	; 2
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    12fe:	f9 01       	movw	r30, r18
    1300:	ee 5e       	subi	r30, 0xEE	; 238
    1302:	fe 4f       	sbci	r31, 0xFE	; 254
    1304:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1306:	cc 23       	and	r28, r28
    1308:	a9 f0       	breq	.+42     	; 0x1334 <digitalWrite+0x50>
    130a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    130c:	81 11       	cpse	r24, r1
    130e:	0e 94 0d 09 	call	0x121a	; 0x121a <turnOffPWM>

	out = portOutputRegister(port);
    1312:	ec 2f       	mov	r30, r28
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	e0 5d       	subi	r30, 0xD0	; 208
    131c:	fe 4f       	sbci	r31, 0xFE	; 254
    131e:	a5 91       	lpm	r26, Z+
    1320:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1322:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1324:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    1326:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    1328:	11 11       	cpse	r17, r1
    132a:	08 c0       	rjmp	.+16     	; 0x133c <digitalWrite+0x58>
		*out &= ~bit;
    132c:	d0 95       	com	r29
    132e:	de 23       	and	r29, r30
	} else {
		*out |= bit;
    1330:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1332:	8f bf       	out	0x3f, r24	; 63
}
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	08 95       	ret
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
    133c:	de 2b       	or	r29, r30
    133e:	f8 cf       	rjmp	.-16     	; 0x1330 <digitalWrite+0x4c>

00001340 <digitalRead>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	f9 01       	movw	r30, r18
    134a:	e6 51       	subi	r30, 0x16	; 22
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1350:	f9 01       	movw	r30, r18
    1352:	e2 50       	subi	r30, 0x02	; 2
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1358:	f9 01       	movw	r30, r18
    135a:	ee 5e       	subi	r30, 0xEE	; 238
    135c:	fe 4f       	sbci	r31, 0xFE	; 254
    135e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1360:	cc 23       	and	r28, r28
    1362:	a1 f0       	breq	.+40     	; 0x138c <digitalRead+0x4c>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1364:	81 11       	cpse	r24, r1
    1366:	0e 94 0d 09 	call	0x121a	; 0x121a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    136a:	ec 2f       	mov	r30, r28
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	ee 0f       	add	r30, r30
    1370:	ff 1f       	adc	r31, r31
    1372:	ea 5d       	subi	r30, 0xDA	; 218
    1374:	fe 4f       	sbci	r31, 0xFE	; 254
    1376:	a5 91       	lpm	r26, Z+
    1378:	b4 91       	lpm	r27, Z
    137a:	ec 91       	ld	r30, X
    137c:	ed 23       	and	r30, r29
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	09 f4       	brne	.+2      	; 0x1386 <digitalRead+0x46>
    1384:	80 e0       	ldi	r24, 0x00	; 0
	return LOW;
}
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	08 95       	ret
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	fa cf       	rjmp	.-12     	; 0x1386 <digitalRead+0x46>

00001392 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1392:	8e 30       	cpi	r24, 0x0E	; 14
    1394:	08 f0       	brcs	.+2      	; 0x1398 <analogRead+0x6>
    1396:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1398:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <analog_reference>
    139c:	90 e4       	ldi	r25, 0x40	; 64
    139e:	29 9f       	mul	r18, r25
    13a0:	90 01       	movw	r18, r0
    13a2:	11 24       	eor	r1, r1
    13a4:	87 70       	andi	r24, 0x07	; 7
    13a6:	82 2b       	or	r24, r18
    13a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    13ac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    13b0:	80 64       	ori	r24, 0x40	; 64
    13b2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    13b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    13ba:	86 fd       	sbrc	r24, 6
    13bc:	fc cf       	rjmp	.-8      	; 0x13b6 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    13be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    13c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    13c6:	08 95       	ret

000013c8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    13c8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    13ca:	91 8d       	ldd	r25, Z+25	; 0x19
    13cc:	22 8d       	ldd	r18, Z+26	; 0x1a
    13ce:	89 2f       	mov	r24, r25
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	80 5c       	subi	r24, 0xC0	; 192
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	82 1b       	sub	r24, r18
    13d8:	91 09       	sbc	r25, r1
}
    13da:	8f 73       	andi	r24, 0x3F	; 63
    13dc:	99 27       	eor	r25, r25
    13de:	08 95       	ret

000013e0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    13e0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    13e2:	91 8d       	ldd	r25, Z+25	; 0x19
    13e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    13e6:	98 17       	cp	r25, r24
    13e8:	31 f0       	breq	.+12     	; 0x13f6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    13ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    13ec:	e8 0f       	add	r30, r24
    13ee:	f1 1d       	adc	r31, r1
    13f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    13f6:	8f ef       	ldi	r24, 0xFF	; 255
    13f8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    13fa:	08 95       	ret

000013fc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    13fc:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    13fe:	91 8d       	ldd	r25, Z+25	; 0x19
    1400:	82 8d       	ldd	r24, Z+26	; 0x1a
    1402:	98 17       	cp	r25, r24
    1404:	61 f0       	breq	.+24     	; 0x141e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1406:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1408:	ae 0f       	add	r26, r30
    140a:	bf 2f       	mov	r27, r31
    140c:	b1 1d       	adc	r27, r1
    140e:	5d 96       	adiw	r26, 0x1d	; 29
    1410:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1412:	92 8d       	ldd	r25, Z+26	; 0x1a
    1414:	9f 5f       	subi	r25, 0xFF	; 255
    1416:	9f 73       	andi	r25, 0x3F	; 63
    1418:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1422:	08 95       	ret

00001424 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1424:	fc 01       	movw	r30, r24
    1426:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1428:	44 8d       	ldd	r20, Z+28	; 0x1c
    142a:	25 2f       	mov	r18, r21
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	84 2f       	mov	r24, r20
    1430:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1432:	82 1b       	sub	r24, r18
    1434:	93 0b       	sbc	r25, r19
    1436:	54 17       	cp	r21, r20
    1438:	10 f0       	brcs	.+4      	; 0x143e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    143a:	cf 96       	adiw	r24, 0x3f	; 63
    143c:	08 95       	ret
  return tail - head - 1;
    143e:	01 97       	sbiw	r24, 0x01	; 1
}
    1440:	08 95       	ret

00001442 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1442:	88 e7       	ldi	r24, 0x78	; 120
    1444:	9b e0       	ldi	r25, 0x0B	; 11
    1446:	89 2b       	or	r24, r25
    1448:	49 f0       	breq	.+18     	; 0x145c <_Z14serialEventRunv+0x1a>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	89 2b       	or	r24, r25
    1450:	29 f0       	breq	.+10     	; 0x145c <_Z14serialEventRunv+0x1a>
    1452:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_Z17Serial0_availablev>
    1456:	81 11       	cpse	r24, r1
    1458:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    145c:	08 95       	ret

0000145e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    145e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1460:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1462:	a8 0f       	add	r26, r24
    1464:	b9 2f       	mov	r27, r25
    1466:	b1 1d       	adc	r27, r1
    1468:	a3 5a       	subi	r26, 0xA3	; 163
    146a:	bf 4f       	sbci	r27, 0xFF	; 255
    146c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    146e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	8f 73       	andi	r24, 0x3F	; 63
    1476:	99 27       	eor	r25, r25
    1478:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    147a:	a6 89       	ldd	r26, Z+22	; 0x16
    147c:	b7 89       	ldd	r27, Z+23	; 0x17
    147e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1480:	a0 89       	ldd	r26, Z+16	; 0x10
    1482:	b1 89       	ldd	r27, Z+17	; 0x11
    1484:	8c 91       	ld	r24, X
    1486:	83 70       	andi	r24, 0x03	; 3
    1488:	80 64       	ori	r24, 0x40	; 64
    148a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    148c:	93 8d       	ldd	r25, Z+27	; 0x1b
    148e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1490:	98 13       	cpse	r25, r24
    1492:	06 c0       	rjmp	.+12     	; 0x14a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1494:	02 88       	ldd	r0, Z+18	; 0x12
    1496:	f3 89       	ldd	r31, Z+19	; 0x13
    1498:	e0 2d       	mov	r30, r0
    149a:	80 81       	ld	r24, Z
    149c:	8f 7d       	andi	r24, 0xDF	; 223
    149e:	80 83       	st	Z, r24
  }
}
    14a0:	08 95       	ret

000014a2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    14a8:	88 8d       	ldd	r24, Y+24	; 0x18
    14aa:	88 23       	and	r24, r24
    14ac:	b9 f0       	breq	.+46     	; 0x14dc <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    14ae:	aa 89       	ldd	r26, Y+18	; 0x12
    14b0:	bb 89       	ldd	r27, Y+19	; 0x13
    14b2:	e8 89       	ldd	r30, Y+16	; 0x10
    14b4:	f9 89       	ldd	r31, Y+17	; 0x11
    14b6:	8c 91       	ld	r24, X
    14b8:	85 fd       	sbrc	r24, 5
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <_ZN14HardwareSerial5flushEv+0x20>
    14bc:	80 81       	ld	r24, Z
    14be:	86 fd       	sbrc	r24, 6
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	07 fc       	sbrc	r0, 7
    14c6:	f7 cf       	rjmp	.-18     	; 0x14b6 <_ZN14HardwareSerial5flushEv+0x14>
    14c8:	8c 91       	ld	r24, X
    14ca:	85 ff       	sbrs	r24, 5
    14cc:	f2 cf       	rjmp	.-28     	; 0x14b2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    14ce:	80 81       	ld	r24, Z
    14d0:	85 ff       	sbrs	r24, 5
    14d2:	ed cf       	rjmp	.-38     	; 0x14ae <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
    14d4:	ce 01       	movw	r24, r28
    14d6:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    14da:	e9 cf       	rjmp	.-46     	; 0x14ae <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	08 95       	ret

000014e2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    14e2:	ef 92       	push	r14
    14e4:	ff 92       	push	r15
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	ec 01       	movw	r28, r24
  _written = true;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    14f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    14f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14f8:	98 13       	cpse	r25, r24
    14fa:	1a c0       	rjmp	.+52     	; 0x1530 <_ZN14HardwareSerial5writeEh+0x4e>
    14fc:	e8 89       	ldd	r30, Y+16	; 0x10
    14fe:	f9 89       	ldd	r31, Y+17	; 0x11
    1500:	80 81       	ld	r24, Z
    1502:	85 ff       	sbrs	r24, 5
    1504:	15 c0       	rjmp	.+42     	; 0x1530 <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1506:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1508:	f8 94       	cli
      *_udr = c;
    150a:	ee 89       	ldd	r30, Y+22	; 0x16
    150c:	ff 89       	ldd	r31, Y+23	; 0x17
    150e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1510:	e8 89       	ldd	r30, Y+16	; 0x10
    1512:	f9 89       	ldd	r31, Y+17	; 0x11
    1514:	80 81       	ld	r24, Z
    1516:	83 70       	andi	r24, 0x03	; 3
    1518:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
    151a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    151c:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	08 95       	ret
    1530:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1532:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1534:	10 e0       	ldi	r17, 0x00	; 0
    1536:	0f 5f       	subi	r16, 0xFF	; 255
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	0f 73       	andi	r16, 0x3F	; 63
    153c:	11 27       	eor	r17, r17
    153e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1540:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1542:	8e 11       	cpse	r24, r14
    1544:	0c c0       	rjmp	.+24     	; 0x155e <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	07 fc       	sbrc	r0, 7
    154a:	fa cf       	rjmp	.-12     	; 0x1540 <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    154c:	e8 89       	ldd	r30, Y+16	; 0x10
    154e:	f9 89       	ldd	r31, Y+17	; 0x11
    1550:	80 81       	ld	r24, Z
    1552:	85 ff       	sbrs	r24, 5
    1554:	f5 cf       	rjmp	.-22     	; 0x1540 <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
    1556:	ce 01       	movw	r24, r28
    1558:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    155c:	f1 cf       	rjmp	.-30     	; 0x1540 <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    155e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1560:	ec 0f       	add	r30, r28
    1562:	fd 2f       	mov	r31, r29
    1564:	f1 1d       	adc	r31, r1
    1566:	e3 5a       	subi	r30, 0xA3	; 163
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    156c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    156e:	f8 94       	cli
    _tx_buffer_head = i;
    1570:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1572:	ea 89       	ldd	r30, Y+18	; 0x12
    1574:	fb 89       	ldd	r31, Y+19	; 0x13
    1576:	80 81       	ld	r24, Z
    1578:	80 62       	ori	r24, 0x20	; 32
    157a:	cf cf       	rjmp	.-98     	; 0x151a <_ZN14HardwareSerial5writeEh+0x38>

0000157c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	ec 01       	movw	r28, r24
    158c:	6a 01       	movw	r12, r20
    158e:	7b 01       	movw	r14, r22
    1590:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1592:	e8 89       	ldd	r30, Y+16	; 0x10
    1594:	f9 89       	ldd	r31, Y+17	; 0x11
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    159a:	c1 14       	cp	r12, r1
    159c:	81 ee       	ldi	r24, 0xE1	; 225
    159e:	d8 06       	cpc	r13, r24
    15a0:	e1 04       	cpc	r14, r1
    15a2:	f1 04       	cpc	r15, r1
    15a4:	a1 f0       	breq	.+40     	; 0x15ce <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	79 e0       	ldi	r23, 0x09	; 9
    15aa:	8d e3       	ldi	r24, 0x3D	; 61
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a7 01       	movw	r20, r14
    15b0:	96 01       	movw	r18, r12
    15b2:	0e 94 28 19 	call	0x3250	; 0x3250 <__udivmodsi4>
    15b6:	21 50       	subi	r18, 0x01	; 1
    15b8:	31 09       	sbc	r19, r1
    15ba:	41 09       	sbc	r20, r1
    15bc:	51 09       	sbc	r21, r1
    15be:	56 95       	lsr	r21
    15c0:	47 95       	ror	r20
    15c2:	37 95       	ror	r19
    15c4:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    15c6:	21 15       	cp	r18, r1
    15c8:	80 e1       	ldi	r24, 0x10	; 16
    15ca:	38 07       	cpc	r19, r24
    15cc:	98 f0       	brcs	.+38     	; 0x15f4 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    15ce:	e8 89       	ldd	r30, Y+16	; 0x10
    15d0:	f9 89       	ldd	r31, Y+17	; 0x11
    15d2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    15d4:	60 e8       	ldi	r22, 0x80	; 128
    15d6:	74 e8       	ldi	r23, 0x84	; 132
    15d8:	8e e1       	ldi	r24, 0x1E	; 30
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a7 01       	movw	r20, r14
    15de:	96 01       	movw	r18, r12
    15e0:	0e 94 28 19 	call	0x3250	; 0x3250 <__udivmodsi4>
    15e4:	21 50       	subi	r18, 0x01	; 1
    15e6:	31 09       	sbc	r19, r1
    15e8:	41 09       	sbc	r20, r1
    15ea:	51 09       	sbc	r21, r1
    15ec:	56 95       	lsr	r21
    15ee:	47 95       	ror	r20
    15f0:	37 95       	ror	r19
    15f2:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    15f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    15f6:	fd 85       	ldd	r31, Y+13	; 0x0d
    15f8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    15fa:	ee 85       	ldd	r30, Y+14	; 0x0e
    15fc:	ff 85       	ldd	r31, Y+15	; 0x0f
    15fe:	20 83       	st	Z, r18

  _written = false;
    1600:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1602:	ec 89       	ldd	r30, Y+20	; 0x14
    1604:	fd 89       	ldd	r31, Y+21	; 0x15
    1606:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1608:	ea 89       	ldd	r30, Y+18	; 0x12
    160a:	fb 89       	ldd	r31, Y+19	; 0x13
    160c:	80 81       	ld	r24, Z
    160e:	80 61       	ori	r24, 0x10	; 16
    1610:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1612:	ea 89       	ldd	r30, Y+18	; 0x12
    1614:	fb 89       	ldd	r31, Y+19	; 0x13
    1616:	80 81       	ld	r24, Z
    1618:	88 60       	ori	r24, 0x08	; 8
    161a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    161c:	ea 89       	ldd	r30, Y+18	; 0x12
    161e:	fb 89       	ldd	r31, Y+19	; 0x13
    1620:	80 81       	ld	r24, Z
    1622:	80 68       	ori	r24, 0x80	; 128
    1624:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1626:	ea 89       	ldd	r30, Y+18	; 0x12
    1628:	fb 89       	ldd	r31, Y+19	; 0x13
    162a:	80 81       	ld	r24, Z
    162c:	8f 7d       	andi	r24, 0xDF	; 223
    162e:	80 83       	st	Z, r24
}
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	08 95       	ret

00001640 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1640:	1f 92       	push	r1
    1642:	0f 92       	push	r0
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	0f 92       	push	r0
    1648:	11 24       	eor	r1, r1
    164a:	2f 93       	push	r18
    164c:	8f 93       	push	r24
    164e:	9f 93       	push	r25
    1650:	ef 93       	push	r30
    1652:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1654:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <Serial+0x10>
    1658:	f0 91 ac 04 	lds	r31, 0x04AC	; 0x8004ac <Serial+0x11>
    165c:	80 81       	ld	r24, Z
    165e:	e0 91 b1 04 	lds	r30, 0x04B1	; 0x8004b1 <Serial+0x16>
    1662:	f0 91 b2 04 	lds	r31, 0x04B2	; 0x8004b2 <Serial+0x17>
    1666:	82 fd       	sbrc	r24, 2
    1668:	1b c0       	rjmp	.+54     	; 0x16a0 <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    166a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    166c:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <Serial+0x19>
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1674:	20 91 b5 04 	lds	r18, 0x04B5	; 0x8004b5 <Serial+0x1a>
    1678:	82 17       	cp	r24, r18
    167a:	41 f0       	breq	.+16     	; 0x168c <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
    167c:	e0 91 b4 04 	lds	r30, 0x04B4	; 0x8004b4 <Serial+0x19>
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	e5 56       	subi	r30, 0x65	; 101
    1684:	fb 4f       	sbci	r31, 0xFB	; 251
    1686:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1688:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <Serial+0x19>
    Serial._rx_complete_irq();
  }
    168c:	ff 91       	pop	r31
    168e:	ef 91       	pop	r30
    1690:	9f 91       	pop	r25
    1692:	8f 91       	pop	r24
    1694:	2f 91       	pop	r18
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    16a0:	80 81       	ld	r24, Z
    16a2:	f4 cf       	rjmp	.-24     	; 0x168c <__vector_18+0x4c>

000016a4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    16a4:	1f 92       	push	r1
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	ef 93       	push	r30
    16c4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    16c6:	8b e9       	ldi	r24, 0x9B	; 155
    16c8:	94 e0       	ldi	r25, 0x04	; 4
    16ca:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    16ce:	ff 91       	pop	r31
    16d0:	ef 91       	pop	r30
    16d2:	bf 91       	pop	r27
    16d4:	af 91       	pop	r26
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	7f 91       	pop	r23
    16dc:	6f 91       	pop	r22
    16de:	5f 91       	pop	r21
    16e0:	4f 91       	pop	r20
    16e2:	3f 91       	pop	r19
    16e4:	2f 91       	pop	r18
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	0f 90       	pop	r0
    16ec:	1f 90       	pop	r1
    16ee:	18 95       	reti

000016f0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    16f0:	8b e9       	ldi	r24, 0x9B	; 155
    16f2:	94 e0       	ldi	r25, 0x04	; 4
    16f4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN14HardwareSerial9availableEv>
    16f8:	21 e0       	ldi	r18, 0x01	; 1
    16fa:	89 2b       	or	r24, r25
    16fc:	09 f4       	brne	.+2      	; 0x1700 <_Z17Serial0_availablev+0x10>
    16fe:	20 e0       	ldi	r18, 0x00	; 0
}
    1700:	82 2f       	mov	r24, r18
    1702:	08 95       	ret

00001704 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1704:	eb e9       	ldi	r30, 0x9B	; 155
    1706:	f4 e0       	ldi	r31, 0x04	; 4
    1708:	13 82       	std	Z+3, r1	; 0x03
    170a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    170c:	88 ee       	ldi	r24, 0xE8	; 232
    170e:	93 e0       	ldi	r25, 0x03	; 3
    1710:	a0 e0       	ldi	r26, 0x00	; 0
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	84 83       	std	Z+4, r24	; 0x04
    1716:	95 83       	std	Z+5, r25	; 0x05
    1718:	a6 83       	std	Z+6, r26	; 0x06
    171a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    171c:	8a e3       	ldi	r24, 0x3A	; 58
    171e:	94 e0       	ldi	r25, 0x04	; 4
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    1724:	85 ec       	ldi	r24, 0xC5	; 197
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	95 87       	std	Z+13, r25	; 0x0d
    172a:	84 87       	std	Z+12, r24	; 0x0c
    172c:	84 ec       	ldi	r24, 0xC4	; 196
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	97 87       	std	Z+15, r25	; 0x0f
    1732:	86 87       	std	Z+14, r24	; 0x0e
    1734:	80 ec       	ldi	r24, 0xC0	; 192
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	91 8b       	std	Z+17, r25	; 0x11
    173a:	80 8b       	std	Z+16, r24	; 0x10
    173c:	81 ec       	ldi	r24, 0xC1	; 193
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	93 8b       	std	Z+19, r25	; 0x13
    1742:	82 8b       	std	Z+18, r24	; 0x12
    1744:	82 ec       	ldi	r24, 0xC2	; 194
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	95 8b       	std	Z+21, r25	; 0x15
    174a:	84 8b       	std	Z+20, r24	; 0x14
    174c:	86 ec       	ldi	r24, 0xC6	; 198
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	97 8b       	std	Z+23, r25	; 0x17
    1752:	86 8b       	std	Z+22, r24	; 0x16
    1754:	11 8e       	std	Z+25, r1	; 0x19
    1756:	12 8e       	std	Z+26, r1	; 0x1a
    1758:	13 8e       	std	Z+27, r1	; 0x1b
    175a:	14 8e       	std	Z+28, r1	; 0x1c
    175c:	08 95       	ret

0000175e <_ZN5Print5writeEPKhj>:
    175e:	af 92       	push	r10
    1760:	bf 92       	push	r11
    1762:	cf 92       	push	r12
    1764:	df 92       	push	r13
    1766:	ef 92       	push	r14
    1768:	ff 92       	push	r15
    176a:	0f 93       	push	r16
    176c:	1f 93       	push	r17
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	6c 01       	movw	r12, r24
    1774:	7b 01       	movw	r14, r22
    1776:	8b 01       	movw	r16, r22
    1778:	04 0f       	add	r16, r20
    177a:	15 1f       	adc	r17, r21
    177c:	eb 01       	movw	r28, r22
    177e:	5e 01       	movw	r10, r28
    1780:	ae 18       	sub	r10, r14
    1782:	bf 08       	sbc	r11, r15
    1784:	c0 17       	cp	r28, r16
    1786:	d1 07       	cpc	r29, r17
    1788:	59 f0       	breq	.+22     	; 0x17a0 <_ZN5Print5writeEPKhj+0x42>
    178a:	69 91       	ld	r22, Y+
    178c:	d6 01       	movw	r26, r12
    178e:	ed 91       	ld	r30, X+
    1790:	fc 91       	ld	r31, X
    1792:	01 90       	ld	r0, Z+
    1794:	f0 81       	ld	r31, Z
    1796:	e0 2d       	mov	r30, r0
    1798:	c6 01       	movw	r24, r12
    179a:	09 95       	icall
    179c:	89 2b       	or	r24, r25
    179e:	79 f7       	brne	.-34     	; 0x177e <_ZN5Print5writeEPKhj+0x20>
    17a0:	c5 01       	movw	r24, r10
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
    17b2:	bf 90       	pop	r11
    17b4:	af 90       	pop	r10
    17b6:	08 95       	ret

000017b8 <_ZN5Print5writeEPKc.part.2>:
    17b8:	fb 01       	movw	r30, r22
    17ba:	01 90       	ld	r0, Z+
    17bc:	00 20       	and	r0, r0
    17be:	e9 f7       	brne	.-6      	; 0x17ba <_ZN5Print5writeEPKc.part.2+0x2>
    17c0:	31 97       	sbiw	r30, 0x01	; 1
    17c2:	af 01       	movw	r20, r30
    17c4:	46 1b       	sub	r20, r22
    17c6:	57 0b       	sbc	r21, r23
    17c8:	dc 01       	movw	r26, r24
    17ca:	ed 91       	ld	r30, X+
    17cc:	fc 91       	ld	r31, X
    17ce:	02 80       	ldd	r0, Z+2	; 0x02
    17d0:	f3 81       	ldd	r31, Z+3	; 0x03
    17d2:	e0 2d       	mov	r30, r0
    17d4:	09 94       	ijmp

000017d6 <_ZN5Print5printEPKc>:
    17d6:	61 15       	cp	r22, r1
    17d8:	71 05       	cpc	r23, r1
    17da:	11 f0       	breq	.+4      	; 0x17e0 <_ZN5Print5printEPKc+0xa>
    17dc:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <_ZN5Print5writeEPKc.part.2>
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	08 95       	ret

000017e6 <_ZN5Print5printEc>:
    17e6:	dc 01       	movw	r26, r24
    17e8:	ed 91       	ld	r30, X+
    17ea:	fc 91       	ld	r31, X
    17ec:	01 90       	ld	r0, Z+
    17ee:	f0 81       	ld	r31, Z
    17f0:	e0 2d       	mov	r30, r0
    17f2:	09 94       	ijmp

000017f4 <_ZN5Print7printlnEv>:
    17f4:	60 ec       	ldi	r22, 0xC0	; 192
    17f6:	71 e0       	ldi	r23, 0x01	; 1
    17f8:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <_ZN5Print5writeEPKc.part.2>

000017fc <_ZN5Print7printlnEPKc>:
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	8c 01       	movw	r16, r24
    1806:	d0 e0       	ldi	r29, 0x00	; 0
    1808:	c0 e0       	ldi	r28, 0x00	; 0
    180a:	61 15       	cp	r22, r1
    180c:	71 05       	cpc	r23, r1
    180e:	19 f0       	breq	.+6      	; 0x1816 <_ZN5Print7printlnEPKc+0x1a>
    1810:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <_ZN5Print5writeEPKc.part.2>
    1814:	ec 01       	movw	r28, r24
    1816:	c8 01       	movw	r24, r16
    1818:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN5Print7printlnEv>
    181c:	8c 0f       	add	r24, r28
    181e:	9d 1f       	adc	r25, r29
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	08 95       	ret

0000182a <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    182a:	8f 92       	push	r8
    182c:	9f 92       	push	r9
    182e:	af 92       	push	r10
    1830:	bf 92       	push	r11
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	a1 97       	sbiw	r28, 0x21	; 33
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	7c 01       	movw	r14, r24
    1850:	fa 01       	movw	r30, r20
    1852:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1854:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	08 f4       	brcc	.+2      	; 0x185c <_ZN5Print11printNumberEmh+0x32>
    185a:	2a e0       	ldi	r18, 0x0A	; 10
    185c:	8e 01       	movw	r16, r28
    185e:	0f 5d       	subi	r16, 0xDF	; 223
    1860:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    1862:	82 2e       	mov	r8, r18
    1864:	91 2c       	mov	r9, r1
    1866:	b1 2c       	mov	r11, r1
    1868:	a1 2c       	mov	r10, r1
    186a:	bf 01       	movw	r22, r30
    186c:	a5 01       	movw	r20, r10
    186e:	94 01       	movw	r18, r8
    1870:	0e 94 28 19 	call	0x3250	; 0x3250 <__udivmodsi4>
    n /= base;
    1874:	f9 01       	movw	r30, r18
    1876:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1878:	6a 30       	cpi	r22, 0x0A	; 10
    187a:	0c f5       	brge	.+66     	; 0x18be <_ZN5Print11printNumberEmh+0x94>
    187c:	60 5d       	subi	r22, 0xD0	; 208
    187e:	d8 01       	movw	r26, r16
    1880:	6e 93       	st	-X, r22
    1882:	8d 01       	movw	r16, r26
  } while(n);
    1884:	23 2b       	or	r18, r19
    1886:	24 2b       	or	r18, r20
    1888:	25 2b       	or	r18, r21
    188a:	79 f7       	brne	.-34     	; 0x186a <_ZN5Print11printNumberEmh+0x40>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	10 97       	sbiw	r26, 0x00	; 0
    1892:	21 f0       	breq	.+8      	; 0x189c <_ZN5Print11printNumberEmh+0x72>
    1894:	bd 01       	movw	r22, r26
    1896:	c7 01       	movw	r24, r14
    1898:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <_ZN5Print5writeEPKc.part.2>

  return write(str);
}
    189c:	a1 96       	adiw	r28, 0x21	; 33
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	ef 90       	pop	r14
    18b4:	bf 90       	pop	r11
    18b6:	af 90       	pop	r10
    18b8:	9f 90       	pop	r9
    18ba:	8f 90       	pop	r8
    18bc:	08 95       	ret

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    18be:	69 5c       	subi	r22, 0xC9	; 201
    18c0:	de cf       	rjmp	.-68     	; 0x187e <_ZN5Print11printNumberEmh+0x54>

000018c2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    18c2:	cf 92       	push	r12
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
  if (base == 0) {
    18d2:	21 15       	cp	r18, r1
    18d4:	31 05       	cpc	r19, r1
    18d6:	81 f4       	brne	.+32     	; 0x18f8 <_ZN5Print5printEli+0x36>
    return write(n);
    18d8:	dc 01       	movw	r26, r24
    18da:	ed 91       	ld	r30, X+
    18dc:	fc 91       	ld	r31, X
    18de:	01 90       	ld	r0, Z+
    18e0:	f0 81       	ld	r31, Z
    18e2:	e0 2d       	mov	r30, r0
    18e4:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    18f6:	09 94       	ijmp
  } else if (base == 10) {
    18f8:	2a 30       	cpi	r18, 0x0A	; 10
    18fa:	31 05       	cpc	r19, r1
    18fc:	01 f5       	brne	.+64     	; 0x193e <_ZN5Print5printEli+0x7c>
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    18fe:	2a e0       	ldi	r18, 0x0A	; 10
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    1900:	77 ff       	sbrs	r23, 7
    1902:	1d c0       	rjmp	.+58     	; 0x193e <_ZN5Print5printEli+0x7c>
    1904:	6a 01       	movw	r12, r20
    1906:	7b 01       	movw	r14, r22
    1908:	ec 01       	movw	r28, r24
      int t = print('-');
    190a:	6d e2       	ldi	r22, 0x2D	; 45
    190c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN5Print5printEc>
    1910:	8c 01       	movw	r16, r24
      n = -n;
    1912:	44 27       	eor	r20, r20
    1914:	55 27       	eor	r21, r21
    1916:	ba 01       	movw	r22, r20
    1918:	4c 19       	sub	r20, r12
    191a:	5d 09       	sbc	r21, r13
    191c:	6e 09       	sbc	r22, r14
    191e:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    1920:	2a e0       	ldi	r18, 0x0A	; 10
    1922:	ce 01       	movw	r24, r28
    1924:	0e 94 15 0c 	call	0x182a	; 0x182a <_ZN5Print11printNumberEmh>
    1928:	80 0f       	add	r24, r16
    192a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	ff 90       	pop	r15
    1936:	ef 90       	pop	r14
    1938:	df 90       	pop	r13
    193a:	cf 90       	pop	r12
    193c:	08 95       	ret
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	df 90       	pop	r13
    194c:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    194e:	0c 94 15 0c 	jmp	0x182a	; 0x182a <_ZN5Print11printNumberEmh>

00001952 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1952:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1954:	ab 01       	movw	r20, r22
    1956:	77 0f       	add	r23, r23
    1958:	66 0b       	sbc	r22, r22
    195a:	77 0b       	sbc	r23, r23
    195c:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <_ZN5Print5printEli>

00001960 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    196a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <_ZN5Print5printEii>
    196e:	8c 01       	movw	r16, r24
  n += println();
    1970:	ce 01       	movw	r24, r28
    1972:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN5Print7printlnEv>
  return n;
}
    1976:	80 0f       	add	r24, r16
    1978:	91 1f       	adc	r25, r17
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret

00001984 <osEE_check_disableint>:

  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
  } else
  if (Info == NULL) {
    ev = E_OS_PARAM_POINTER;
    1984:	fc 01       	movw	r30, r24
    1986:	81 8d       	ldd	r24, Z+25	; 0x19
    1988:	81 11       	cpse	r24, r1
    198a:	0b c0       	rjmp	.+22     	; 0x19a2 <osEE_check_disableint+0x1e>
    198c:	82 8d       	ldd	r24, Z+26	; 0x1a
    198e:	81 11       	cpse	r24, r1
    1990:	08 c0       	rjmp	.+16     	; 0x19a2 <osEE_check_disableint+0x1e>
    1992:	21 e0       	ldi	r18, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	83 8d       	ldd	r24, Z+27	; 0x1b
    1998:	81 11       	cpse	r24, r1
    199a:	01 c0       	rjmp	.+2      	; 0x199e <osEE_check_disableint+0x1a>
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	82 2f       	mov	r24, r18
    19a0:	08 95       	ret
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	08 95       	ret

000019a8 <osEE_call_error_hook>:
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	ec 01       	movw	r28, r24
    19b2:	0d 89       	ldd	r16, Y+21	; 0x15
    19b4:	1e 89       	ldd	r17, Y+22	; 0x16
    19b6:	03 30       	cpi	r16, 0x03	; 3
    19b8:	11 05       	cpc	r17, r1
    19ba:	59 f0       	breq	.+22     	; 0x19d2 <osEE_call_error_hook+0x2a>
    19bc:	cb 01       	movw	r24, r22
    19be:	23 e0       	ldi	r18, 0x03	; 3
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	3e 8b       	std	Y+22, r19	; 0x16
    19c4:	2d 8b       	std	Y+21, r18	; 0x15
    19c6:	7c 87       	std	Y+12, r23	; 0x0c
    19c8:	6b 87       	std	Y+11, r22	; 0x0b
    19ca:	0e 94 a7 04 	call	0x94e	; 0x94e <ErrorHook>
    19ce:	1e 8b       	std	Y+22, r17	; 0x16
    19d0:	0d 8b       	std	Y+21, r16	; 0x15
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	08 95       	ret

000019dc <StartOS>:
    19dc:	4f 92       	push	r4
    19de:	5f 92       	push	r5
    19e0:	6f 92       	push	r6
    19e2:	7f 92       	push	r7
    19e4:	8f 92       	push	r8
    19e6:	9f 92       	push	r9
    19e8:	af 92       	push	r10
    19ea:	bf 92       	push	r11
    19ec:	cf 92       	push	r12
    19ee:	df 92       	push	r13
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <StartOS+0x22>
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	88 2e       	mov	r8, r24
    1a04:	00 91 4f 02 	lds	r16, 0x024F	; 0x80024f <CDB>
    1a08:	10 91 50 02 	lds	r17, 0x0250	; 0x800250 <CDB+0x1>
    1a0c:	ff b6       	in	r15, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	d8 01       	movw	r26, r16
    1a12:	18 96       	adiw	r26, 0x08	; 8
    1a14:	8d 91       	ld	r24, X+
    1a16:	9c 91       	ld	r25, X
    1a18:	19 97       	sbiw	r26, 0x09	; 9
    1a1a:	89 2b       	or	r24, r25
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <StartOS+0x44>
    1a1e:	b0 c0       	rjmp	.+352    	; 0x1b80 <StartOS+0x1a4>
    1a20:	8b ec       	ldi	r24, 0xCB	; 203
    1a22:	92 e1       	ldi	r25, 0x12	; 18
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	0e 94 0b 13 	call	0x2616	; 0x2616 <osEE_avr8_system_timer_init>
    1a2c:	a0 90 53 02 	lds	r10, 0x0253	; 0x800253 <CDB+0x4>
    1a30:	b0 90 54 02 	lds	r11, 0x0254	; 0x800254 <CDB+0x5>
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	f8 01       	movw	r30, r16
    1a3a:	91 87       	std	Z+9, r25	; 0x09
    1a3c:	80 87       	std	Z+8, r24	; 0x08
    1a3e:	82 86       	std	Z+10, r8	; 0x0a
    1a40:	e5 88       	ldd	r14, Z+21	; 0x15
    1a42:	f6 88       	ldd	r15, Z+22	; 0x16
    1a44:	87 e0       	ldi	r24, 0x07	; 7
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	96 8b       	std	Z+22, r25	; 0x16
    1a4a:	85 8b       	std	Z+21, r24	; 0x15
    1a4c:	0e 94 13 04 	call	0x826	; 0x826 <StartupHook>
    1a50:	d8 01       	movw	r26, r16
    1a52:	56 96       	adiw	r26, 0x16	; 22
    1a54:	fc 92       	st	X, r15
    1a56:	ee 92       	st	-X, r14
    1a58:	55 97       	sbiw	r26, 0x15	; 21
    1a5a:	e0 90 5b 02 	lds	r14, 0x025B	; 0x80025b <CDB+0xc>
    1a5e:	f0 90 5c 02 	lds	r15, 0x025C	; 0x80025c <CDB+0xd>
    1a62:	d1 2c       	mov	r13, r1
    1a64:	c1 2c       	mov	r12, r1
    1a66:	b4 e0       	ldi	r27, 0x04	; 4
    1a68:	8b 9e       	mul	r8, r27
    1a6a:	40 01       	movw	r8, r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	e8 0c       	add	r14, r8
    1a70:	f9 1c       	adc	r15, r9
    1a72:	37 01       	movw	r6, r14
    1a74:	e2 e0       	ldi	r30, 0x02	; 2
    1a76:	6e 0e       	add	r6, r30
    1a78:	71 1c       	adc	r7, r1
    1a7a:	46 e0       	ldi	r20, 0x06	; 6
    1a7c:	54 2e       	mov	r5, r20
    1a7e:	f3 01       	movw	r30, r6
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	c8 16       	cp	r12, r24
    1a86:	d9 06       	cpc	r13, r25
    1a88:	e0 f1       	brcs	.+120    	; 0x1b02 <StartOS+0x126>
    1a8a:	e0 90 57 02 	lds	r14, 0x0257	; 0x800257 <CDB+0x8>
    1a8e:	f0 90 58 02 	lds	r15, 0x0258	; 0x800258 <CDB+0x9>
    1a92:	38 01       	movw	r6, r16
    1a94:	f2 e0       	ldi	r31, 0x02	; 2
    1a96:	6f 0e       	add	r6, r31
    1a98:	71 1c       	adc	r7, r1
    1a9a:	d1 2c       	mov	r13, r1
    1a9c:	c1 2c       	mov	r12, r1
    1a9e:	e8 0c       	add	r14, r8
    1aa0:	f9 1c       	adc	r15, r9
    1aa2:	27 01       	movw	r4, r14
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	48 0e       	add	r4, r24
    1aa8:	51 1c       	adc	r5, r1
    1aaa:	88 24       	eor	r8, r8
    1aac:	83 94       	inc	r8
    1aae:	91 2c       	mov	r9, r1
    1ab0:	f2 01       	movw	r30, r4
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	c8 16       	cp	r12, r24
    1ab8:	d9 06       	cpc	r13, r25
    1aba:	e8 f1       	brcs	.+122    	; 0x1b36 <StartOS+0x15a>
    1abc:	d8 01       	movw	r26, r16
    1abe:	18 96       	adiw	r26, 0x08	; 8
    1ac0:	8d 91       	ld	r24, X+
    1ac2:	9c 91       	ld	r25, X
    1ac4:	19 97       	sbiw	r26, 0x09	; 9
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	31 f4       	brne	.+12     	; 0x1ad6 <StartOS+0xfa>
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	19 96       	adiw	r26, 0x09	; 9
    1ad0:	9c 93       	st	X, r25
    1ad2:	8e 93       	st	-X, r24
    1ad4:	18 97       	sbiw	r26, 0x08	; 8
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	80 85       	ldd	r24, Z+8	; 0x08
    1ada:	91 85       	ldd	r25, Z+9	; 0x09
    1adc:	02 97       	sbiw	r24, 0x02	; 2
    1ade:	41 f4       	brne	.+16     	; 0x1af0 <StartOS+0x114>
    1ae0:	d5 01       	movw	r26, r10
    1ae2:	12 96       	adiw	r26, 0x02	; 2
    1ae4:	6d 91       	ld	r22, X+
    1ae6:	7c 91       	ld	r23, X
    1ae8:	ab 01       	movw	r20, r22
    1aea:	c5 01       	movw	r24, r10
    1aec:	0e 94 16 01 	call	0x22c	; 0x22c <osEE_hal_save_ctx_and_ready2stacked>
    1af0:	f8 01       	movw	r30, r16
    1af2:	80 85       	ldd	r24, Z+8	; 0x08
    1af4:	91 85       	ldd	r25, Z+9	; 0x09
    1af6:	02 97       	sbiw	r24, 0x02	; 2
    1af8:	09 f4       	brne	.+2      	; 0x1afc <StartOS+0x120>
    1afa:	78 94       	sei
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	4d c0       	rjmp	.+154    	; 0x1b9c <StartOS+0x1c0>
    1b02:	d7 01       	movw	r26, r14
    1b04:	ed 91       	ld	r30, X+
    1b06:	fc 91       	ld	r31, X
    1b08:	5c 9c       	mul	r5, r12
    1b0a:	c0 01       	movw	r24, r0
    1b0c:	5d 9c       	mul	r5, r13
    1b0e:	90 0d       	add	r25, r0
    1b10:	11 24       	eor	r1, r1
    1b12:	e8 0f       	add	r30, r24
    1b14:	f9 1f       	adc	r31, r25
    1b16:	a0 81       	ld	r26, Z
    1b18:	b1 81       	ldd	r27, Z+1	; 0x01
    1b1a:	24 81       	ldd	r18, Z+4	; 0x04
    1b1c:	35 81       	ldd	r19, Z+5	; 0x05
    1b1e:	42 81       	ldd	r20, Z+2	; 0x02
    1b20:	53 81       	ldd	r21, Z+3	; 0x03
    1b22:	bd 01       	movw	r22, r26
    1b24:	12 96       	adiw	r26, 0x02	; 2
    1b26:	8d 91       	ld	r24, X+
    1b28:	9c 91       	ld	r25, X
    1b2a:	0e 94 b8 12 	call	0x2570	; 0x2570 <osEE_alarm_set_rel>
    1b2e:	bf ef       	ldi	r27, 0xFF	; 255
    1b30:	cb 1a       	sub	r12, r27
    1b32:	db 0a       	sbc	r13, r27
    1b34:	a4 cf       	rjmp	.-184    	; 0x1a7e <StartOS+0xa2>
    1b36:	d7 01       	movw	r26, r14
    1b38:	ed 91       	ld	r30, X+
    1b3a:	fc 91       	ld	r31, X
    1b3c:	c6 01       	movw	r24, r12
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	e8 0f       	add	r30, r24
    1b44:	f9 1f       	adc	r31, r25
    1b46:	40 81       	ld	r20, Z
    1b48:	51 81       	ldd	r21, Z+1	; 0x01
    1b4a:	da 01       	movw	r26, r20
    1b4c:	14 96       	adiw	r26, 0x04	; 4
    1b4e:	ed 91       	ld	r30, X+
    1b50:	fc 91       	ld	r31, X
    1b52:	80 81       	ld	r24, Z
    1b54:	8f 5f       	subi	r24, 0xFF	; 255
    1b56:	80 83       	st	Z, r24
    1b58:	93 82       	std	Z+3, r9	; 0x03
    1b5a:	82 82       	std	Z+2, r8	; 0x02
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	64 81       	ldd	r22, Z+4	; 0x04
    1b60:	75 81       	ldd	r23, Z+5	; 0x05
    1b62:	db 01       	movw	r26, r22
    1b64:	8d 91       	ld	r24, X+
    1b66:	9c 91       	ld	r25, X
    1b68:	11 97       	sbiw	r26, 0x01	; 1
    1b6a:	95 83       	std	Z+5, r25	; 0x05
    1b6c:	84 83       	std	Z+4, r24	; 0x04
    1b6e:	1d 92       	st	X+, r1
    1b70:	1c 92       	st	X, r1
    1b72:	c3 01       	movw	r24, r6
    1b74:	0e 94 08 11 	call	0x2210	; 0x2210 <osEE_scheduler_rq_insert>
    1b78:	bf ef       	ldi	r27, 0xFF	; 255
    1b7a:	cb 1a       	sub	r12, r27
    1b7c:	db 0a       	sbc	r13, r27
    1b7e:	98 cf       	rjmp	.-208    	; 0x1ab0 <StartOS+0xd4>
    1b80:	88 e3       	ldi	r24, 0x38	; 56
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	1e 96       	adiw	r26, 0x0e	; 14
    1b86:	9c 93       	st	X, r25
    1b88:	8e 93       	st	-X, r24
    1b8a:	1d 97       	sbiw	r26, 0x0d	; 13
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	70 e0       	ldi	r23, 0x00	; 0
    1b90:	c8 01       	movw	r24, r16
    1b92:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <osEE_call_error_hook>
    1b96:	ff be       	out	0x3f, r15	; 63
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	ff 90       	pop	r15
    1baa:	ef 90       	pop	r14
    1bac:	df 90       	pop	r13
    1bae:	cf 90       	pop	r12
    1bb0:	bf 90       	pop	r11
    1bb2:	af 90       	pop	r10
    1bb4:	9f 90       	pop	r9
    1bb6:	8f 90       	pop	r8
    1bb8:	7f 90       	pop	r7
    1bba:	6f 90       	pop	r6
    1bbc:	5f 90       	pop	r5
    1bbe:	4f 90       	pop	r4
    1bc0:	08 95       	ret

00001bc2 <TerminateTask>:
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <CDB>
    1bcc:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <CDB+0x1>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	ed 91       	ld	r30, X+
    1bd4:	fc 91       	ld	r31, X
    1bd6:	27 81       	ldd	r18, Z+7	; 0x07
    1bd8:	30 85       	ldd	r19, Z+8	; 0x08
    1bda:	22 30       	cpi	r18, 0x02	; 2
    1bdc:	31 05       	cpc	r19, r1
    1bde:	88 f4       	brcc	.+34     	; 0x1c02 <TerminateTask+0x40>
    1be0:	a4 81       	ldd	r26, Z+4	; 0x04
    1be2:	b5 81       	ldd	r27, Z+5	; 0x05
    1be4:	14 96       	adiw	r26, 0x04	; 4
    1be6:	2d 91       	ld	r18, X+
    1be8:	3c 91       	ld	r19, X
    1bea:	c6 e0       	ldi	r28, 0x06	; 6
    1bec:	d0 e0       	ldi	r29, 0x00	; 0
    1bee:	23 2b       	or	r18, r19
    1bf0:	51 f4       	brne	.+20     	; 0x1c06 <TerminateTask+0x44>
    1bf2:	8f b7       	in	r24, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	60 ef       	ldi	r22, 0xF0	; 240
    1bf8:	7f e0       	ldi	r23, 0x0F	; 15
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	93 81       	ldd	r25, Z+3	; 0x03
    1bfe:	0e 94 36 01 	call	0x26c	; 0x26c <osEE_hal_terminate_ctx>
    1c02:	c2 e0       	ldi	r28, 0x02	; 2
    1c04:	d0 e0       	ldi	r29, 0x00	; 0
    1c06:	1f b7       	in	r17, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	22 e0       	ldi	r18, 0x02	; 2
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	fc 01       	movw	r30, r24
    1c10:	36 87       	std	Z+14, r19	; 0x0e
    1c12:	25 87       	std	Z+13, r18	; 0x0d
    1c14:	be 01       	movw	r22, r28
    1c16:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <osEE_call_error_hook>
    1c1a:	1f bf       	out	0x3f, r17	; 63
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	08 95       	ret

00001c26 <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    1c26:	9f 92       	push	r9
    1c28:	af 92       	push	r10
    1c2a:	bf 92       	push	r11
    1c2c:	cf 92       	push	r12
    1c2e:	df 92       	push	r13
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <WaitEvent+0x18>
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	6c 01       	movw	r12, r24
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    1c44:	e0 90 4f 02 	lds	r14, 0x024F	; 0x80024f <CDB>
    1c48:	f0 90 50 02 	lds	r15, 0x0250	; 0x800250 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    1c4c:	c7 01       	movw	r24, r14
    1c4e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <osEE_check_disableint>
    1c52:	89 2b       	or	r24, r25
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <WaitEvent+0x32>
    1c56:	45 c0       	rjmp	.+138    	; 0x1ce2 <WaitEvent+0xbc>
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    1c58:	d7 01       	movw	r26, r14
    1c5a:	ad 90       	ld	r10, X+
    1c5c:	bc 90       	ld	r11, X
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    1c5e:	f5 01       	movw	r30, r10
    1c60:	87 81       	ldd	r24, Z+7	; 0x07
    1c62:	90 85       	ldd	r25, Z+8	; 0x08
#else
    || (p_ccb->os_context > OSEE_TASK_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    1c64:	02 e0       	ldi	r16, 0x02	; 2
    1c66:	10 e0       	ldi	r17, 0x00	; 0
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    1c68:	82 30       	cpi	r24, 0x02	; 2
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	e0 f5       	brcc	.+120    	; 0x1ce6 <WaitEvent+0xc0>
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    1c6e:	04 81       	ldd	r16, Z+4	; 0x04
    1c70:	15 81       	ldd	r17, Z+5	; 0x05
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
#if (defined(OSEE_HAS_MUTEX))
  if (p_curr_tcb->p_first_mtx != NULL) {
    1c72:	d8 01       	movw	r26, r16
    1c74:	14 96       	adiw	r26, 0x04	; 4
    1c76:	2d 91       	ld	r18, X+
    1c78:	3c 91       	ld	r19, X
    1c7a:	15 97       	sbiw	r26, 0x05	; 5
    1c7c:	23 2b       	or	r18, r19
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <WaitEvent+0x5c>
    1c80:	53 c0       	rjmp	.+166    	; 0x1d28 <WaitEvent+0x102>
#endif /* !OSEE_SINGLECORE */
    {
      ev = E_OS_RESOURCE;
    }
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	09 f0       	breq	.+2      	; 0x1c88 <WaitEvent+0x62>
    1c86:	53 c0       	rjmp	.+166    	; 0x1d2e <WaitEvent+0x108>
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_MUTEX */
#endif /* OSEE_HAS_CHECKS */
  /* Check if we have to wait */
  if ((p_curr_tcb->event_mask & Mask) == 0U) {
    1c88:	18 96       	adiw	r26, 0x08	; 8
    1c8a:	8d 91       	ld	r24, X+
    1c8c:	9c 91       	ld	r25, X
    1c8e:	8c 21       	and	r24, r12
    1c90:	9d 21       	and	r25, r13
    1c92:	89 2b       	or	r24, r25
    1c94:	19 f5       	brne	.+70     	; 0x1cdc <WaitEvent+0xb6>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1c96:	9f b6       	in	r9, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1c98:	f8 94       	cli
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();

    /* Set the waiting mask */
    p_curr_tcb->wait_mask = Mask;
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	d7 82       	std	Z+7, r13	; 0x07
    1c9e:	c6 82       	std	Z+6, r12	; 0x06

    /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
    osEE_lock_core(p_cdb);

    p_to =  osEE_scheduler_task_block_current(osEE_get_kernel(),
    1ca0:	ae 01       	movw	r20, r28
    1ca2:	4f 5f       	subi	r20, 0xFF	; 255
    1ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca6:	6f e4       	ldi	r22, 0x4F	; 79
    1ca8:	72 e0       	ldi	r23, 0x02	; 2
    1caa:	89 e3       	ldi	r24, 0x39	; 57
    1cac:	92 e0       	ldi	r25, 0x02	; 2
    1cae:	0e 94 a3 11 	call	0x2346	; 0x2346 <osEE_scheduler_task_block_current>
              p_cdb, &p_blocked_sn);

    /* Release the SN, I will allocate a new one when the TASK will be
     * reinserted into be reinserted in RQ */
    osEE_sn_release(&p_ccb->p_free_sn, p_blocked_sn);
    1cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb4:	fa 81       	ldd	r31, Y+2	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    1cb6:	d7 01       	movw	r26, r14
    1cb8:	14 96       	adiw	r26, 0x04	; 4
    1cba:	2d 91       	ld	r18, X+
    1cbc:	3c 91       	ld	r19, X
    1cbe:	15 97       	sbiw	r26, 0x05	; 5
    1cc0:	31 83       	std	Z+1, r19	; 0x01
    1cc2:	20 83       	st	Z, r18
  (*pp_first)       = p_to_free;
    1cc4:	15 96       	adiw	r26, 0x05	; 5
    1cc6:	fc 93       	st	X, r31
    1cc8:	ee 93       	st	-X, r30
    1cca:	14 97       	sbiw	r26, 0x04	; 4

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_to);
    1ccc:	bc 01       	movw	r22, r24
    1cce:	c5 01       	movw	r24, r10
    1cd0:	0e 94 17 13 	call	0x262e	; 0x262e <osEE_change_context_from_running>

    /* Reset the waiting mask */
    p_curr_tcb->wait_mask = 0U;
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	17 82       	std	Z+7, r1	; 0x07
    1cd8:	16 82       	std	Z+6, r1	; 0x06
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1cda:	9f be       	out	0x3f, r9	; 63

    osEE_end_primitive(flags);

    ev = E_OK;
  } else {
    ev = E_OK;
    1cdc:	10 e0       	ldi	r17, 0x00	; 0
    1cde:	00 e0       	ldi	r16, 0x00	; 0
  }
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <WaitEvent+0xe4>
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    1ce2:	0c e0       	ldi	r16, 0x0C	; 12
    1ce4:	10 e0       	ldi	r17, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1ce6:	bf b6       	in	r11, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1ce8:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    1cea:	82 e2       	ldi	r24, 0x22	; 34
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	d7 01       	movw	r26, r14
    1cf0:	1e 96       	adiw	r26, 0x0e	; 14
    1cf2:	9c 93       	st	X, r25
    1cf4:	8e 93       	st	-X, r24
    1cf6:	1d 97       	sbiw	r26, 0x0d	; 13
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    1cf8:	50 96       	adiw	r26, 0x10	; 16
    1cfa:	dc 92       	st	X, r13
    1cfc:	ce 92       	st	-X, r12
    1cfe:	1f 97       	sbiw	r26, 0x0f	; 15
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_set_service_id(p_ccb, OSServiceId_WaitEvent);
    param.num_param = Mask;
    osEE_set_api_param1(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    1d00:	b8 01       	movw	r22, r16
    1d02:	c7 01       	movw	r24, r14
    1d04:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1d08:	bf be       	out	0x3f, r11	; 63
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	ff 90       	pop	r15
    1d1a:	ef 90       	pop	r14
    1d1c:	df 90       	pop	r13
    1d1e:	cf 90       	pop	r12
    1d20:	bf 90       	pop	r11
    1d22:	af 90       	pop	r10
    1d24:	9f 90       	pop	r9
    1d26:	08 95       	ret
    if (p_curr_tcb->p_first_mtx->mtx_type == OSEE_MUTEX_SPINLOCK) {
      ev = E_OS_SPINLOCK
    } else
#endif /* !OSEE_SINGLECORE */
    {
      ev = E_OS_RESOURCE;
    1d28:	06 e0       	ldi	r16, 0x06	; 6
    1d2a:	10 e0       	ldi	r17, 0x00	; 0
    1d2c:	dc cf       	rjmp	.-72     	; 0x1ce6 <WaitEvent+0xc0>
    }
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    ev = E_OS_ACCESS;
    1d2e:	01 e0       	ldi	r16, 0x01	; 1
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	d9 cf       	rjmp	.-78     	; 0x1ce6 <WaitEvent+0xc0>

00001d34 <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    1d34:	df 92       	push	r13
    1d36:	ef 92       	push	r14
    1d38:	ff 92       	push	r15
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	18 2f       	mov	r17, r24
    1d44:	7b 01       	movw	r14, r22
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_curr_cdb  = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_ccb  = p_curr_cdb->p_ccb;
    1d46:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <CDB>
    1d4a:	d0 91 50 02 	lds	r29, 0x0250	; 0x800250 <CDB+0x1>
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
/* SetEvent is callable by Task and ISR2 */
  if (osEE_check_disableint(p_curr_ccb)) {
    1d4e:	ce 01       	movw	r24, r28
    1d50:	0e 94 c2 0c 	call	0x1984	; 0x1984 <osEE_check_disableint>
    1d54:	21 2f       	mov	r18, r17
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	89 2b       	or	r24, r25
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <SetEvent+0x2a>
    1d5c:	76 c0       	rjmp	.+236    	; 0x1e4a <SetEvent+0x116>
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type > OSEE_TASK_TYPE_ISR2)
    1d5e:	e8 81       	ld	r30, Y
    1d60:	f9 81       	ldd	r31, Y+1	; 0x01
    1d62:	87 81       	ldd	r24, Z+7	; 0x07
    1d64:	90 85       	ldd	r25, Z+8	; 0x08
    1d66:	03 97       	sbiw	r24, 0x03	; 3
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <SetEvent+0x38>
    1d6a:	72 c0       	rjmp	.+228    	; 0x1e50 <SetEvent+0x11c>
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    1d6c:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <KDB+0x6>
    1d70:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <KDB+0x7>
    1d74:	28 17       	cp	r18, r24
    1d76:	39 07       	cpc	r19, r25
    1d78:	08 f0       	brcs	.+2      	; 0x1d7c <SetEvent+0x48>
    1d7a:	6d c0       	rjmp	.+218    	; 0x1e56 <SetEvent+0x122>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
    1d7c:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <KDB+0x2>
    1d80:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <KDB+0x3>
    1d84:	c9 01       	movw	r24, r18
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	e8 0f       	add	r30, r24
    1d8c:	f9 1f       	adc	r31, r25
    1d8e:	a0 81       	ld	r26, Z
    1d90:	b1 81       	ldd	r27, Z+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_waking_up = p_tdb_waking_up->p_tcb;
    1d92:	14 96       	adiw	r26, 0x04	; 4
    1d94:	ed 91       	ld	r30, X+
    1d96:	fc 91       	ld	r31, X
    1d98:	15 97       	sbiw	r26, 0x05	; 5
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1d9a:	1f b7       	in	r17, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1d9c:	f8 94       	cli

    /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
    osEE_lock_core(p_cdb_waking_up);

#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
    1d9e:	17 96       	adiw	r26, 0x07	; 7
    1da0:	8d 91       	ld	r24, X+
    1da2:	9c 91       	ld	r25, X
    1da4:	18 97       	sbiw	r26, 0x08	; 8
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	99 f0       	breq	.+38     	; 0x1dd0 <SetEvent+0x9c>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1daa:	1f bf       	out	0x3f, r17	; 63
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_ACCESS;
    1dac:	01 e0       	ldi	r16, 0x01	; 1
    1dae:	10 e0       	ldi	r17, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1db0:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1db2:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    1db4:	8c e1       	ldi	r24, 0x1C	; 28
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9e 87       	std	Y+14, r25	; 0x0e
    1dba:	8d 87       	std	Y+13, r24	; 0x0d
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    1dbc:	38 8b       	std	Y+16, r19	; 0x10
    1dbe:	2f 87       	std	Y+15, r18	; 0x0f
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param2 = api_param;
    1dc0:	fa 8a       	std	Y+18, r15	; 0x12
    1dc2:	e9 8a       	std	Y+17, r14	; 0x11
    osEE_set_service_id(p_curr_ccb, OSServiceId_SetEvent);
    param.num_param = TaskID;
    osEE_set_api_param1(p_curr_ccb, param);
    param.num_param = Mask;
    osEE_set_api_param2(p_curr_ccb, param);
    osEE_call_error_hook(p_curr_ccb, ev);
    1dc4:	b8 01       	movw	r22, r16
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1dcc:	df be       	out	0x3f, r13	; 63
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
    1dce:	34 c0       	rjmp	.+104    	; 0x1e38 <SetEvent+0x104>
    if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_waking_up->status == OSEE_TASK_SUSPENDED) {
    1dd0:	42 81       	ldd	r20, Z+2	; 0x02
    1dd2:	53 81       	ldd	r21, Z+3	; 0x03
    1dd4:	41 15       	cp	r20, r1
    1dd6:	51 05       	cpc	r21, r1
    1dd8:	21 f4       	brne	.+8      	; 0x1de2 <SetEvent+0xae>
    1dda:	1f bf       	out	0x3f, r17	; 63
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_STATE;
    1ddc:	07 e0       	ldi	r16, 0x07	; 7
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	e7 cf       	rjmp	.-50     	; 0x1db0 <SetEvent+0x7c>
    } else
#endif /* OSEE_HAS_CHECKS */
    {
      /* Set the event mask only if the task is not suspended */
      p_tcb_waking_up->event_mask |= Mask;
    1de2:	80 85       	ldd	r24, Z+8	; 0x08
    1de4:	91 85       	ldd	r25, Z+9	; 0x09
    1de6:	8e 29       	or	r24, r14
    1de8:	9f 29       	or	r25, r15
    1dea:	91 87       	std	Z+9, r25	; 0x09
    1dec:	80 87       	std	Z+8, r24	; 0x08

      if (((p_tcb_waking_up->wait_mask & Mask) != 0U) &&
    1dee:	86 81       	ldd	r24, Z+6	; 0x06
    1df0:	97 81       	ldd	r25, Z+7	; 0x07
    1df2:	e8 22       	and	r14, r24
    1df4:	f9 22       	and	r15, r25
    1df6:	ef 28       	or	r14, r15
    1df8:	e1 f0       	breq	.+56     	; 0x1e32 <SetEvent+0xfe>
    1dfa:	43 30       	cpi	r20, 0x03	; 3
    1dfc:	51 05       	cpc	r21, r1
    1dfe:	c9 f4       	brne	.+50     	; 0x1e32 <SetEvent+0xfe>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    1e00:	ec 81       	ldd	r30, Y+4	; 0x04
    1e02:	fd 81       	ldd	r31, Y+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    1e04:	80 81       	ld	r24, Z
    1e06:	91 81       	ldd	r25, Z+1	; 0x01
    1e08:	9d 83       	std	Y+5, r25	; 0x05
    1e0a:	8c 83       	std	Y+4, r24	; 0x04
  p_sn_allocated->p_next  = NULL;
    1e0c:	11 82       	std	Z+1, r1	; 0x01
    1e0e:	10 82       	st	Z, r1
          (p_tcb_waking_up->status == OSEE_TASK_WAITING))
      {
        CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
          p_sn = osEE_sn_alloc(&p_cdb_waking_up->p_ccb->p_free_sn);

        p_sn->p_tdb = p_tdb_waking_up;
    1e10:	b3 83       	std	Z+3, r27	; 0x03
    1e12:	a2 83       	std	Z+2, r26	; 0x02

        /* Release the TASK (and the SN) */
        if (osEE_scheduler_task_unblocked(p_kdb, p_cdb_waking_up, p_sn))
    1e14:	af 01       	movw	r20, r30
    1e16:	6f e4       	ldi	r22, 0x4F	; 79
    1e18:	72 e0       	ldi	r23, 0x02	; 2
    1e1a:	89 e3       	ldi	r24, 0x39	; 57
    1e1c:	92 e0       	ldi	r25, 0x02	; 2
    1e1e:	0e 94 c8 11 	call	0x2390	; 0x2390 <osEE_scheduler_task_unblocked>
    1e22:	89 2b       	or	r24, r25
    1e24:	31 f0       	breq	.+12     	; 0x1e32 <SetEvent+0xfe>
        {
          (void)osEE_scheduler_task_preemption_point(p_kdb, p_cdb_waking_up);
    1e26:	6f e4       	ldi	r22, 0x4F	; 79
    1e28:	72 e0       	ldi	r23, 0x02	; 2
    1e2a:	89 e3       	ldi	r24, 0x39	; 57
    1e2c:	92 e0       	ldi	r25, 0x02	; 2
    1e2e:	0e 94 77 12 	call	0x24ee	; 0x24ee <osEE_scheduler_task_preemption_point>
    1e32:	1f bf       	out	0x3f, r17	; 63
      }

      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);

      ev = E_OK;
    1e34:	10 e0       	ldi	r17, 0x00	; 0
    1e36:	00 e0       	ldi	r16, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    1e38:	c8 01       	movw	r24, r16
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	ff 90       	pop	r15
    1e44:	ef 90       	pop	r14
    1e46:	df 90       	pop	r13
    1e48:	08 95       	ret
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
/* SetEvent is callable by Task and ISR2 */
  if (osEE_check_disableint(p_curr_ccb)) {
    ev = E_OS_DISABLEDINT;
    1e4a:	0c e0       	ldi	r16, 0x0C	; 12
    1e4c:	10 e0       	ldi	r17, 0x00	; 0
    1e4e:	b0 cf       	rjmp	.-160    	; 0x1db0 <SetEvent+0x7c>
#else
    || (p_curr_ccb->os_context > OSEE_TASK_ISR2_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    1e50:	02 e0       	ldi	r16, 0x02	; 2
    1e52:	10 e0       	ldi	r17, 0x00	; 0
    1e54:	ad cf       	rjmp	.-166    	; 0x1db0 <SetEvent+0x7c>
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    1e56:	03 e0       	ldi	r16, 0x03	; 3
    1e58:	10 e0       	ldi	r17, 0x00	; 0
    1e5a:	aa cf       	rjmp	.-172    	; 0x1db0 <SetEvent+0x7c>

00001e5c <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
    1e5c:	df 92       	push	r13
    1e5e:	ef 92       	push	r14
    1e60:	ff 92       	push	r15
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	c8 2f       	mov	r28, r24
    1e6c:	7b 01       	movw	r14, r22
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    1e6e:	00 91 4f 02 	lds	r16, 0x024F	; 0x80024f <CDB>
    1e72:	10 91 50 02 	lds	r17, 0x0250	; 0x800250 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    1e76:	c8 01       	movw	r24, r16
    1e78:	0e 94 c2 0c 	call	0x1984	; 0x1984 <osEE_check_disableint>
    1e7c:	2c 2f       	mov	r18, r28
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	89 2b       	or	r24, r25
    1e82:	e1 f5       	brne	.+120    	; 0x1efc <GetEvent+0xa0>
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type > OSEE_TASK_TYPE_ISR2)
    1e84:	d8 01       	movw	r26, r16
    1e86:	ed 91       	ld	r30, X+
    1e88:	fc 91       	ld	r31, X
    1e8a:	87 81       	ldd	r24, Z+7	; 0x07
    1e8c:	90 85       	ldd	r25, Z+8	; 0x08
    1e8e:	03 97       	sbiw	r24, 0x03	; 3
    1e90:	08 f0       	brcs	.+2      	; 0x1e94 <GetEvent+0x38>
    1e92:	4d c0       	rjmp	.+154    	; 0x1f2e <GetEvent+0xd2>
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    1e94:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <KDB+0x6>
    1e98:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <KDB+0x7>
    1e9c:	28 17       	cp	r18, r24
    1e9e:	39 07       	cpc	r19, r25
    1ea0:	08 f0       	brcs	.+2      	; 0x1ea4 <GetEvent+0x48>
    1ea2:	48 c0       	rjmp	.+144    	; 0x1f34 <GetEvent+0xd8>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
    1ea4:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <KDB+0x2>
    1ea8:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <KDB+0x3>
    1eac:	c9 01       	movw	r24, r18
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	e8 0f       	add	r30, r24
    1eb4:	f9 1f       	adc	r31, r25
    1eb6:	01 90       	ld	r0, Z+
    1eb8:	f0 81       	ld	r31, Z
    1eba:	e0 2d       	mov	r30, r0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    /* XXX: We will accept an harmless race condition here for TASKs that want
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
    1ebc:	87 81       	ldd	r24, Z+7	; 0x07
    1ebe:	90 85       	ldd	r25, Z+8	; 0x08
      ev = E_OS_ACCESS;
    1ec0:	c1 e0       	ldi	r28, 0x01	; 1
    1ec2:	d0 e0       	ldi	r29, 0x00	; 0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    /* XXX: We will accept an harmless race condition here for TASKs that want
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	e1 f4       	brne	.+56     	; 0x1f00 <GetEvent+0xa4>
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    1ec8:	04 80       	ldd	r0, Z+4	; 0x04
    1eca:	f5 81       	ldd	r31, Z+5	; 0x05
    1ecc:	e0 2d       	mov	r30, r0
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
    1ece:	82 81       	ldd	r24, Z+2	; 0x02
    1ed0:	93 81       	ldd	r25, Z+3	; 0x03
    1ed2:	89 2b       	or	r24, r25
    1ed4:	91 f1       	breq	.+100    	; 0x1f3a <GetEvent+0xde>
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
    1ed6:	e1 14       	cp	r14, r1
    1ed8:	f1 04       	cpc	r15, r1
    1eda:	91 f1       	breq	.+100    	; 0x1f40 <GetEvent+0xe4>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      (*Event) = p_tcb_event->event_mask;
    1edc:	80 85       	ldd	r24, Z+8	; 0x08
    1ede:	91 85       	ldd	r25, Z+9	; 0x09
    1ee0:	f7 01       	movw	r30, r14
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	80 83       	st	Z, r24

      ev = E_OK;
    1ee6:	d0 e0       	ldi	r29, 0x00	; 0
    1ee8:	c0 e0       	ldi	r28, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    1eea:	ce 01       	movw	r24, r28
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	ef 90       	pop	r14
    1ef8:	df 90       	pop	r13
    1efa:	08 95       	ret
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    1efc:	cc e0       	ldi	r28, 0x0C	; 12
    1efe:	d0 e0       	ldi	r29, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1f00:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1f02:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    1f04:	80 e2       	ldi	r24, 0x20	; 32
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	d8 01       	movw	r26, r16
    1f0a:	1e 96       	adiw	r26, 0x0e	; 14
    1f0c:	9c 93       	st	X, r25
    1f0e:	8e 93       	st	-X, r24
    1f10:	1d 97       	sbiw	r26, 0x0d	; 13
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    1f12:	50 96       	adiw	r26, 0x10	; 16
    1f14:	3c 93       	st	X, r19
    1f16:	2e 93       	st	-X, r18
    1f18:	1f 97       	sbiw	r26, 0x0f	; 15
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param2 = api_param;
    1f1a:	52 96       	adiw	r26, 0x12	; 18
    1f1c:	fc 92       	st	X, r15
    1f1e:	ee 92       	st	-X, r14
    1f20:	51 97       	sbiw	r26, 0x11	; 17
    osEE_set_service_id(p_ccb, OSServiceId_GetEvent);
    param.num_param = TaskID;
    osEE_set_api_param1(p_ccb, param);
    param.p_param   = Event;
    osEE_set_api_param2(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    1f22:	be 01       	movw	r22, r28
    1f24:	c8 01       	movw	r24, r16
    1f26:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1f2a:	df be       	out	0x3f, r13	; 63
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
    1f2c:	de cf       	rjmp	.-68     	; 0x1eea <GetEvent+0x8e>
        (os_context != OSEE_PRETASKHOOK_CTX) &&
        (os_context != OSEE_POSTTASKHOOK_CTX))
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    1f2e:	c2 e0       	ldi	r28, 0x02	; 2
    1f30:	d0 e0       	ldi	r29, 0x00	; 0
    1f32:	e6 cf       	rjmp	.-52     	; 0x1f00 <GetEvent+0xa4>
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    1f34:	c3 e0       	ldi	r28, 0x03	; 3
    1f36:	d0 e0       	ldi	r29, 0x00	; 0
    1f38:	e3 cf       	rjmp	.-58     	; 0x1f00 <GetEvent+0xa4>
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    1f3a:	c7 e0       	ldi	r28, 0x07	; 7
    1f3c:	d0 e0       	ldi	r29, 0x00	; 0
    1f3e:	e0 cf       	rjmp	.-64     	; 0x1f00 <GetEvent+0xa4>
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
    1f40:	ce e0       	ldi	r28, 0x0E	; 14
    1f42:	d0 e0       	ldi	r29, 0x00	; 0
    1f44:	dd cf       	rjmp	.-70     	; 0x1f00 <GetEvent+0xa4>

00001f46 <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    1f46:	df 92       	push	r13
    1f48:	ef 92       	push	r14
    1f4a:	ff 92       	push	r15
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	7c 01       	movw	r14, r24
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    1f56:	00 91 4f 02 	lds	r16, 0x024F	; 0x80024f <CDB>
    1f5a:	10 91 50 02 	lds	r17, 0x0250	; 0x800250 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    1f5e:	c8 01       	movw	r24, r16
    1f60:	0e 94 c2 0c 	call	0x1984	; 0x1984 <osEE_check_disableint>
    1f64:	89 2b       	or	r24, r25
    1f66:	21 f5       	brne	.+72     	; 0x1fb0 <ClearEvent+0x6a>
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    1f68:	d8 01       	movw	r26, r16
    1f6a:	ed 91       	ld	r30, X+
    1f6c:	fc 91       	ld	r31, X
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    1f6e:	87 81       	ldd	r24, Z+7	; 0x07
    1f70:	90 85       	ldd	r25, Z+8	; 0x08
#else
    || (p_ccb->os_context > OSEE_TASK_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    1f72:	c2 e0       	ldi	r28, 0x02	; 2
    1f74:	d0 e0       	ldi	r29, 0x00	; 0
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    1f76:	82 30       	cpi	r24, 0x02	; 2
    1f78:	91 05       	cpc	r25, r1
    1f7a:	e0 f4       	brcc	.+56     	; 0x1fb4 <ClearEvent+0x6e>
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    ev = E_OS_ACCESS;
    1f7c:	c1 e0       	ldi	r28, 0x01	; 1
    1f7e:	d0 e0       	ldi	r29, 0x00	; 0
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	c1 f4       	brne	.+48     	; 0x1fb4 <ClearEvent+0x6e>
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    1f84:	04 80       	ldd	r0, Z+4	; 0x04
    1f86:	f5 81       	ldd	r31, Z+5	; 0x05
    1f88:	e0 2d       	mov	r30, r0
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* clear the event */
    p_curr_tcb->event_mask &= ~Mask;
    1f8a:	e0 94       	com	r14
    1f8c:	f0 94       	com	r15
    1f8e:	80 85       	ldd	r24, Z+8	; 0x08
    1f90:	91 85       	ldd	r25, Z+9	; 0x09
    1f92:	e8 22       	and	r14, r24
    1f94:	f9 22       	and	r15, r25
    1f96:	f1 86       	std	Z+9, r15	; 0x09
    1f98:	e0 86       	std	Z+8, r14	; 0x08

    ev = E_OK;
    1f9a:	d0 e0       	ldi	r29, 0x00	; 0
    1f9c:	c0 e0       	ldi	r28, 0x00	; 0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	ff 90       	pop	r15
    1faa:	ef 90       	pop	r14
    1fac:	df 90       	pop	r13
    1fae:	08 95       	ret
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    1fb0:	cc e0       	ldi	r28, 0x0C	; 12
    1fb2:	d0 e0       	ldi	r29, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1fb4:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1fb6:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    1fb8:	8e e1       	ldi	r24, 0x1E	; 30
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	96 87       	std	Z+14, r25	; 0x0e
    1fc0:	85 87       	std	Z+13, r24	; 0x0d
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    1fc2:	f0 8a       	std	Z+16, r15	; 0x10
    1fc4:	e7 86       	std	Z+15, r14	; 0x0f
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_set_service_id(p_ccb, OSServiceId_ClearEvent);
    param.num_param = Mask;
    osEE_set_api_param1(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    1fc6:	be 01       	movw	r22, r28
    1fc8:	c8 01       	movw	r24, r16
    1fca:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1fce:	df be       	out	0x3f, r13	; 63
  }
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
    1fd0:	e6 cf       	rjmp	.-52     	; 0x1f9e <ClearEvent+0x58>

00001fd2 <osEE_get_service_id>:
#if (defined(OSEE_HAS_ORTI))
  return (OSServiceIdType)(
    ((OsEE_reg)osEE_get_curr_core()->p_ccb->service_id) & (~((OsEE_reg)0x1U))
  );
#else
  return osEE_get_curr_core()->p_ccb->service_id;
    1fd2:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <CDB>
    1fd6:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <CDB+0x1>
#endif /* OSEE_HAS_ORTI */
}
    1fda:	85 85       	ldd	r24, Z+13	; 0x0d
    1fdc:	96 85       	ldd	r25, Z+14	; 0x0e
    1fde:	08 95       	ret

00001fe0 <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <osEE_scheduler_task_end+0x6>
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
    1fea:	ae 01       	movw	r20, r28
    1fec:	4f 5f       	subi	r20, 0xFF	; 255
    1fee:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff0:	6f e4       	ldi	r22, 0x4F	; 79
    1ff2:	72 e0       	ldi	r23, 0x02	; 2
    1ff4:	89 e3       	ldi	r24, 0x39	; 57
    1ff6:	92 e0       	ldi	r25, 0x02	; 2
    1ff8:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	0e 94 32 13 	call	0x2664	; 0x2664 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	08 95       	ret

00002010 <osEE_scheduler_task_wrapper_restore>:
)
{
#if (defined(OSEE_HAS_PRETASKHOOK)) || (defined(OSEE_SCHEDULER_GLOBAL)) ||\
    (defined(OSEE_HAS_CONTEXT)) || (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    2010:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <CDB>
    2014:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <CDB+0x1>

#endif /* OSEE_HAS_ORTI */
  /* Call PreTaskHook only if I'm scheduling a real TASK not an ISR2 or the
   * Idle TASK */
#if (defined(OSEE_HAS_PRETASKHOOK)) || (defined(OSEE_HAS_CONTEXT))
  if (p_tdb_to->task_type <= OSEE_TASK_TYPE_EXTENDED) {
    2018:	dc 01       	movw	r26, r24
    201a:	17 96       	adiw	r26, 0x07	; 7
    201c:	8d 91       	ld	r24, X+
    201e:	9c 91       	ld	r25, X
    2020:	82 30       	cpi	r24, 0x02	; 2
    2022:	91 05       	cpc	r25, r1
    2024:	28 f4       	brcc	.+10     	; 0x2030 <osEE_scheduler_task_wrapper_restore+0x20>
      p_ccb->p_last_tdb_hook = p_tdb_to;
      osEE_call_pre_task_hook(p_ccb);
    }
#endif /* OSEE_HAS_PRETASKHOOK */
#if (defined(OSEE_HAS_CONTEXT))
    p_ccb->os_context = OSEE_TASK_CTX;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (defined(OSEE_HAS_CONTEXT))
  else if (p_tdb_to->task_type == OSEE_TASK_TYPE_ISR2) {
    p_ccb->os_context = OSEE_TASK_ISR2_CTX;
  } else {
    p_ccb->os_context = OSEE_IDLE_CTX;
    202a:	96 8b       	std	Z+22, r25	; 0x16
    202c:	85 8b       	std	Z+21, r24	; 0x15
    p_ccb->p_lock_to_be_released = NULL;
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
    202e:	08 95       	ret
#if (defined(OSEE_HAS_CONTEXT))
    p_ccb->os_context = OSEE_TASK_CTX;
#endif /* OSEE_HAS_CONTEXT */
  }
#if (defined(OSEE_HAS_CONTEXT))
  else if (p_tdb_to->task_type == OSEE_TASK_TYPE_ISR2) {
    2030:	82 30       	cpi	r24, 0x02	; 2
    2032:	91 05       	cpc	r25, r1
    2034:	d1 f3       	breq	.-12     	; 0x202a <osEE_scheduler_task_wrapper_restore+0x1a>
    p_ccb->os_context = OSEE_TASK_ISR2_CTX;
  } else {
    p_ccb->os_context = OSEE_IDLE_CTX;
    2036:	8a e0       	ldi	r24, 0x0A	; 10
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	f7 cf       	rjmp	.-18     	; 0x202a <osEE_scheduler_task_wrapper_restore+0x1a>

0000203c <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    203c:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
    203e:	ec 81       	ldd	r30, Y+4	; 0x04
    2040:	fd 81       	ldd	r31, Y+5	; 0x05
    2042:	11 81       	ldd	r17, Z+1	; 0x01
  osEE_scheduler_task_wrapper_restore(p_tdb_to);
    2044:	0e 94 08 10 	call	0x2010	; 0x2010 <osEE_scheduler_task_wrapper_restore>

  if (task_prio < OSEE_ISR_ALL_PRIO) {
    2048:	1f 3f       	cpi	r17, 0xFF	; 255
    204a:	09 f0       	breq	.+2      	; 0x204e <osEE_scheduler_task_wrapper_run+0x12>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
    204c:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
    204e:	e9 85       	ldd	r30, Y+9	; 0x09
    2050:	fa 85       	ldd	r31, Y+10	; 0x0a
    2052:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    2054:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    2056:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
    2058:	60 ef       	ldi	r22, 0xF0	; 240
    205a:	7f e0       	ldi	r23, 0x0F	; 15
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	9b 81       	ldd	r25, Y+3	; 0x03
    2060:	0e 94 36 01 	call	0x26c	; 0x26c <osEE_hal_terminate_ctx>

00002064 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
    2064:	0f 93       	push	r16
    2066:	1f 93       	push	r17
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    206c:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    206e:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
    2070:	6f e4       	ldi	r22, 0x4F	; 79
    2072:	72 e0       	ldi	r23, 0x02	; 2
    2074:	89 e3       	ldi	r24, 0x39	; 57
    2076:	92 e0       	ldi	r25, 0x02	; 2
    2078:	0e 94 77 12 	call	0x24ee	; 0x24ee <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    207c:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    207e:	00 91 4f 02 	lds	r16, 0x024F	; 0x80024f <CDB>
    2082:	10 91 50 02 	lds	r17, 0x0250	; 0x800250 <CDB+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    2086:	c0 91 51 02 	lds	r28, 0x0251	; 0x800251 <CDB+0x2>
    208a:	d0 91 52 02 	lds	r29, 0x0252	; 0x800252 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    208e:	f8 01       	movw	r30, r16
    2090:	80 85       	ldd	r24, Z+8	; 0x08
    2092:	91 85       	ldd	r25, Z+9	; 0x09
    2094:	82 30       	cpi	r24, 0x02	; 2
    2096:	91 05       	cpc	r25, r1
    2098:	51 f0       	breq	.+20     	; 0x20ae <osEE_idle_hook_wrapper+0x4a>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    209a:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <CDB+0x4>
    209e:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <CDB+0x5>
}
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    20aa:	0c 94 48 13 	jmp	0x2690	; 0x2690 <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    20ae:	20 97       	sbiw	r28, 0x00	; 0
    20b0:	89 f3       	breq	.-30     	; 0x2094 <osEE_idle_hook_wrapper+0x30>
      p_idle_hook();
    20b2:	fe 01       	movw	r30, r28
    20b4:	09 95       	icall
    20b6:	eb cf       	rjmp	.-42     	; 0x208e <osEE_idle_hook_wrapper+0x2a>

000020b8 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    20b8:	0f 93       	push	r16
    20ba:	1f 93       	push	r17
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    20c0:	ec 01       	movw	r28, r24
    20c2:	a8 81       	ld	r26, Y
    20c4:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    20c6:	eb 01       	movw	r28, r22
    20c8:	e8 81       	ld	r30, Y
    20ca:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    20cc:	16 96       	adiw	r26, 0x06	; 6
    20ce:	cd 91       	ld	r28, X+
    20d0:	dc 91       	ld	r29, X
    20d2:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    20d4:	20 97       	sbiw	r28, 0x00	; 0
    20d6:	c1 f1       	breq	.+112    	; 0x2148 <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    20dc:	30 97       	sbiw	r30, 0x00	; 0
    20de:	09 f4       	brne	.+2      	; 0x20e2 <osEE_scheduler_core_rq_preempt_stk+0x2a>
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    20e2:	ec 01       	movw	r28, r24
    20e4:	0c 81       	ldd	r16, Y+4	; 0x04
    20e6:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    20e8:	22 81       	ldd	r18, Z+2	; 0x02
    20ea:	33 81       	ldd	r19, Z+3	; 0x03
    20ec:	e9 01       	movw	r28, r18
    20ee:	4c 81       	ldd	r20, Y+4	; 0x04
    20f0:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    20f2:	e8 01       	movw	r28, r16
    20f4:	39 81       	ldd	r19, Y+1	; 0x01
    20f6:	ea 01       	movw	r28, r20
    20f8:	29 81       	ldd	r18, Y+1	; 0x01
    20fa:	32 17       	cp	r19, r18
    20fc:	88 f5       	brcc	.+98     	; 0x2160 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    20fe:	22 e0       	ldi	r18, 0x02	; 2
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	e8 01       	movw	r28, r16
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    2104:	3b 83       	std	Y+3, r19	; 0x03
    2106:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    2108:	20 81       	ld	r18, Z
    210a:	31 81       	ldd	r19, Z+1	; 0x01
    210c:	eb 01       	movw	r28, r22
    210e:	39 83       	std	Y+1, r19	; 0x01
    2110:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    2112:	c2 81       	ldd	r28, Z+2	; 0x02
    2114:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    2116:	2c 81       	ldd	r18, Y+4	; 0x04
    2118:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    211a:	16 96       	adiw	r26, 0x06	; 6
    211c:	4d 91       	ld	r20, X+
    211e:	5c 91       	ld	r21, X
    2120:	17 97       	sbiw	r26, 0x07	; 7
    2122:	51 83       	std	Z+1, r21	; 0x01
    2124:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    2126:	17 96       	adiw	r26, 0x07	; 7
    2128:	fc 93       	st	X, r31
    212a:	ee 93       	st	-X, r30
    212c:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    212e:	cd 93       	st	X+, r28
    2130:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    2132:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    2134:	f9 01       	movw	r30, r18
    2136:	51 81       	ldd	r21, Z+1	; 0x01
    2138:	54 17       	cp	r21, r20
    213a:	08 f4       	brcc	.+2      	; 0x213e <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
    213c:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	1f 91       	pop	r17
    2144:	0f 91       	pop	r16
    2146:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    2148:	30 97       	sbiw	r30, 0x00	; 0
    214a:	51 f0       	breq	.+20     	; 0x2160 <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    214c:	ec 01       	movw	r28, r24
    214e:	8c 81       	ldd	r24, Y+4	; 0x04
    2150:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    2152:	ec 01       	movw	r28, r24
    2154:	4c 81       	ldd	r20, Y+4	; 0x04
    2156:	5d 81       	ldd	r21, Y+5	; 0x05
    2158:	22 e0       	ldi	r18, 0x02	; 2
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	ea 01       	movw	r28, r20
    215e:	d2 cf       	rjmp	.-92     	; 0x2104 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	80 e0       	ldi	r24, 0x00	; 0
    p_ret_sn  = NULL;
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
    2164:	ec cf       	rjmp	.-40     	; 0x213e <osEE_scheduler_core_rq_preempt_stk+0x86>

00002166 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    2166:	cf 92       	push	r12
    2168:	df 92       	push	r13
    216a:	ef 92       	push	r14
    216c:	ff 92       	push	r15
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    2176:	eb 01       	movw	r28, r22
    2178:	aa 81       	ldd	r26, Y+2	; 0x02
    217a:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    217c:	14 96       	adiw	r26, 0x04	; 4
    217e:	ed 91       	ld	r30, X+
    2180:	fc 91       	ld	r31, X
    2182:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    2184:	41 15       	cp	r20, r1
    2186:	51 05       	cpc	r21, r1
    2188:	01 f1       	breq	.+64     	; 0x21ca <osEE_sn_priority_insert+0x64>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    218a:	22 81       	ldd	r18, Z+2	; 0x02
    218c:	33 81       	ldd	r19, Z+3	; 0x03
    218e:	22 30       	cpi	r18, 0x02	; 2
    2190:	31 05       	cpc	r19, r1
    2192:	d8 f0       	brcs	.+54     	; 0x21ca <osEE_sn_priority_insert+0x64>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    2194:	1b 96       	adiw	r26, 0x0b	; 11
    2196:	2c 91       	ld	r18, X
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    2198:	dc 01       	movw	r26, r24
    219a:	ed 91       	ld	r30, X+
    219c:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    21a2:	30 97       	sbiw	r30, 0x00	; 0
    21a4:	a1 f4       	brne	.+40     	; 0x21ce <osEE_sn_priority_insert+0x68>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    21a6:	10 97       	sbiw	r26, 0x00	; 0
    21a8:	69 f1       	breq	.+90     	; 0x2204 <osEE_sn_priority_insert+0x9e>
    p_prev->p_next = p_sn_new;
    21aa:	6d 93       	st	X+, r22
    21ac:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
    21b2:	eb 01       	movw	r28, r22
    21b4:	f9 83       	std	Y+1, r31	; 0x01
    21b6:	e8 83       	st	Y, r30

  return head_changed;
}
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	ff 90       	pop	r15
    21c2:	ef 90       	pop	r14
    21c4:	df 90       	pop	r13
    21c6:	cf 90       	pop	r12
    21c8:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    21ca:	21 81       	ldd	r18, Z+1	; 0x01
    21cc:	e5 cf       	rjmp	.-54     	; 0x2198 <osEE_sn_priority_insert+0x32>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    21ce:	02 81       	ldd	r16, Z+2	; 0x02
    21d0:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    21d2:	e8 01       	movw	r28, r16
    21d4:	cc 80       	ldd	r12, Y+4	; 0x04
    21d6:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    21d8:	41 15       	cp	r20, r1
    21da:	51 05       	cpc	r21, r1
    21dc:	81 f0       	breq	.+32     	; 0x21fe <osEE_sn_priority_insert+0x98>
    21de:	e6 01       	movw	r28, r12
    21e0:	ea 80       	ldd	r14, Y+2	; 0x02
    21e2:	fb 80       	ldd	r15, Y+3	; 0x03
    21e4:	d2 e0       	ldi	r29, 0x02	; 2
    21e6:	ed 16       	cp	r14, r29
    21e8:	f1 04       	cpc	r15, r1
    21ea:	48 f0       	brcs	.+18     	; 0x21fe <osEE_sn_priority_insert+0x98>
      prio_to_check = p_cur_tdb->ready_prio;
    21ec:	e8 01       	movw	r28, r16
    21ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
    21f0:	32 17       	cp	r19, r18
    21f2:	c8 f2       	brcs	.-78     	; 0x21a6 <osEE_sn_priority_insert+0x40>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    21f4:	df 01       	movw	r26, r30
    21f6:	01 90       	ld	r0, Z+
    21f8:	f0 81       	ld	r31, Z
    21fa:	e0 2d       	mov	r30, r0
    21fc:	d2 cf       	rjmp	.-92     	; 0x21a2 <osEE_sn_priority_insert+0x3c>
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    21fe:	e6 01       	movw	r28, r12
    2200:	39 81       	ldd	r19, Y+1	; 0x01
    2202:	f6 cf       	rjmp	.-20     	; 0x21f0 <osEE_sn_priority_insert+0x8a>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    2204:	dc 01       	movw	r26, r24
    2206:	6d 93       	st	X+, r22
    2208:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	d1 cf       	rjmp	.-94     	; 0x21b2 <osEE_sn_priority_insert+0x4c>

00002210 <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    2210:	fb 01       	movw	r30, r22
    2212:	53 83       	std	Z+3, r21	; 0x03
    2214:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <osEE_sn_priority_insert>

0000221e <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    221e:	ef 92       	push	r14
    2220:	ff 92       	push	r15
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    222c:	fc 01       	movw	r30, r24
    222e:	c0 81       	ld	r28, Z
    2230:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    2232:	ee 80       	ldd	r14, Y+6	; 0x06
    2234:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    2236:	f7 01       	movw	r30, r14
    2238:	80 81       	ld	r24, Z
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	9f 83       	std	Y+7, r25	; 0x07
    223e:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    2240:	c8 01       	movw	r24, r16
    2242:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    2246:	89 2b       	or	r24, r25
    2248:	41 f4       	brne	.+16     	; 0x225a <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    224a:	ee 81       	ldd	r30, Y+6	; 0x06
    224c:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    224e:	30 97       	sbiw	r30, 0x00	; 0
    2250:	61 f0       	breq	.+24     	; 0x226a <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
    2256:	99 83       	std	Y+1, r25	; 0x01
    2258:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    225a:	c7 01       	movw	r24, r14
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    2268:	08 95       	ret
      if ( p_curr_stk_sn != NULL ) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    226a:	f8 01       	movw	r30, r16
    226c:	84 81       	ldd	r24, Z+4	; 0x04
    226e:	95 81       	ldd	r25, Z+5	; 0x05
    2270:	f2 cf       	rjmp	.-28     	; 0x2256 <osEE_scheduler_core_pop_running+0x38>

00002272 <osEE_scheduler_task_activated>:
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act,
  CONST(OsEE_bool, AUTOMATIC)               is_preemption_point
)
{
    2272:	cf 92       	push	r12
    2274:	df 92       	push	r13
    2276:	ef 92       	push	r14
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act  = p_tdb_act->p_tcb;
    2282:	da 01       	movw	r26, r20
    2284:	14 96       	adiw	r26, 0x04	; 4
    2286:	cd 91       	ld	r28, X+
    2288:	dc 91       	ld	r29, X
    228a:	15 97       	sbiw	r26, 0x05	; 5

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act)
    228c:	98 81       	ld	r25, Y
    228e:	1d 96       	adiw	r26, 0x0d	; 13
    2290:	8c 91       	ld	r24, X
    2292:	98 17       	cp	r25, r24
    2294:	08 f0       	brcs	.+2      	; 0x2298 <osEE_scheduler_task_activated+0x26>
    2296:	54 c0       	rjmp	.+168    	; 0x2340 <osEE_scheduler_task_activated+0xce>
  {
    CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
    2298:	db 01       	movw	r26, r22
    229a:	ed 91       	ld	r30, X+
    229c:	fc 91       	ld	r31, X
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
    229e:	00 81       	ld	r16, Z
    22a0:	11 81       	ldd	r17, Z+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
    22a2:	d8 01       	movw	r26, r16
    22a4:	14 96       	adiw	r26, 0x04	; 4
    22a6:	ed 90       	ld	r14, X+
    22a8:	fc 90       	ld	r15, X

    ++p_tcb_act->current_num_of_act;
    22aa:	9f 5f       	subi	r25, 0xFF	; 255
    22ac:	98 83       	st	Y, r25
    22ae:	c4 80       	ldd	r12, Z+4	; 0x04
    22b0:	d5 80       	ldd	r13, Z+5	; 0x05
    22b2:	d6 01       	movw	r26, r12
    22b4:	6d 91       	ld	r22, X+
    22b6:	7c 91       	ld	r23, X
        osEE_hal_signal_core(p_tdb_act->orig_core_id);
      }
    } else
#endif /* !OSEE_SINGLECORE */
    /* Preemption Check */
    if ((is_preemption_point) &&
    22b8:	23 2b       	or	r18, r19
    22ba:	69 f1       	breq	.+90     	; 0x2316 <osEE_scheduler_task_activated+0xa4>
    22bc:	d7 01       	movw	r26, r14
    22be:	11 96       	adiw	r26, 0x01	; 1
    22c0:	9c 91       	ld	r25, X
    22c2:	11 97       	sbiw	r26, 0x01	; 1
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	98 17       	cp	r25, r24
    22c8:	30 f5       	brcc	.+76     	; 0x2316 <osEE_scheduler_task_activated+0xa4>
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
  (*pp_fist)              = p_sn_allocated->p_next;
    22ca:	75 83       	std	Z+5, r23	; 0x05
    22cc:	64 83       	std	Z+4, r22	; 0x04

      /* Call PostTaskHook before switching active TASK */
      osEE_call_post_task_hook(p_ccb);

      /* Set Previous TASK status as Ready but stacked */
      p_curr_tcb->status = OSEE_TASK_READY_STACKED;
    22ce:	82 e0       	ldi	r24, 0x02	; 2
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	13 96       	adiw	r26, 0x03	; 3
    22d4:	9c 93       	st	X, r25
    22d6:	8e 93       	st	-X, r24
    22d8:	12 97       	sbiw	r26, 0x02	; 2

      /* Set the activated TASK as current */
      p_new_stk->p_tdb            = p_tdb_act;
    22da:	d6 01       	movw	r26, r12
    22dc:	13 96       	adiw	r26, 0x03	; 3
    22de:	5c 93       	st	X, r21
    22e0:	4e 93       	st	-X, r20
    22e2:	12 97       	sbiw	r26, 0x02	; 2
      p_new_stk->p_next           = p_ccb->p_stk_sn;
    22e4:	86 81       	ldd	r24, Z+6	; 0x06
    22e6:	97 81       	ldd	r25, Z+7	; 0x07
    22e8:	8d 93       	st	X+, r24
    22ea:	9c 93       	st	X, r25
      p_ccb->p_stk_sn             = p_new_stk;
    22ec:	d7 82       	std	Z+7, r13	; 0x07
    22ee:	c6 82       	std	Z+6, r12	; 0x06
      p_ccb->p_curr               = p_tdb_act;
    22f0:	51 83       	std	Z+1, r21	; 0x01
    22f2:	40 83       	st	Z, r20
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    22f4:	19 86       	std	Y+9, r1	; 0x09
    22f6:	18 86       	std	Y+8, r1	; 0x08
      osEE_unlock_core(p_cdb);

#if (defined(OSEE_HAS_EVENTS))
      osEE_event_reset_mask(p_tdb_act->p_tcb);
#endif /* OSEE_HAS_EVENTS */
      osEE_change_context_from_running(p_curr, p_tdb_act);
    22f8:	ba 01       	movw	r22, r20
    22fa:	c8 01       	movw	r24, r16
    22fc:	0e 94 17 13 	call	0x262e	; 0x262e <osEE_change_context_from_running>
    } else {
      /* Actually Insert the activated in READY Queue */
      osEE_scheduler_task_activated_insert_rq(p_cdb, p_ccb, p_tdb_act,
        p_tcb_act);
    }
    ev = E_OK;
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
  }
  return ev;
}
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	1f 91       	pop	r17
    230a:	0f 91       	pop	r16
    230c:	ff 90       	pop	r15
    230e:	ef 90       	pop	r14
    2310:	df 90       	pop	r13
    2312:	cf 90       	pop	r12
    2314:	08 95       	ret
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	89 2b       	or	r24, r25
    231c:	31 f4       	brne	.+12     	; 0x232a <osEE_scheduler_task_activated+0xb8>
    p_tcb_act->status = OSEE_TASK_READY;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9b 83       	std	Y+3, r25	; 0x03
    2324:	8a 83       	std	Y+2, r24	; 0x02
    2326:	19 86       	std	Y+9, r1	; 0x09
    2328:	18 86       	std	Y+8, r1	; 0x08
    232a:	75 83       	std	Z+5, r23	; 0x05
    232c:	64 83       	std	Z+4, r22	; 0x04
  p_sn_allocated->p_next  = NULL;
    232e:	d6 01       	movw	r26, r12
    2330:	1d 92       	st	X+, r1
    2332:	1c 92       	st	X, r1
    osEE_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    2334:	b6 01       	movw	r22, r12
    2336:	cf 01       	movw	r24, r30
    2338:	02 96       	adiw	r24, 0x02	; 2
    233a:	0e 94 08 11 	call	0x2210	; 0x2210 <osEE_scheduler_rq_insert>
    233e:	e0 cf       	rjmp	.-64     	; 0x2300 <osEE_scheduler_task_activated+0x8e>
        p_tcb_act);
    }
    ev = E_OK;
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
    2340:	84 e0       	ldi	r24, 0x04	; 4
    2342:	90 e0       	ldi	r25, 0x00	; 0
  }
  return ev;
    2344:	df cf       	rjmp	.-66     	; 0x2304 <osEE_scheduler_task_activated+0x92>

00002346 <osEE_scheduler_task_block_current>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_SN *,  AUTOMATIC, OS_APPL_DATA)  p_sn_blocked
)
{
    2346:	ef 92       	push	r14
    2348:	ff 92       	push	r15
    234a:	0f 93       	push	r16
    234c:	1f 93       	push	r17
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	cb 01       	movw	r24, r22
    2354:	7a 01       	movw	r14, r20
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    2356:	db 01       	movw	r26, r22
    2358:	cd 91       	ld	r28, X+
    235a:	dc 91       	ld	r29, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_blocked = p_ccb->p_curr;
    235c:	fe 01       	movw	r30, r28
    235e:	01 91       	ld	r16, Z+
    2360:	11 91       	ld	r17, Z+
    2362:	bf 01       	movw	r22, r30

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  (*p_sn_blocked) = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    2364:	0e 94 0f 11 	call	0x221e	; 0x221e <osEE_scheduler_core_pop_running>
    2368:	d7 01       	movw	r26, r14
    236a:	8d 93       	st	X+, r24
    236c:	9c 93       	st	X, r25

  p_tdb_blocked->p_tcb->status = OSEE_TASK_WAITING;
    236e:	d8 01       	movw	r26, r16
    2370:	14 96       	adiw	r26, 0x04	; 4
    2372:	ed 91       	ld	r30, X+
    2374:	fc 91       	ld	r31, X
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	93 83       	std	Z+3, r25	; 0x03
    237c:	82 83       	std	Z+2, r24	; 0x02

  osEE_unlock_core(p_cdb);

  return p_ccb->p_curr;
}
    237e:	88 81       	ld	r24, Y
    2380:	99 81       	ldd	r25, Y+1	; 0x01
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	1f 91       	pop	r17
    2388:	0f 91       	pop	r16
    238a:	ff 90       	pop	r15
    238c:	ef 90       	pop	r14
    238e:	08 95       	ret

00002390 <osEE_scheduler_task_unblocked>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	fa 01       	movw	r30, r20
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
    239a:	db 01       	movw	r26, r22
    239c:	0d 91       	ld	r16, X+
    239e:	1c 91       	ld	r17, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
    23a0:	42 81       	ldd	r20, Z+2	; 0x02
    23a2:	53 81       	ldd	r21, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
    23a4:	da 01       	movw	r26, r20
    23a6:	14 96       	adiw	r26, 0x04	; 4
    23a8:	cd 91       	ld	r28, X+
    23aa:	dc 91       	ld	r29, X
    23ac:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
    23ae:	82 e0       	ldi	r24, 0x02	; 2
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	9b 83       	std	Y+3, r25	; 0x03
    23b4:	8a 83       	std	Y+2, r24	; 0x02
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
    23b6:	1b 96       	adiw	r26, 0x0b	; 11
    23b8:	8c 91       	ld	r24, X
    23ba:	89 83       	std	Y+1, r24	; 0x01

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    23bc:	bf 01       	movw	r22, r30
    23be:	c8 01       	movw	r24, r16
    23c0:	02 96       	adiw	r24, 0x02	; 2
    23c2:	0e 94 08 11 	call	0x2210	; 0x2210 <osEE_scheduler_rq_insert>
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	91 f4       	brne	.+36     	; 0x23ee <osEE_scheduler_task_unblocked+0x5e>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
    23ca:	d8 01       	movw	r26, r16
    23cc:	ed 91       	ld	r30, X+
    23ce:	fc 91       	ld	r31, X
    23d0:	04 80       	ldd	r0, Z+4	; 0x04
    23d2:	f5 81       	ldd	r31, Z+5	; 0x05
    23d4:	e0 2d       	mov	r30, r0

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    is_preemption = (p_tcb_released->current_prio >
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	39 81       	ldd	r19, Y+1	; 0x01
    23dc:	21 81       	ldd	r18, Z+1	; 0x01
    23de:	23 17       	cp	r18, r19
    23e0:	08 f0       	brcs	.+2      	; 0x23e4 <osEE_scheduler_task_unblocked+0x54>
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	08 95       	ret
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
    23f2:	f8 cf       	rjmp	.-16     	; 0x23e4 <osEE_scheduler_task_unblocked+0x54>

000023f4 <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    23f4:	af 92       	push	r10
    23f6:	bf 92       	push	r11
    23f8:	cf 92       	push	r12
    23fa:	df 92       	push	r13
    23fc:	ef 92       	push	r14
    23fe:	ff 92       	push	r15
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    240a:	db 01       	movw	r26, r22
    240c:	cd 91       	ld	r28, X+
    240e:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    2410:	fe 01       	movw	r30, r28
    2412:	01 91       	ld	r16, Z+
    2414:	11 91       	ld	r17, Z+
    2416:	6f 01       	movw	r12, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    2418:	d8 01       	movw	r26, r16
    241a:	14 96       	adiw	r26, 0x04	; 4
    241c:	ed 90       	ld	r14, X+
    241e:	fc 90       	ld	r15, X

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    2420:	fa 01       	movw	r30, r20
    2422:	11 83       	std	Z+1, r17	; 0x01
    2424:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    2426:	d7 01       	movw	r26, r14
    2428:	12 96       	adiw	r26, 0x02	; 2
    242a:	8d 91       	ld	r24, X+
    242c:	9c 91       	ld	r25, X
    242e:	04 97       	sbiw	r24, 0x04	; 4
    2430:	a9 f5       	brne	.+106    	; 0x249c <osEE_scheduler_task_terminated+0xa8>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    2432:	b6 01       	movw	r22, r12
    2434:	c5 01       	movw	r24, r10
    2436:	0e 94 0f 11 	call	0x221e	; 0x221e <osEE_scheduler_core_pop_running>
    243a:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    243c:	88 81       	ld	r24, Y
    243e:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    2440:	08 17       	cp	r16, r24
    2442:	19 07       	cpc	r17, r25
    2444:	31 f1       	breq	.+76     	; 0x2492 <osEE_scheduler_task_terminated+0x9e>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    2446:	d8 01       	movw	r26, r16
    2448:	14 96       	adiw	r26, 0x04	; 4
    244a:	ed 91       	ld	r30, X+
    244c:	fc 91       	ld	r31, X
    244e:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    2450:	1b 96       	adiw	r26, 0x0b	; 11
    2452:	2c 91       	ld	r18, X
    2454:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    2456:	20 81       	ld	r18, Z
    2458:	21 50       	subi	r18, 0x01	; 1
    245a:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    245c:	21 11       	cpse	r18, r1
    245e:	14 c0       	rjmp	.+40     	; 0x2488 <osEE_scheduler_task_terminated+0x94>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    2460:	13 82       	std	Z+3, r1	; 0x03
    2462:	12 82       	std	Z+2, r1	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    2464:	2c 81       	ldd	r18, Y+4	; 0x04
    2466:	3d 81       	ldd	r19, Y+5	; 0x05
    2468:	da 01       	movw	r26, r20
    246a:	2d 93       	st	X+, r18
    246c:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    246e:	5d 83       	std	Y+5, r21	; 0x05
    2470:	4c 83       	std	Y+4, r20	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	ff 90       	pop	r15
    247c:	ef 90       	pop	r14
    247e:	df 90       	pop	r13
    2480:	cf 90       	pop	r12
    2482:	bf 90       	pop	r11
    2484:	af 90       	pop	r10
    2486:	08 95       	ret
  } else {
    p_tcb->status = OSEE_TASK_READY;
    2488:	21 e0       	ldi	r18, 0x01	; 1
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	33 83       	std	Z+3, r19	; 0x03
    248e:	22 83       	std	Z+2, r18	; 0x02
    2490:	e9 cf       	rjmp	.-46     	; 0x2464 <osEE_scheduler_task_terminated+0x70>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    2492:	f7 01       	movw	r30, r14
    2494:	20 81       	ld	r18, Z
    2496:	21 50       	subi	r18, 0x01	; 1
    2498:	20 83       	st	Z, r18
    249a:	e4 cf       	rjmp	.-56     	; 0x2464 <osEE_scheduler_task_terminated+0x70>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    249c:	6e 81       	ldd	r22, Y+6	; 0x06
    249e:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    24a0:	fb 01       	movw	r30, r22
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	9f 83       	std	Y+7, r25	; 0x07
    24a8:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    24aa:	d8 01       	movw	r26, r16
    24ac:	1b 96       	adiw	r26, 0x0b	; 11
    24ae:	8c 91       	ld	r24, X
    24b0:	f7 01       	movw	r30, r14
    24b2:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	93 83       	std	Z+3, r25	; 0x03
    24ba:	82 83       	std	Z+2, r24	; 0x02
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transiction from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
    24bc:	80 81       	ld	r24, Z
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	11 f4       	brne	.+4      	; 0x24c6 <osEE_scheduler_task_terminated+0xd2>
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    24c2:	11 86       	std	Z+9, r1	; 0x09
    24c4:	10 86       	std	Z+8, r1	; 0x08
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    24c6:	a8 01       	movw	r20, r16
    24c8:	c6 01       	movw	r24, r12
    24ca:	0e 94 08 11 	call	0x2210	; 0x2210 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    24ce:	b6 01       	movw	r22, r12
    24d0:	c5 01       	movw	r24, r10
    24d2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    24d6:	89 2b       	or	r24, r25
    24d8:	39 f4       	brne	.+14     	; 0x24e8 <osEE_scheduler_task_terminated+0xf4>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    24da:	ee 81       	ldd	r30, Y+6	; 0x06
    24dc:	ff 81       	ldd	r31, Y+7	; 0x07
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    24e2:	99 83       	std	Y+1, r25	; 0x01
    24e4:	88 83       	st	Y, r24
    24e6:	c5 cf       	rjmp	.-118    	; 0x2472 <osEE_scheduler_task_terminated+0x7e>
        } else {
          p_tdb_to = p_ccb->p_curr;
    24e8:	88 81       	ld	r24, Y
    24ea:	99 81       	ldd	r25, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    24ec:	c2 cf       	rjmp	.-124    	; 0x2472 <osEE_scheduler_task_terminated+0x7e>

000024ee <osEE_scheduler_task_preemption_point>:
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb
)
{
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cb 01       	movw	r24, r22
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    24f4:	fb 01       	movw	r30, r22
    24f6:	c0 81       	ld	r28, Z
    24f8:	d1 81       	ldd	r29, Z+1	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    24fa:	be 01       	movw	r22, r28
    24fc:	6e 5f       	subi	r22, 0xFE	; 254
    24fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2500:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <osEE_scheduler_core_rq_preempt_stk>

  if (p_prev != NULL) {
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	49 f0       	breq	.+18     	; 0x251a <osEE_scheduler_task_preemption_point+0x2c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_prev, p_curr);
    2508:	68 81       	ld	r22, Y
    250a:	79 81       	ldd	r23, Y+1	; 0x01
    250c:	0e 94 17 13 	call	0x262e	; 0x262e <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
  }
  return is_preemption;
}
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	08 95       	ret
    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	80 e0       	ldi	r24, 0x00	; 0
  }
  return is_preemption;
    251e:	fa cf       	rjmp	.-12     	; 0x2514 <osEE_scheduler_task_preemption_point+0x26>

00002520 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb
)
{
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb  = p_cdb->p_ccb;
    2524:	db 01       	movw	r26, r22
    2526:	ed 91       	ld	r30, X+
    2528:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
    252a:	80 81       	ld	r24, Z
    252c:	91 81       	ldd	r25, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
    252e:	26 81       	ldd	r18, Z+6	; 0x06
    2530:	37 81       	ldd	r19, Z+7	; 0x07

  p_preempted->p_tcb->status    = OSEE_TASK_READY_STACKED;
    2532:	ec 01       	movw	r28, r24
    2534:	ac 81       	ldd	r26, Y+4	; 0x04
    2536:	bd 81       	ldd	r27, Y+5	; 0x05
    2538:	62 e0       	ldi	r22, 0x02	; 2
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	13 96       	adiw	r26, 0x03	; 3
    253e:	7c 93       	st	X, r23
    2540:	6e 93       	st	-X, r22
    2542:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_curr                 = p_tdb;
    2544:	51 83       	std	Z+1, r21	; 0x01
    2546:	40 83       	st	Z, r20
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    2548:	a4 81       	ldd	r26, Z+4	; 0x04
    254a:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    254c:	6d 91       	ld	r22, X+
    254e:	7c 91       	ld	r23, X
    2550:	11 97       	sbiw	r26, 0x01	; 1
    2552:	75 83       	std	Z+5, r23	; 0x05
    2554:	64 83       	std	Z+4, r22	; 0x04

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  /* Alloc the SN for the new Running TASK */
  p_ccb->p_stk_sn               = osEE_sn_alloc(&p_ccb->p_free_sn);
    2556:	b7 83       	std	Z+7, r27	; 0x07
    2558:	a6 83       	std	Z+6, r26	; 0x06
  osEE_unlock_core(p_cdb);

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
    255a:	13 96       	adiw	r26, 0x03	; 3
    255c:	5c 93       	st	X, r21
    255e:	4e 93       	st	-X, r20
    2560:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
    2562:	2d 93       	st	X+, r18
    2564:	3c 93       	st	X, r19

  osEE_change_context_from_running(p_preempted, p_tdb);
    2566:	ba 01       	movw	r22, r20
}
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;

  osEE_change_context_from_running(p_preempted, p_tdb);
    256c:	0c 94 17 13 	jmp	0x262e	; 0x262e <osEE_change_context_from_running>

00002570 <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
    2570:	db 01       	movw	r26, r22
    2572:	ed 91       	ld	r30, X+
    2574:	fc 91       	ld	r31, X
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    2576:	a4 81       	ldd	r26, Z+4	; 0x04
    2578:	b5 81       	ldd	r27, Z+5	; 0x05
    257a:	ab 2b       	or	r26, r27
    257c:	39 f4       	brne	.+14     	; 0x258c <osEE_alarm_set_rel+0x1c>
    ev = E_OS_STATE;
  } else {
    p_alarm_cb->cycle = cycle;
    257e:	37 83       	std	Z+7, r19	; 0x07
    2580:	26 83       	std	Z+6, r18	; 0x06

    osEE_counter_insert_rel_trigger(
    2582:	0e 94 ae 13 	call	0x275c	; 0x275c <osEE_counter_insert_rel_trigger>
      p_counter_db, p_trigger_db, increment
    );
    ev = E_OK;
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	08 95       	ret
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    ev = E_OS_STATE;
    258c:	87 e0       	ldi	r24, 0x07	; 7
    258e:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
    2590:	08 95       	ret

00002592 <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    2592:	f8 94       	cli
    2594:	ff cf       	rjmp	.-2      	; 0x2594 <__vector_default+0x2>

00002596 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    2596:	e2 e9       	ldi	r30, 0x92	; 146
}
    2598:	08 95       	ret

0000259a <__vector_11>:
OSEE_AVR8_ISR_NOT_DEFINED(TIMER1_CAPT_vect)
#endif /* OSEE_AVR8_TIMER1_CAPT_ISR */

/* TIMER1_COMPA interrupt vector */
#if (defined(OSEE_AVR8_TIMER1_COMPA_ISR_TID)) && (OSEE_AVR8_TIMER1_COMPA_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(TIMER1_COMPA_vect, OSEE_AVR8_TIMER1_COMPA_ISR_TID)
    259a:	8f 93       	push	r24
    259c:	9f 93       	push	r25
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	0e 94 d5 12 	call	0x25aa	; 0x25aa <osEE_avr8_isr2_stub>
    25a4:	9f 91       	pop	r25
    25a6:	8f 91       	pop	r24
    25a8:	18 95       	reti

000025aa <osEE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void OSEE_COMPILER_KEEP OSEE_NAKED osEE_avr8_isr2_stub(TaskType t)
{

  OSEE_AVR8_ISR_PREINSTUB();
    25aa:	1f 92       	push	r1
    25ac:	0f 92       	push	r0
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	0f 92       	push	r0
    25b2:	11 24       	eor	r1, r1
    25b4:	2f 93       	push	r18
    25b6:	3f 93       	push	r19
    25b8:	4f 93       	push	r20
    25ba:	5f 93       	push	r21
    25bc:	6f 93       	push	r22
    25be:	7f 93       	push	r23
    25c0:	af 93       	push	r26
    25c2:	bf 93       	push	r27
    25c4:	ef 93       	push	r30
    25c6:	ff 93       	push	r31
{
  VAR(StatusType, AUTOMATIC) ret_val  = E_OK;
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
    25c8:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <KDB+0x2>
    25cc:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <KDB+0x3>
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	88 0f       	add	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	e8 0f       	add	r30, r24
    25d8:	f9 1f       	adc	r31, r25
    25da:	40 81       	ld	r20, Z
    25dc:	51 81       	ldd	r21, Z+1	; 0x01

  /* Mark the TASK as Activated */
  ++p_act_tdb->p_tcb->current_num_of_act;
    25de:	da 01       	movw	r26, r20
    25e0:	14 96       	adiw	r26, 0x04	; 4
    25e2:	ed 91       	ld	r30, X+
    25e4:	fc 91       	ld	r31, X
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	80 83       	st	Z, r24

  osEE_scheduler_task_set_running(p_kdb, p_cdb, p_act_tdb);
    25ec:	6f e4       	ldi	r22, 0x4F	; 79
    25ee:	72 e0       	ldi	r23, 0x02	; 2
    25f0:	89 e3       	ldi	r24, 0x39	; 57
    25f2:	92 e0       	ldi	r25, 0x02	; 2
    25f4:	0e 94 90 12 	call	0x2520	; 0x2520 <osEE_scheduler_task_set_running>
#endif /* __ATXMEGA__ */

  /* Activate ISR2 */
  osEE_activate_isr2(t);

  OSEE_AVR8_ISR_POSTINSTUB();
    25f8:	ff 91       	pop	r31
    25fa:	ef 91       	pop	r30
    25fc:	bf 91       	pop	r27
    25fe:	af 91       	pop	r26
    2600:	7f 91       	pop	r23
    2602:	6f 91       	pop	r22
    2604:	5f 91       	pop	r21
    2606:	4f 91       	pop	r20
    2608:	3f 91       	pop	r19
    260a:	2f 91       	pop	r18
    260c:	0f 90       	pop	r0
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	0f 90       	pop	r0
    2612:	1f 90       	pop	r1

  OSEE_RETURN();
    2614:	08 95       	ret

00002616 <osEE_avr8_system_timer_init>:

#if (defined(OSEE_SYSTEM_TIMER_DEVICE))
#if (OSEE_SYSTEM_TIMER_DEVICE == OSEE_AVR8_TIMER1_COMPA)

void osEE_avr8_system_timer_init(void) {
  OsEE_atmega_startTimer1(OSTICKDURATION / OSEE_KILO);
    2616:	68 ee       	ldi	r22, 0xE8	; 232
    2618:	73 e0       	ldi	r23, 0x03	; 3
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <OsEE_atmega_startTimer1>

00002622 <osEE_avr8_system_timer_handler>:
}

ISR2(osEE_avr8_system_timer_handler) {
  OsEE_CDB * p_cdb = osEE_get_curr_core();
  osEE_counter_increment(p_cdb->p_sys_counter_db);
    2622:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <CDB+0x6>
    2626:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <CDB+0x7>
    262a:	0c 94 ce 13 	jmp	0x279c	; 0x279c <osEE_counter_increment>

0000262e <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    262e:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    2630:	a4 81       	ldd	r26, Z+4	; 0x04
    2632:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    2634:	12 96       	adiw	r26, 0x02	; 2
    2636:	2d 91       	ld	r18, X+
    2638:	3c 91       	ld	r19, X
    263a:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    263c:	44 e0       	ldi	r20, 0x04	; 4
    263e:	50 e0       	ldi	r21, 0x00	; 0
    2640:	13 96       	adiw	r26, 0x03	; 3
    2642:	5c 93       	st	X, r21
    2644:	4e 93       	st	-X, r20
    2646:	12 97       	sbiw	r26, 0x02	; 2
    2648:	dc 01       	movw	r26, r24
    264a:	12 96       	adiw	r26, 0x02	; 2
    264c:	4d 91       	ld	r20, X+
    264e:	5c 91       	ld	r21, X
    2650:	62 81       	ldd	r22, Z+2	; 0x02
    2652:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    2654:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    2656:	22 30       	cpi	r18, 0x02	; 2
    2658:	31 05       	cpc	r19, r1
    265a:	11 f4       	brne	.+4      	; 0x2660 <osEE_change_context_from_running+0x32>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    265c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    2660:	0c 94 16 01 	jmp	0x22c	; 0x22c <osEE_hal_save_ctx_and_ready2stacked>

00002664 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    2664:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    2666:	db 01       	movw	r26, r22
    2668:	14 96       	adiw	r26, 0x04	; 4
    266a:	ed 91       	ld	r30, X+
    266c:	fc 91       	ld	r31, X
    266e:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    2670:	22 81       	ldd	r18, Z+2	; 0x02
    2672:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    2674:	44 e0       	ldi	r20, 0x04	; 4
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	53 83       	std	Z+3, r21	; 0x03
    267a:	42 83       	std	Z+2, r20	; 0x02
    267c:	12 96       	adiw	r26, 0x02	; 2
    267e:	6d 91       	ld	r22, X+
    2680:	7c 91       	ld	r23, X

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    2682:	22 30       	cpi	r18, 0x02	; 2
    2684:	31 05       	cpc	r19, r1
    2686:	11 f4       	brne	.+4      	; 0x268c <osEE_change_context_from_task_end+0x28>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    2688:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    268c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <osEE_hal_ready2stacked>

00002690 <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    2690:	dc 01       	movw	r26, r24
    2692:	12 96       	adiw	r26, 0x02	; 2
    2694:	6d 91       	ld	r22, X+
    2696:	7c 91       	ld	r23, X
    2698:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    269a:	ed 91       	ld	r30, X+
    269c:	fc 91       	ld	r31, X
    269e:	40 81       	ld	r20, Z
    26a0:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    26a2:	db 01       	movw	r26, r22
    26a4:	ed 91       	ld	r30, X+
    26a6:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    26a8:	22 89       	ldd	r18, Z+18	; 0x12
    26aa:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    26ac:	21 15       	cp	r18, r1
    26ae:	31 05       	cpc	r19, r1
    26b0:	19 f0       	breq	.+6      	; 0x26b8 <osEE_idle_task_terminate+0x28>
    26b2:	42 17       	cp	r20, r18
    26b4:	53 07       	cpc	r21, r19
    26b6:	29 f4       	brne	.+10     	; 0x26c2 <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    26b8:	db 01       	movw	r26, r22
    26ba:	ed 93       	st	X+, r30
    26bc:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    26be:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>
    26c2:	f9 01       	movw	r30, r18
    26c4:	f1 cf       	rjmp	.-30     	; 0x26a8 <osEE_idle_task_terminate+0x18>

000026c6 <osEE_counter_insert_abs_trigger>:
    }
  }

  /* Turn Off the Trigger */
  p_trigger_cb->active = OSEE_FALSE;
}
    26c6:	ef 92       	push	r14
    26c8:	ff 92       	push	r15
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	dc 01       	movw	r26, r24
    26d4:	8d 91       	ld	r24, X+
    26d6:	9c 91       	ld	r25, X
    26d8:	dc 01       	movw	r26, r24
    26da:	ed 91       	ld	r30, X+
    26dc:	fc 91       	ld	r31, X
    26de:	11 97       	sbiw	r26, 0x01	; 1
    26e0:	12 96       	adiw	r26, 0x02	; 2
    26e2:	0d 91       	ld	r16, X+
    26e4:	1c 91       	ld	r17, X
    26e6:	db 01       	movw	r26, r22
    26e8:	cd 91       	ld	r28, X+
    26ea:	dc 91       	ld	r29, X
    26ec:	21 e0       	ldi	r18, 0x01	; 1
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	3d 83       	std	Y+5, r19	; 0x05
    26f2:	2c 83       	std	Y+4, r18	; 0x04
    26f4:	5b 83       	std	Y+3, r21	; 0x03
    26f6:	4a 83       	std	Y+2, r20	; 0x02
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 97       	sbiw	r30, 0x00	; 0
    26fe:	e1 f0       	breq	.+56     	; 0x2738 <osEE_counter_insert_abs_trigger+0x72>
    2700:	a0 81       	ld	r26, Z
    2702:	b1 81       	ldd	r27, Z+1	; 0x01
    2704:	12 96       	adiw	r26, 0x02	; 2
    2706:	ed 90       	ld	r14, X+
    2708:	fc 90       	ld	r15, X
    270a:	13 97       	sbiw	r26, 0x03	; 3
    270c:	0e 15       	cp	r16, r14
    270e:	1f 05       	cpc	r17, r15
    2710:	68 f4       	brcc	.+26     	; 0x272c <osEE_counter_insert_abs_trigger+0x66>
    2712:	4e 15       	cp	r20, r14
    2714:	5f 05       	cpc	r21, r15
    2716:	18 f4       	brcc	.+6      	; 0x271e <osEE_counter_insert_abs_trigger+0x58>
    2718:	04 17       	cp	r16, r20
    271a:	15 07       	cpc	r17, r21
    271c:	68 f0       	brcs	.+26     	; 0x2738 <osEE_counter_insert_abs_trigger+0x72>
    271e:	fc 90       	ld	r15, X
    2720:	11 96       	adiw	r26, 0x01	; 1
    2722:	ac 91       	ld	r26, X
    2724:	9f 01       	movw	r18, r30
    2726:	ef 2d       	mov	r30, r15
    2728:	fa 2f       	mov	r31, r26
    272a:	e8 cf       	rjmp	.-48     	; 0x26fc <osEE_counter_insert_abs_trigger+0x36>
    272c:	04 17       	cp	r16, r20
    272e:	15 07       	cpc	r17, r21
    2730:	18 f0       	brcs	.+6      	; 0x2738 <osEE_counter_insert_abs_trigger+0x72>
    2732:	4e 15       	cp	r20, r14
    2734:	5f 05       	cpc	r21, r15
    2736:	98 f7       	brcc	.-26     	; 0x271e <osEE_counter_insert_abs_trigger+0x58>
    2738:	21 15       	cp	r18, r1
    273a:	31 05       	cpc	r19, r1
    273c:	19 f0       	breq	.+6      	; 0x2744 <osEE_counter_insert_abs_trigger+0x7e>
    273e:	d9 01       	movw	r26, r18
    2740:	8d 91       	ld	r24, X+
    2742:	9c 91       	ld	r25, X
    2744:	dc 01       	movw	r26, r24
    2746:	6d 93       	st	X+, r22
    2748:	7c 93       	st	X, r23
    274a:	f9 83       	std	Y+1, r31	; 0x01
    274c:	e8 83       	st	Y, r30
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	08 95       	ret

0000275c <osEE_counter_insert_rel_trigger>:
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	dc 01       	movw	r26, r24
    2762:	12 96       	adiw	r26, 0x02	; 2
    2764:	ed 91       	ld	r30, X+
    2766:	fc 91       	ld	r31, X
    2768:	13 97       	sbiw	r26, 0x03	; 3
    276a:	0d 90       	ld	r0, X+
    276c:	bc 91       	ld	r27, X
    276e:	a0 2d       	mov	r26, r0
    2770:	12 96       	adiw	r26, 0x02	; 2
    2772:	2d 91       	ld	r18, X+
    2774:	3c 91       	ld	r19, X
    2776:	df 01       	movw	r26, r30
    2778:	a4 1b       	sub	r26, r20
    277a:	b5 0b       	sbc	r27, r21
    277c:	a2 17       	cp	r26, r18
    277e:	b3 07       	cpc	r27, r19
    2780:	30 f0       	brcs	.+12     	; 0x278e <osEE_counter_insert_rel_trigger+0x32>
    2782:	42 0f       	add	r20, r18
    2784:	53 1f       	adc	r21, r19
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <osEE_counter_insert_abs_trigger>
    278e:	41 50       	subi	r20, 0x01	; 1
    2790:	51 09       	sbc	r21, r1
    2792:	42 0f       	add	r20, r18
    2794:	53 1f       	adc	r21, r19
    2796:	4e 1b       	sub	r20, r30
    2798:	5f 0b       	sbc	r21, r31
    279a:	f5 cf       	rjmp	.-22     	; 0x2786 <osEE_counter_insert_rel_trigger+0x2a>

0000279c <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
    279c:	2f 92       	push	r2
    279e:	3f 92       	push	r3
    27a0:	4f 92       	push	r4
    27a2:	5f 92       	push	r5
    27a4:	6f 92       	push	r6
    27a6:	7f 92       	push	r7
    27a8:	8f 92       	push	r8
    27aa:	9f 92       	push	r9
    27ac:	af 92       	push	r10
    27ae:	bf 92       	push	r11
    27b0:	cf 92       	push	r12
    27b2:	df 92       	push	r13
    27b4:	ef 92       	push	r14
    27b6:	ff 92       	push	r15
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <osEE_counter_increment+0x26>
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <osEE_counter_increment+0x28>
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
    27c8:	dc 01       	movw	r26, r24
    27ca:	0d 91       	ld	r16, X+
    27cc:	1c 91       	ld	r17, X
    27ce:	11 97       	sbiw	r26, 0x01	; 1
       This because is more efficient to read SFR than mamory. */
    CONST(CoreIdType, AUTOMATIC) counter_core_id = osEE_get_curr_core_id();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
    27d0:	f8 01       	movw	r30, r16
    27d2:	22 81       	ldd	r18, Z+2	; 0x02
    27d4:	33 81       	ldd	r19, Z+3	; 0x03
    27d6:	12 96       	adiw	r26, 0x02	; 2
    27d8:	4d 91       	ld	r20, X+
    27da:	5c 91       	ld	r21, X
    27dc:	24 17       	cp	r18, r20
    27de:	35 07       	cpc	r19, r21
    27e0:	08 f4       	brcc	.+2      	; 0x27e4 <osEE_counter_increment+0x48>
    27e2:	5a c0       	rjmp	.+180    	; 0x2898 <osEE_counter_increment+0xfc>
      counter_value = (p_counter_cb->value = 0U);
    27e4:	13 82       	std	Z+3, r1	; 0x03
    27e6:	12 82       	std	Z+2, r1	; 0x02
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	20 e0       	ldi	r18, 0x00	; 0
            the counters, whenever the locks are not limited resources for the
            HW and falling back to use core locks only for those architectures
            where this is not true. TBD. */
    osEE_lock_core_id(counter_core_id);

    p_triggered_db = p_counter_cb->trigger_queue;
    27ec:	f8 01       	movw	r30, r16
    27ee:	01 90       	ld	r0, Z+
    27f0:	f0 81       	ld	r31, Z
    27f2:	e0 2d       	mov	r30, r0
    27f4:	fc 83       	std	Y+4, r31	; 0x04
    27f6:	eb 83       	std	Y+3, r30	; 0x03

    if (p_triggered_db != NULL) {
    27f8:	30 97       	sbiw	r30, 0x00	; 0
    27fa:	09 f4       	brne	.+2      	; 0x27fe <osEE_counter_increment+0x62>
    27fc:	91 c0       	rjmp	.+290    	; 0x2920 <osEE_counter_increment+0x184>
      P2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
    27fe:	01 90       	ld	r0, Z+
    2800:	f0 81       	ld	r31, Z
    2802:	e0 2d       	mov	r30, r0
    2804:	42 81       	ldd	r20, Z+2	; 0x02
    2806:	53 81       	ldd	r21, Z+3	; 0x03
    2808:	42 17       	cp	r20, r18
    280a:	53 07       	cpc	r21, r19
    280c:	09 f0       	breq	.+2      	; 0x2810 <osEE_counter_increment+0x74>
    280e:	88 c0       	rjmp	.+272    	; 0x2920 <osEE_counter_increment+0x184>
    2810:	ab 81       	ldd	r26, Y+3	; 0x03
    2812:	bc 81       	ldd	r27, Y+4	; 0x04
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
    2814:	2d 91       	ld	r18, X+
    2816:	3c 91       	ld	r19, X
    2818:	f9 01       	movw	r30, r18
    281a:	a0 81       	ld	r26, Z
    281c:	b1 81       	ldd	r27, Z+1	; 0x01
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
    281e:	10 97       	sbiw	r26, 0x00	; 0
    2820:	49 f0       	breq	.+18     	; 0x2834 <osEE_counter_increment+0x98>
    2822:	6d 91       	ld	r22, X+
    2824:	7c 91       	ld	r23, X
    2826:	11 97       	sbiw	r26, 0x01	; 1

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
        } while ((p_current != NULL) &&
    2828:	fb 01       	movw	r30, r22
    282a:	62 81       	ldd	r22, Z+2	; 0x02
    282c:	73 81       	ldd	r23, Z+3	; 0x03
    282e:	46 17       	cp	r20, r22
    2830:	57 07       	cpc	r21, r23
    2832:	81 f3       	breq	.-32     	; 0x2814 <osEE_counter_increment+0x78>
    2834:	2c 01       	movw	r4, r24
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
    2836:	f9 01       	movw	r30, r18
    2838:	11 82       	std	Z+1, r1	; 0x01
    283a:	10 82       	st	Z, r1
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
    283c:	f8 01       	movw	r30, r16
    283e:	b1 83       	std	Z+1, r27	; 0x01
    2840:	a0 83       	st	Z, r26

        if (((p_tcb->wait_mask & mask) != 0U) &&
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);
    2842:	e0 90 4f 02 	lds	r14, 0x024F	; 0x80024f <CDB>
    2846:	f0 90 50 02 	lds	r15, 0x0250	; 0x800250 <CDB+0x1>
    break;
    case OSEE_ACTION_CALLBACK:
    {
#if (defined(OSEE_HAS_CONTEXT))
      CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
        p_ccb = osEE_get_curr_core()->p_ccb;
    284a:	37 01       	movw	r6, r14
#endif
#if (defined(OSEE_HAS_ERRORHOOK))
          if (ev != E_OK) {
            CONST(OsEE_reg, AUTOMATIC)
              flags = osEE_begin_primitive();
            osEE_call_error_hook(osEE_get_curr_core()->p_ccb, ev);
    284c:	67 01       	movw	r12, r14
)
{
#if (defined(OSEE_HAS_ERRORHOOK))
  VAR(OsEE_os_context, AUTOMATIC) prev_os_ctx = p_ccb->os_context;
  if (prev_os_ctx != OSEE_ERRORHOOK_CTX) {
    p_ccb->os_context = OSEE_ERRORHOOK_CTX;
    284e:	83 e0       	ldi	r24, 0x03	; 3
    2850:	28 2e       	mov	r2, r24
    2852:	31 2c       	mov	r3, r1
            p_trigger_to_be_handled = p_triggered_db;

          /* Prepare next trigger to be handled here, before actually handle the
           * current one, otherwise cycling triggers will mess with the list of
           * triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
    2854:	ab 81       	ldd	r26, Y+3	; 0x03
    2856:	bc 81       	ldd	r27, Y+4	; 0x04
    2858:	ad 90       	ld	r10, X+
    285a:	bc 90       	ld	r11, X
    285c:	f5 01       	movw	r30, r10
    285e:	f0 81       	ld	r31, Z
    2860:	f9 83       	std	Y+1, r31	; 0x01
    2862:	d5 01       	movw	r26, r10
    2864:	11 96       	adiw	r26, 0x01	; 1
    2866:	bc 91       	ld	r27, X
    2868:	ba 83       	std	Y+2, r27	; 0x02
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
  CONST(TickType, AUTOMATIC)
    cycle = p_trigger_cb->cycle;
    286a:	f5 01       	movw	r30, r10
    286c:	86 80       	ldd	r8, Z+6	; 0x06
    286e:	97 80       	ldd	r9, Z+7	; 0x07
(
  P2CONST(OsEE_action, AUTOMATIC, OS_APPL_DATA) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev;
  switch (p_action->type) {
    2870:	ab 81       	ldd	r26, Y+3	; 0x03
    2872:	bc 81       	ldd	r27, Y+4	; 0x04
    2874:	1c 96       	adiw	r26, 0x0c	; 12
    2876:	8d 91       	ld	r24, X+
    2878:	9c 91       	ld	r25, X
    287a:	81 30       	cpi	r24, 0x01	; 1
    287c:	91 05       	cpc	r25, r1
    287e:	09 f4       	brne	.+2      	; 0x2882 <osEE_counter_increment+0xe6>
    2880:	66 c0       	rjmp	.+204    	; 0x294e <osEE_counter_increment+0x1b2>
    2882:	78 f0       	brcs	.+30     	; 0x28a2 <osEE_counter_increment+0x106>
    2884:	82 30       	cpi	r24, 0x02	; 2
    2886:	91 05       	cpc	r25, r1
    2888:	09 f4       	brne	.+2      	; 0x288c <osEE_counter_increment+0xf0>
    288a:	9f c0       	rjmp	.+318    	; 0x29ca <osEE_counter_increment+0x22e>
    288c:	03 97       	sbiw	r24, 0x03	; 3
    288e:	09 f4       	brne	.+2      	; 0x2892 <osEE_counter_increment+0xf6>
    2890:	a3 c0       	rjmp	.+326    	; 0x29d8 <osEE_counter_increment+0x23c>
                  osEE_get_kernel(), p_cdb_rel, p_sn);
        }

        osEE_unlock_core(p_cdb_rel);

        ev = E_OK;
    2892:	10 e0       	ldi	r17, 0x00	; 0
    2894:	00 e0       	ldi	r16, 0x00	; 0
    2896:	12 c0       	rjmp	.+36     	; 0x28bc <osEE_counter_increment+0x120>
    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value = (p_counter_cb->value = 0U);
    } else {
      counter_value = ++p_counter_cb->value;
    2898:	2f 5f       	subi	r18, 0xFF	; 255
    289a:	3f 4f       	sbci	r19, 0xFF	; 255
    289c:	33 83       	std	Z+3, r19	; 0x03
    289e:	22 83       	std	Z+2, r18	; 0x02
    28a0:	a5 cf       	rjmp	.-182    	; 0x27ec <osEE_counter_increment+0x50>
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;

      ev = osEE_scheduler_task_activated(
    28a2:	eb 81       	ldd	r30, Y+3	; 0x03
    28a4:	fc 81       	ldd	r31, Y+4	; 0x04
    28a6:	46 81       	ldd	r20, Z+6	; 0x06
    28a8:	57 81       	ldd	r21, Z+7	; 0x07
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	6f e4       	ldi	r22, 0x4F	; 79
    28b0:	72 e0       	ldi	r23, 0x02	; 2
    28b2:	89 e3       	ldi	r24, 0x39	; 57
    28b4:	92 e0       	ldi	r25, 0x02	; 2
    28b6:	0e 94 39 11 	call	0x2272	; 0x2272 <osEE_scheduler_task_activated>
    28ba:	8c 01       	movw	r16, r24
    cycle = p_trigger_cb->cycle;

  ev = osEE_handle_action(&p_alarm_db->action);

  /* TODO: Add active check to let call CancelAlarm from callback... */
  if (cycle > 0U) {
    28bc:	81 14       	cp	r8, r1
    28be:	91 04       	cpc	r9, r1
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <osEE_counter_increment+0x128>
    28c2:	9f c0       	rjmp	.+318    	; 0x2a02 <osEE_counter_increment+0x266>
    osEE_counter_insert_rel_trigger(
    28c4:	a4 01       	movw	r20, r8
    28c6:	6b 81       	ldd	r22, Y+3	; 0x03
    28c8:	7c 81       	ldd	r23, Y+4	; 0x04
    28ca:	c2 01       	movw	r24, r4
    28cc:	0e 94 ae 13 	call	0x275c	; 0x275c <osEE_counter_insert_rel_trigger>
                p_trigger_to_be_handled);
#elif (defined(OSEE_HAS_SCHEDULE_TABLES))
          /* TODO */
#endif
#if (defined(OSEE_HAS_ERRORHOOK))
          if (ev != E_OK) {
    28d0:	01 15       	cp	r16, r1
    28d2:	11 05       	cpc	r17, r1
    28d4:	e1 f0       	breq	.+56     	; 0x290e <osEE_counter_increment+0x172>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    28d6:	bf b6       	in	r11, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    28d8:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
#if (defined(OSEE_HAS_ERRORHOOK))
  VAR(OsEE_os_context, AUTOMATIC) prev_os_ctx = p_ccb->os_context;
    28da:	f6 01       	movw	r30, r12
    28dc:	05 88       	ldd	r0, Z+21	; 0x15
    28de:	f6 89       	ldd	r31, Z+22	; 0x16
    28e0:	e0 2d       	mov	r30, r0
    28e2:	fc 83       	std	Y+4, r31	; 0x04
    28e4:	eb 83       	std	Y+3, r30	; 0x03
  if (prev_os_ctx != OSEE_ERRORHOOK_CTX) {
    28e6:	33 97       	sbiw	r30, 0x03	; 3
    28e8:	89 f0       	breq	.+34     	; 0x290c <osEE_counter_increment+0x170>
    p_ccb->os_context = OSEE_ERRORHOOK_CTX;
    28ea:	d6 01       	movw	r26, r12
    28ec:	56 96       	adiw	r26, 0x16	; 22
    28ee:	3c 92       	st	X, r3
    28f0:	2e 92       	st	-X, r2
    28f2:	55 97       	sbiw	r26, 0x15	; 21
    p_ccb->last_error = Error;
    28f4:	1c 96       	adiw	r26, 0x0c	; 12
    28f6:	1c 93       	st	X, r17
    28f8:	0e 93       	st	-X, r16
    28fa:	1b 97       	sbiw	r26, 0x0b	; 11
    ErrorHook(Error);
    28fc:	c8 01       	movw	r24, r16
    28fe:	0e 94 a7 04 	call	0x94e	; 0x94e <ErrorHook>
    p_ccb->os_context = prev_os_ctx;
    2902:	4b 81       	ldd	r20, Y+3	; 0x03
    2904:	5c 81       	ldd	r21, Y+4	; 0x04
    2906:	f6 01       	movw	r30, r12
    2908:	56 8b       	std	Z+22, r21	; 0x16
    290a:	45 8b       	std	Z+21, r20	; 0x15
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    290c:	bf be       	out	0x3f, r11	; 63
    290e:	59 81       	ldd	r21, Y+1	; 0x01
    2910:	5b 83       	std	Y+3, r21	; 0x03
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	8c 83       	std	Y+4, r24	; 0x04
            osEE_end_primitive(flags);
          }
#else
          (void)ev; /* TODO: Handle ErrorHook */
#endif /* OSEE_HAS_ERRORHOOK */
        } while (p_triggered_db != NULL);
    2916:	ab 81       	ldd	r26, Y+3	; 0x03
    2918:	bc 81       	ldd	r27, Y+4	; 0x04
    291a:	ab 2b       	or	r26, r27
    291c:	09 f0       	breq	.+2      	; 0x2920 <osEE_counter_increment+0x184>
    291e:	9a cf       	rjmp	.-204    	; 0x2854 <osEE_counter_increment+0xb8>
    }
    /* XXX: Unlock the core only at the End of The Service, to not incur in
            races when handling cycling triggers. */
    osEE_unlock_core_id(counter_core_id);
  }
}
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	ff 90       	pop	r15
    2932:	ef 90       	pop	r14
    2934:	df 90       	pop	r13
    2936:	cf 90       	pop	r12
    2938:	bf 90       	pop	r11
    293a:	af 90       	pop	r10
    293c:	9f 90       	pop	r9
    293e:	8f 90       	pop	r8
    2940:	7f 90       	pop	r7
    2942:	6f 90       	pop	r6
    2944:	5f 90       	pop	r5
    2946:	4f 90       	pop	r4
    2948:	3f 90       	pop	r3
    294a:	2f 90       	pop	r2
    294c:	08 95       	ret
    break;
#if (defined(OSEE_HAS_EVENTS))
    case OSEE_ACTION_EVENT:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
    294e:	ab 81       	ldd	r26, Y+3	; 0x03
    2950:	bc 81       	ldd	r27, Y+4	; 0x04
    2952:	16 96       	adiw	r26, 0x06	; 6
    2954:	6d 91       	ld	r22, X+
    2956:	7c 91       	ld	r23, X
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_tcb = p_tdb->p_tcb;
    2958:	db 01       	movw	r26, r22
    295a:	14 96       	adiw	r26, 0x04	; 4
    295c:	ed 91       	ld	r30, X+
    295e:	fc 91       	ld	r31, X
      CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
        p_cdb_rel = osEE_get_task_curr_core(p_tdb);

      osEE_lock_core(p_cdb_rel);
#if (defined(OSEE_HAS_CHECKS))
      if (p_tcb->status == OSEE_TASK_SUSPENDED) {
    2960:	42 81       	ldd	r20, Z+2	; 0x02
    2962:	53 81       	ldd	r21, Z+3	; 0x03
        osEE_unlock_core(p_cdb_rel);
        ev = E_OS_STATE;
    2964:	07 e0       	ldi	r16, 0x07	; 7
    2966:	10 e0       	ldi	r17, 0x00	; 0
      CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
        p_cdb_rel = osEE_get_task_curr_core(p_tdb);

      osEE_lock_core(p_cdb_rel);
#if (defined(OSEE_HAS_CHECKS))
      if (p_tcb->status == OSEE_TASK_SUSPENDED) {
    2968:	41 15       	cp	r20, r1
    296a:	51 05       	cpc	r21, r1
    296c:	09 f4       	brne	.+2      	; 0x2970 <osEE_counter_increment+0x1d4>
    296e:	a6 cf       	rjmp	.-180    	; 0x28bc <osEE_counter_increment+0x120>
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_tcb = p_tdb->p_tcb;
      CONST(EventMaskType, AUTOMATIC)
        mask = p_action->param.mask;
    2970:	ab 81       	ldd	r26, Y+3	; 0x03
    2972:	bc 81       	ldd	r27, Y+4	; 0x04
    2974:	1a 96       	adiw	r26, 0x0a	; 10
    2976:	8d 91       	ld	r24, X+
    2978:	9c 91       	ld	r25, X
      } else
#endif /* OSEE_HAS_CHECKS */
      {
        /* Set the event mask only if the task is not suspended */

        p_tcb->event_mask |= mask;
    297a:	20 85       	ldd	r18, Z+8	; 0x08
    297c:	31 85       	ldd	r19, Z+9	; 0x09
    297e:	28 2b       	or	r18, r24
    2980:	39 2b       	or	r19, r25
    2982:	31 87       	std	Z+9, r19	; 0x09
    2984:	20 87       	std	Z+8, r18	; 0x08

        if (((p_tcb->wait_mask & mask) != 0U) &&
    2986:	26 81       	ldd	r18, Z+6	; 0x06
    2988:	37 81       	ldd	r19, Z+7	; 0x07
    298a:	82 23       	and	r24, r18
    298c:	93 23       	and	r25, r19
    298e:	89 2b       	or	r24, r25
    2990:	09 f4       	brne	.+2      	; 0x2994 <osEE_counter_increment+0x1f8>
    2992:	7f cf       	rjmp	.-258    	; 0x2892 <osEE_counter_increment+0xf6>
    2994:	43 30       	cpi	r20, 0x03	; 3
    2996:	51 05       	cpc	r21, r1
    2998:	09 f0       	breq	.+2      	; 0x299c <osEE_counter_increment+0x200>
    299a:	7b cf       	rjmp	.-266    	; 0x2892 <osEE_counter_increment+0xf6>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    299c:	d7 01       	movw	r26, r14
    299e:	14 96       	adiw	r26, 0x04	; 4
    29a0:	ed 91       	ld	r30, X+
    29a2:	fc 91       	ld	r31, X
    29a4:	15 97       	sbiw	r26, 0x05	; 5
  (*pp_fist)              = p_sn_allocated->p_next;
    29a6:	80 81       	ld	r24, Z
    29a8:	91 81       	ldd	r25, Z+1	; 0x01
    29aa:	15 96       	adiw	r26, 0x05	; 5
    29ac:	9c 93       	st	X, r25
    29ae:	8e 93       	st	-X, r24
    29b0:	14 97       	sbiw	r26, 0x04	; 4
  p_sn_allocated->p_next  = NULL;
    29b2:	11 82       	std	Z+1, r1	; 0x01
    29b4:	10 82       	st	Z, r1
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);

          p_sn->p_tdb = p_tdb;
    29b6:	73 83       	std	Z+3, r23	; 0x03
    29b8:	62 83       	std	Z+2, r22	; 0x02

          /* Release the TASK (and the SN) */
          (void)osEE_scheduler_task_unblocked(
    29ba:	af 01       	movw	r20, r30
    29bc:	6f e4       	ldi	r22, 0x4F	; 79
    29be:	72 e0       	ldi	r23, 0x02	; 2
    29c0:	89 e3       	ldi	r24, 0x39	; 57
    29c2:	92 e0       	ldi	r25, 0x02	; 2
    29c4:	0e 94 c8 11 	call	0x2390	; 0x2390 <osEE_scheduler_task_unblocked>
    29c8:	64 cf       	rjmp	.-312    	; 0x2892 <osEE_counter_increment+0xf6>
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
      osEE_counter_increment(p_action->param.p_counter_db);
    29ca:	eb 81       	ldd	r30, Y+3	; 0x03
    29cc:	fc 81       	ldd	r31, Y+4	; 0x04
    29ce:	80 85       	ldd	r24, Z+8	; 0x08
    29d0:	91 85       	ldd	r25, Z+9	; 0x09
    29d2:	0e 94 ce 13 	call	0x279c	; 0x279c <osEE_counter_increment>
    29d6:	5d cf       	rjmp	.-326    	; 0x2892 <osEE_counter_increment+0xf6>
    {
#if (defined(OSEE_HAS_CONTEXT))
      CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
        p_ccb = osEE_get_curr_core()->p_ccb;
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;
    29d8:	d3 01       	movw	r26, r6
    29da:	55 96       	adiw	r26, 0x15	; 21
    29dc:	0d 91       	ld	r16, X+
    29de:	1c 91       	ld	r17, X
    29e0:	56 97       	sbiw	r26, 0x16	; 22

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
    29e2:	e9 e0       	ldi	r30, 0x09	; 9
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	56 96       	adiw	r26, 0x16	; 22
    29e8:	fc 93       	st	X, r31
    29ea:	ee 93       	st	-X, r30
    29ec:	55 97       	sbiw	r26, 0x15	; 21
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
    29ee:	ab 81       	ldd	r26, Y+3	; 0x03
    29f0:	bc 81       	ldd	r27, Y+4	; 0x04
    29f2:	14 96       	adiw	r26, 0x04	; 4
    29f4:	ed 91       	ld	r30, X+
    29f6:	fc 91       	ld	r31, X
    29f8:	09 95       	icall
#if (defined(OSEE_HAS_CONTEXT))
      p_ccb->os_context = prev_os_context;
    29fa:	f3 01       	movw	r30, r6
    29fc:	16 8b       	std	Z+22, r17	; 0x16
    29fe:	05 8b       	std	Z+21, r16	; 0x15
    2a00:	48 cf       	rjmp	.-368    	; 0x2892 <osEE_counter_increment+0xf6>
  if (cycle > 0U) {
    osEE_counter_insert_rel_trigger(
      p_counter_db, p_trigger_db, cycle
    );
  } else {
    p_trigger_cb->active = OSEE_FALSE;
    2a02:	d5 01       	movw	r26, r10
    2a04:	15 96       	adiw	r26, 0x05	; 5
    2a06:	1c 92       	st	X, r1
    2a08:	1e 92       	st	-X, r1
    2a0a:	14 97       	sbiw	r26, 0x04	; 4
    2a0c:	61 cf       	rjmp	.-318    	; 0x28d0 <osEE_counter_increment+0x134>

00002a0e <OsEE_atmega_startTimer1>:
 * - x < TIMER_1_PRESCALER_1024_MAX_TICKS = 4194304:	64     us
 */
void OsEE_atmega_startTimer1(uint32_t microsecondsInterval) {
  uint8_t	timer1Prescaler;
  uint16_t	timer1CompareValue;
  TCCR1B = 0;	/* Pause Timer. */
    2a0e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  TCCR1A = 0;
    2a12:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  TCCR1C = 0;
    2a16:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
  TCNT1  = 0;
    2a1a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    2a1e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
   * 0 1 1 clkIO/64 (From prescaler)
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    2a22:	61 15       	cp	r22, r1
    2a24:	20 e1       	ldi	r18, 0x10	; 16
    2a26:	72 07       	cpc	r23, r18
    2a28:	81 05       	cpc	r24, r1
    2a2a:	91 05       	cpc	r25, r1
    2a2c:	a0 f4       	brcc	.+40     	; 0x2a56 <OsEE_atmega_startTimer1+0x48>
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
    2a2e:	e4 e0       	ldi	r30, 0x04	; 4
    2a30:	66 0f       	add	r22, r22
    2a32:	77 1f       	adc	r23, r23
    2a34:	ea 95       	dec	r30
    2a36:	e1 f7       	brne	.-8      	; 0x2a30 <OsEE_atmega_startTimer1+0x22>
    2a38:	61 50       	subi	r22, 0x01	; 1
    2a3a:	71 09       	sbc	r23, r1
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
  }
#else
  #error("Unsupported CPU frequency")
#endif
  TIFR1  = (1 << OCIE1A);	/* Clear Output Compare A Match Flag. */
    2a3e:	92 e0       	ldi	r25, 0x02	; 2
    2a40:	96 bb       	out	0x16, r25	; 22
  TIMSK1 = (1 << OCIE1A);	/* Output Compare A Match Interrupt Enable */
    2a42:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  OCR1A  = timer1CompareValue;	/* Set Compare A Match Value */
    2a46:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    2a4a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  TCCR1B = (1 << WGM12) | timer1Prescaler;	/* Set CTC Mode and Prescaler. */
    2a4e:	88 60       	ori	r24, 0x08	; 8
    2a50:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
}	/* startTimer1() */
    2a54:	08 95       	ret
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    2a56:	61 15       	cp	r22, r1
    2a58:	20 e8       	ldi	r18, 0x80	; 128
    2a5a:	72 07       	cpc	r23, r18
    2a5c:	81 05       	cpc	r24, r1
    2a5e:	91 05       	cpc	r25, r1
    2a60:	30 f4       	brcc	.+12     	; 0x2a6e <OsEE_atmega_startTimer1+0x60>
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
    2a62:	66 0f       	add	r22, r22
    2a64:	77 1f       	adc	r23, r23
    2a66:	61 50       	subi	r22, 0x01	; 1
    2a68:	71 09       	sbc	r23, r1
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	e8 cf       	rjmp	.-48     	; 0x2a3e <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    2a6e:	6c 3f       	cpi	r22, 0xFC	; 252
    2a70:	2f ef       	ldi	r18, 0xFF	; 255
    2a72:	72 07       	cpc	r23, r18
    2a74:	23 e0       	ldi	r18, 0x03	; 3
    2a76:	82 07       	cpc	r24, r18
    2a78:	91 05       	cpc	r25, r1
    2a7a:	58 f4       	brcc	.+22     	; 0x2a92 <OsEE_atmega_startTimer1+0x84>
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
    2a7c:	42 e0       	ldi	r20, 0x02	; 2
    2a7e:	96 95       	lsr	r25
    2a80:	87 95       	ror	r24
    2a82:	77 95       	ror	r23
    2a84:	67 95       	ror	r22
    2a86:	4a 95       	dec	r20
    2a88:	d1 f7       	brne	.-12     	; 0x2a7e <OsEE_atmega_startTimer1+0x70>
    2a8a:	61 50       	subi	r22, 0x01	; 1
    2a8c:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    2a8e:	83 e0       	ldi	r24, 0x03	; 3
    2a90:	d6 cf       	rjmp	.-84     	; 0x2a3e <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    2a92:	61 15       	cp	r22, r1
    2a94:	71 05       	cpc	r23, r1
    2a96:	20 e1       	ldi	r18, 0x10	; 16
    2a98:	82 07       	cpc	r24, r18
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	58 f4       	brcc	.+22     	; 0x2ab4 <OsEE_atmega_startTimer1+0xa6>
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
    2a9e:	34 e0       	ldi	r19, 0x04	; 4
    2aa0:	96 95       	lsr	r25
    2aa2:	87 95       	ror	r24
    2aa4:	77 95       	ror	r23
    2aa6:	67 95       	ror	r22
    2aa8:	3a 95       	dec	r19
    2aaa:	d1 f7       	brne	.-12     	; 0x2aa0 <OsEE_atmega_startTimer1+0x92>
    2aac:	61 50       	subi	r22, 0x01	; 1
    2aae:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    2ab0:	84 e0       	ldi	r24, 0x04	; 4
    2ab2:	c5 cf       	rjmp	.-118    	; 0x2a3e <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
    2ab4:	26 e0       	ldi	r18, 0x06	; 6
    2ab6:	96 95       	lsr	r25
    2ab8:	87 95       	ror	r24
    2aba:	77 95       	ror	r23
    2abc:	67 95       	ror	r22
    2abe:	2a 95       	dec	r18
    2ac0:	d1 f7       	brne	.-12     	; 0x2ab6 <OsEE_atmega_startTimer1+0xa8>
    2ac2:	61 50       	subi	r22, 0x01	; 1
    2ac4:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    2ac6:	85 e0       	ldi	r24, 0x05	; 5
    2ac8:	ba cf       	rjmp	.-140    	; 0x2a3e <OsEE_atmega_startTimer1+0x30>

00002aca <__subsf3>:
    2aca:	50 58       	subi	r21, 0x80	; 128

00002acc <__addsf3>:
    2acc:	bb 27       	eor	r27, r27
    2ace:	aa 27       	eor	r26, r26
    2ad0:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3x>
    2ad4:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__fp_round>
    2ad8:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fp_pscA>
    2adc:	38 f0       	brcs	.+14     	; 0x2aec <__addsf3+0x20>
    2ade:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fp_pscB>
    2ae2:	20 f0       	brcs	.+8      	; 0x2aec <__addsf3+0x20>
    2ae4:	39 f4       	brne	.+14     	; 0x2af4 <__addsf3+0x28>
    2ae6:	9f 3f       	cpi	r25, 0xFF	; 255
    2ae8:	19 f4       	brne	.+6      	; 0x2af0 <__addsf3+0x24>
    2aea:	26 f4       	brtc	.+8      	; 0x2af4 <__addsf3+0x28>
    2aec:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__fp_nan>
    2af0:	0e f4       	brtc	.+2      	; 0x2af4 <__addsf3+0x28>
    2af2:	e0 95       	com	r30
    2af4:	e7 fb       	bst	r30, 7
    2af6:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__fp_inf>

00002afa <__addsf3x>:
    2afa:	e9 2f       	mov	r30, r25
    2afc:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__fp_split3>
    2b00:	58 f3       	brcs	.-42     	; 0x2ad8 <__addsf3+0xc>
    2b02:	ba 17       	cp	r27, r26
    2b04:	62 07       	cpc	r22, r18
    2b06:	73 07       	cpc	r23, r19
    2b08:	84 07       	cpc	r24, r20
    2b0a:	95 07       	cpc	r25, r21
    2b0c:	20 f0       	brcs	.+8      	; 0x2b16 <__addsf3x+0x1c>
    2b0e:	79 f4       	brne	.+30     	; 0x2b2e <__addsf3x+0x34>
    2b10:	a6 f5       	brtc	.+104    	; 0x2b7a <__addsf3x+0x80>
    2b12:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__fp_zero>
    2b16:	0e f4       	brtc	.+2      	; 0x2b1a <__addsf3x+0x20>
    2b18:	e0 95       	com	r30
    2b1a:	0b 2e       	mov	r0, r27
    2b1c:	ba 2f       	mov	r27, r26
    2b1e:	a0 2d       	mov	r26, r0
    2b20:	0b 01       	movw	r0, r22
    2b22:	b9 01       	movw	r22, r18
    2b24:	90 01       	movw	r18, r0
    2b26:	0c 01       	movw	r0, r24
    2b28:	ca 01       	movw	r24, r20
    2b2a:	a0 01       	movw	r20, r0
    2b2c:	11 24       	eor	r1, r1
    2b2e:	ff 27       	eor	r31, r31
    2b30:	59 1b       	sub	r21, r25
    2b32:	99 f0       	breq	.+38     	; 0x2b5a <__addsf3x+0x60>
    2b34:	59 3f       	cpi	r21, 0xF9	; 249
    2b36:	50 f4       	brcc	.+20     	; 0x2b4c <__addsf3x+0x52>
    2b38:	50 3e       	cpi	r21, 0xE0	; 224
    2b3a:	68 f1       	brcs	.+90     	; 0x2b96 <__addsf3x+0x9c>
    2b3c:	1a 16       	cp	r1, r26
    2b3e:	f0 40       	sbci	r31, 0x00	; 0
    2b40:	a2 2f       	mov	r26, r18
    2b42:	23 2f       	mov	r18, r19
    2b44:	34 2f       	mov	r19, r20
    2b46:	44 27       	eor	r20, r20
    2b48:	58 5f       	subi	r21, 0xF8	; 248
    2b4a:	f3 cf       	rjmp	.-26     	; 0x2b32 <__addsf3x+0x38>
    2b4c:	46 95       	lsr	r20
    2b4e:	37 95       	ror	r19
    2b50:	27 95       	ror	r18
    2b52:	a7 95       	ror	r26
    2b54:	f0 40       	sbci	r31, 0x00	; 0
    2b56:	53 95       	inc	r21
    2b58:	c9 f7       	brne	.-14     	; 0x2b4c <__addsf3x+0x52>
    2b5a:	7e f4       	brtc	.+30     	; 0x2b7a <__addsf3x+0x80>
    2b5c:	1f 16       	cp	r1, r31
    2b5e:	ba 0b       	sbc	r27, r26
    2b60:	62 0b       	sbc	r22, r18
    2b62:	73 0b       	sbc	r23, r19
    2b64:	84 0b       	sbc	r24, r20
    2b66:	ba f0       	brmi	.+46     	; 0x2b96 <__addsf3x+0x9c>
    2b68:	91 50       	subi	r25, 0x01	; 1
    2b6a:	a1 f0       	breq	.+40     	; 0x2b94 <__addsf3x+0x9a>
    2b6c:	ff 0f       	add	r31, r31
    2b6e:	bb 1f       	adc	r27, r27
    2b70:	66 1f       	adc	r22, r22
    2b72:	77 1f       	adc	r23, r23
    2b74:	88 1f       	adc	r24, r24
    2b76:	c2 f7       	brpl	.-16     	; 0x2b68 <__addsf3x+0x6e>
    2b78:	0e c0       	rjmp	.+28     	; 0x2b96 <__addsf3x+0x9c>
    2b7a:	ba 0f       	add	r27, r26
    2b7c:	62 1f       	adc	r22, r18
    2b7e:	73 1f       	adc	r23, r19
    2b80:	84 1f       	adc	r24, r20
    2b82:	48 f4       	brcc	.+18     	; 0x2b96 <__addsf3x+0x9c>
    2b84:	87 95       	ror	r24
    2b86:	77 95       	ror	r23
    2b88:	67 95       	ror	r22
    2b8a:	b7 95       	ror	r27
    2b8c:	f7 95       	ror	r31
    2b8e:	9e 3f       	cpi	r25, 0xFE	; 254
    2b90:	08 f0       	brcs	.+2      	; 0x2b94 <__addsf3x+0x9a>
    2b92:	b0 cf       	rjmp	.-160    	; 0x2af4 <__addsf3+0x28>
    2b94:	93 95       	inc	r25
    2b96:	88 0f       	add	r24, r24
    2b98:	08 f0       	brcs	.+2      	; 0x2b9c <__addsf3x+0xa2>
    2b9a:	99 27       	eor	r25, r25
    2b9c:	ee 0f       	add	r30, r30
    2b9e:	97 95       	ror	r25
    2ba0:	87 95       	ror	r24
    2ba2:	08 95       	ret

00002ba4 <__cmpsf2>:
    2ba4:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__fp_cmp>
    2ba8:	08 f4       	brcc	.+2      	; 0x2bac <__cmpsf2+0x8>
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	08 95       	ret

00002bae <__divsf3>:
    2bae:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__divsf3x>
    2bb2:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__fp_round>
    2bb6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fp_pscB>
    2bba:	58 f0       	brcs	.+22     	; 0x2bd2 <__divsf3+0x24>
    2bbc:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fp_pscA>
    2bc0:	40 f0       	brcs	.+16     	; 0x2bd2 <__divsf3+0x24>
    2bc2:	29 f4       	brne	.+10     	; 0x2bce <__divsf3+0x20>
    2bc4:	5f 3f       	cpi	r21, 0xFF	; 255
    2bc6:	29 f0       	breq	.+10     	; 0x2bd2 <__divsf3+0x24>
    2bc8:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__fp_inf>
    2bcc:	51 11       	cpse	r21, r1
    2bce:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__fp_szero>
    2bd2:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__fp_nan>

00002bd6 <__divsf3x>:
    2bd6:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__fp_split3>
    2bda:	68 f3       	brcs	.-38     	; 0x2bb6 <__divsf3+0x8>

00002bdc <__divsf3_pse>:
    2bdc:	99 23       	and	r25, r25
    2bde:	b1 f3       	breq	.-20     	; 0x2bcc <__divsf3+0x1e>
    2be0:	55 23       	and	r21, r21
    2be2:	91 f3       	breq	.-28     	; 0x2bc8 <__divsf3+0x1a>
    2be4:	95 1b       	sub	r25, r21
    2be6:	55 0b       	sbc	r21, r21
    2be8:	bb 27       	eor	r27, r27
    2bea:	aa 27       	eor	r26, r26
    2bec:	62 17       	cp	r22, r18
    2bee:	73 07       	cpc	r23, r19
    2bf0:	84 07       	cpc	r24, r20
    2bf2:	38 f0       	brcs	.+14     	; 0x2c02 <__divsf3_pse+0x26>
    2bf4:	9f 5f       	subi	r25, 0xFF	; 255
    2bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf8:	22 0f       	add	r18, r18
    2bfa:	33 1f       	adc	r19, r19
    2bfc:	44 1f       	adc	r20, r20
    2bfe:	aa 1f       	adc	r26, r26
    2c00:	a9 f3       	breq	.-22     	; 0x2bec <__divsf3_pse+0x10>
    2c02:	35 d0       	rcall	.+106    	; 0x2c6e <__divsf3_pse+0x92>
    2c04:	0e 2e       	mov	r0, r30
    2c06:	3a f0       	brmi	.+14     	; 0x2c16 <__divsf3_pse+0x3a>
    2c08:	e0 e8       	ldi	r30, 0x80	; 128
    2c0a:	32 d0       	rcall	.+100    	; 0x2c70 <__divsf3_pse+0x94>
    2c0c:	91 50       	subi	r25, 0x01	; 1
    2c0e:	50 40       	sbci	r21, 0x00	; 0
    2c10:	e6 95       	lsr	r30
    2c12:	00 1c       	adc	r0, r0
    2c14:	ca f7       	brpl	.-14     	; 0x2c08 <__divsf3_pse+0x2c>
    2c16:	2b d0       	rcall	.+86     	; 0x2c6e <__divsf3_pse+0x92>
    2c18:	fe 2f       	mov	r31, r30
    2c1a:	29 d0       	rcall	.+82     	; 0x2c6e <__divsf3_pse+0x92>
    2c1c:	66 0f       	add	r22, r22
    2c1e:	77 1f       	adc	r23, r23
    2c20:	88 1f       	adc	r24, r24
    2c22:	bb 1f       	adc	r27, r27
    2c24:	26 17       	cp	r18, r22
    2c26:	37 07       	cpc	r19, r23
    2c28:	48 07       	cpc	r20, r24
    2c2a:	ab 07       	cpc	r26, r27
    2c2c:	b0 e8       	ldi	r27, 0x80	; 128
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <__divsf3_pse+0x56>
    2c30:	bb 0b       	sbc	r27, r27
    2c32:	80 2d       	mov	r24, r0
    2c34:	bf 01       	movw	r22, r30
    2c36:	ff 27       	eor	r31, r31
    2c38:	93 58       	subi	r25, 0x83	; 131
    2c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3c:	3a f0       	brmi	.+14     	; 0x2c4c <__divsf3_pse+0x70>
    2c3e:	9e 3f       	cpi	r25, 0xFE	; 254
    2c40:	51 05       	cpc	r21, r1
    2c42:	78 f0       	brcs	.+30     	; 0x2c62 <__divsf3_pse+0x86>
    2c44:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__fp_inf>
    2c48:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__fp_szero>
    2c4c:	5f 3f       	cpi	r21, 0xFF	; 255
    2c4e:	e4 f3       	brlt	.-8      	; 0x2c48 <__divsf3_pse+0x6c>
    2c50:	98 3e       	cpi	r25, 0xE8	; 232
    2c52:	d4 f3       	brlt	.-12     	; 0x2c48 <__divsf3_pse+0x6c>
    2c54:	86 95       	lsr	r24
    2c56:	77 95       	ror	r23
    2c58:	67 95       	ror	r22
    2c5a:	b7 95       	ror	r27
    2c5c:	f7 95       	ror	r31
    2c5e:	9f 5f       	subi	r25, 0xFF	; 255
    2c60:	c9 f7       	brne	.-14     	; 0x2c54 <__divsf3_pse+0x78>
    2c62:	88 0f       	add	r24, r24
    2c64:	91 1d       	adc	r25, r1
    2c66:	96 95       	lsr	r25
    2c68:	87 95       	ror	r24
    2c6a:	97 f9       	bld	r25, 7
    2c6c:	08 95       	ret
    2c6e:	e1 e0       	ldi	r30, 0x01	; 1
    2c70:	66 0f       	add	r22, r22
    2c72:	77 1f       	adc	r23, r23
    2c74:	88 1f       	adc	r24, r24
    2c76:	bb 1f       	adc	r27, r27
    2c78:	62 17       	cp	r22, r18
    2c7a:	73 07       	cpc	r23, r19
    2c7c:	84 07       	cpc	r24, r20
    2c7e:	ba 07       	cpc	r27, r26
    2c80:	20 f0       	brcs	.+8      	; 0x2c8a <__divsf3_pse+0xae>
    2c82:	62 1b       	sub	r22, r18
    2c84:	73 0b       	sbc	r23, r19
    2c86:	84 0b       	sbc	r24, r20
    2c88:	ba 0b       	sbc	r27, r26
    2c8a:	ee 1f       	adc	r30, r30
    2c8c:	88 f7       	brcc	.-30     	; 0x2c70 <__divsf3_pse+0x94>
    2c8e:	e0 95       	com	r30
    2c90:	08 95       	ret

00002c92 <__fixsfsi>:
    2c92:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__fixunssfsi>
    2c96:	68 94       	set
    2c98:	b1 11       	cpse	r27, r1
    2c9a:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__fp_szero>
    2c9e:	08 95       	ret

00002ca0 <__fixunssfsi>:
    2ca0:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__fp_splitA>
    2ca4:	88 f0       	brcs	.+34     	; 0x2cc8 <__fixunssfsi+0x28>
    2ca6:	9f 57       	subi	r25, 0x7F	; 127
    2ca8:	98 f0       	brcs	.+38     	; 0x2cd0 <__fixunssfsi+0x30>
    2caa:	b9 2f       	mov	r27, r25
    2cac:	99 27       	eor	r25, r25
    2cae:	b7 51       	subi	r27, 0x17	; 23
    2cb0:	b0 f0       	brcs	.+44     	; 0x2cde <__fixunssfsi+0x3e>
    2cb2:	e1 f0       	breq	.+56     	; 0x2cec <__fixunssfsi+0x4c>
    2cb4:	66 0f       	add	r22, r22
    2cb6:	77 1f       	adc	r23, r23
    2cb8:	88 1f       	adc	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	1a f0       	brmi	.+6      	; 0x2cc4 <__fixunssfsi+0x24>
    2cbe:	ba 95       	dec	r27
    2cc0:	c9 f7       	brne	.-14     	; 0x2cb4 <__fixunssfsi+0x14>
    2cc2:	14 c0       	rjmp	.+40     	; 0x2cec <__fixunssfsi+0x4c>
    2cc4:	b1 30       	cpi	r27, 0x01	; 1
    2cc6:	91 f0       	breq	.+36     	; 0x2cec <__fixunssfsi+0x4c>
    2cc8:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__fp_zero>
    2ccc:	b1 e0       	ldi	r27, 0x01	; 1
    2cce:	08 95       	ret
    2cd0:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__fp_zero>
    2cd4:	67 2f       	mov	r22, r23
    2cd6:	78 2f       	mov	r23, r24
    2cd8:	88 27       	eor	r24, r24
    2cda:	b8 5f       	subi	r27, 0xF8	; 248
    2cdc:	39 f0       	breq	.+14     	; 0x2cec <__fixunssfsi+0x4c>
    2cde:	b9 3f       	cpi	r27, 0xF9	; 249
    2ce0:	cc f3       	brlt	.-14     	; 0x2cd4 <__fixunssfsi+0x34>
    2ce2:	86 95       	lsr	r24
    2ce4:	77 95       	ror	r23
    2ce6:	67 95       	ror	r22
    2ce8:	b3 95       	inc	r27
    2cea:	d9 f7       	brne	.-10     	; 0x2ce2 <__fixunssfsi+0x42>
    2cec:	3e f4       	brtc	.+14     	; 0x2cfc <__fixunssfsi+0x5c>
    2cee:	90 95       	com	r25
    2cf0:	80 95       	com	r24
    2cf2:	70 95       	com	r23
    2cf4:	61 95       	neg	r22
    2cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfc:	08 95       	ret

00002cfe <__floatunsisf>:
    2cfe:	e8 94       	clt
    2d00:	09 c0       	rjmp	.+18     	; 0x2d14 <__floatsisf+0x12>

00002d02 <__floatsisf>:
    2d02:	97 fb       	bst	r25, 7
    2d04:	3e f4       	brtc	.+14     	; 0x2d14 <__floatsisf+0x12>
    2d06:	90 95       	com	r25
    2d08:	80 95       	com	r24
    2d0a:	70 95       	com	r23
    2d0c:	61 95       	neg	r22
    2d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d10:	8f 4f       	sbci	r24, 0xFF	; 255
    2d12:	9f 4f       	sbci	r25, 0xFF	; 255
    2d14:	99 23       	and	r25, r25
    2d16:	a9 f0       	breq	.+42     	; 0x2d42 <__floatsisf+0x40>
    2d18:	f9 2f       	mov	r31, r25
    2d1a:	96 e9       	ldi	r25, 0x96	; 150
    2d1c:	bb 27       	eor	r27, r27
    2d1e:	93 95       	inc	r25
    2d20:	f6 95       	lsr	r31
    2d22:	87 95       	ror	r24
    2d24:	77 95       	ror	r23
    2d26:	67 95       	ror	r22
    2d28:	b7 95       	ror	r27
    2d2a:	f1 11       	cpse	r31, r1
    2d2c:	f8 cf       	rjmp	.-16     	; 0x2d1e <__floatsisf+0x1c>
    2d2e:	fa f4       	brpl	.+62     	; 0x2d6e <__floatsisf+0x6c>
    2d30:	bb 0f       	add	r27, r27
    2d32:	11 f4       	brne	.+4      	; 0x2d38 <__floatsisf+0x36>
    2d34:	60 ff       	sbrs	r22, 0
    2d36:	1b c0       	rjmp	.+54     	; 0x2d6e <__floatsisf+0x6c>
    2d38:	6f 5f       	subi	r22, 0xFF	; 255
    2d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d40:	16 c0       	rjmp	.+44     	; 0x2d6e <__floatsisf+0x6c>
    2d42:	88 23       	and	r24, r24
    2d44:	11 f0       	breq	.+4      	; 0x2d4a <__floatsisf+0x48>
    2d46:	96 e9       	ldi	r25, 0x96	; 150
    2d48:	11 c0       	rjmp	.+34     	; 0x2d6c <__floatsisf+0x6a>
    2d4a:	77 23       	and	r23, r23
    2d4c:	21 f0       	breq	.+8      	; 0x2d56 <__floatsisf+0x54>
    2d4e:	9e e8       	ldi	r25, 0x8E	; 142
    2d50:	87 2f       	mov	r24, r23
    2d52:	76 2f       	mov	r23, r22
    2d54:	05 c0       	rjmp	.+10     	; 0x2d60 <__floatsisf+0x5e>
    2d56:	66 23       	and	r22, r22
    2d58:	71 f0       	breq	.+28     	; 0x2d76 <__floatsisf+0x74>
    2d5a:	96 e8       	ldi	r25, 0x86	; 134
    2d5c:	86 2f       	mov	r24, r22
    2d5e:	70 e0       	ldi	r23, 0x00	; 0
    2d60:	60 e0       	ldi	r22, 0x00	; 0
    2d62:	2a f0       	brmi	.+10     	; 0x2d6e <__floatsisf+0x6c>
    2d64:	9a 95       	dec	r25
    2d66:	66 0f       	add	r22, r22
    2d68:	77 1f       	adc	r23, r23
    2d6a:	88 1f       	adc	r24, r24
    2d6c:	da f7       	brpl	.-10     	; 0x2d64 <__floatsisf+0x62>
    2d6e:	88 0f       	add	r24, r24
    2d70:	96 95       	lsr	r25
    2d72:	87 95       	ror	r24
    2d74:	97 f9       	bld	r25, 7
    2d76:	08 95       	ret

00002d78 <__fp_cmp>:
    2d78:	99 0f       	add	r25, r25
    2d7a:	00 08       	sbc	r0, r0
    2d7c:	55 0f       	add	r21, r21
    2d7e:	aa 0b       	sbc	r26, r26
    2d80:	e0 e8       	ldi	r30, 0x80	; 128
    2d82:	fe ef       	ldi	r31, 0xFE	; 254
    2d84:	16 16       	cp	r1, r22
    2d86:	17 06       	cpc	r1, r23
    2d88:	e8 07       	cpc	r30, r24
    2d8a:	f9 07       	cpc	r31, r25
    2d8c:	c0 f0       	brcs	.+48     	; 0x2dbe <__fp_cmp+0x46>
    2d8e:	12 16       	cp	r1, r18
    2d90:	13 06       	cpc	r1, r19
    2d92:	e4 07       	cpc	r30, r20
    2d94:	f5 07       	cpc	r31, r21
    2d96:	98 f0       	brcs	.+38     	; 0x2dbe <__fp_cmp+0x46>
    2d98:	62 1b       	sub	r22, r18
    2d9a:	73 0b       	sbc	r23, r19
    2d9c:	84 0b       	sbc	r24, r20
    2d9e:	95 0b       	sbc	r25, r21
    2da0:	39 f4       	brne	.+14     	; 0x2db0 <__fp_cmp+0x38>
    2da2:	0a 26       	eor	r0, r26
    2da4:	61 f0       	breq	.+24     	; 0x2dbe <__fp_cmp+0x46>
    2da6:	23 2b       	or	r18, r19
    2da8:	24 2b       	or	r18, r20
    2daa:	25 2b       	or	r18, r21
    2dac:	21 f4       	brne	.+8      	; 0x2db6 <__fp_cmp+0x3e>
    2dae:	08 95       	ret
    2db0:	0a 26       	eor	r0, r26
    2db2:	09 f4       	brne	.+2      	; 0x2db6 <__fp_cmp+0x3e>
    2db4:	a1 40       	sbci	r26, 0x01	; 1
    2db6:	a6 95       	lsr	r26
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	81 1d       	adc	r24, r1
    2dbc:	81 1d       	adc	r24, r1
    2dbe:	08 95       	ret

00002dc0 <__fp_inf>:
    2dc0:	97 f9       	bld	r25, 7
    2dc2:	9f 67       	ori	r25, 0x7F	; 127
    2dc4:	80 e8       	ldi	r24, 0x80	; 128
    2dc6:	70 e0       	ldi	r23, 0x00	; 0
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	08 95       	ret

00002dcc <__fp_nan>:
    2dcc:	9f ef       	ldi	r25, 0xFF	; 255
    2dce:	80 ec       	ldi	r24, 0xC0	; 192
    2dd0:	08 95       	ret

00002dd2 <__fp_pscA>:
    2dd2:	00 24       	eor	r0, r0
    2dd4:	0a 94       	dec	r0
    2dd6:	16 16       	cp	r1, r22
    2dd8:	17 06       	cpc	r1, r23
    2dda:	18 06       	cpc	r1, r24
    2ddc:	09 06       	cpc	r0, r25
    2dde:	08 95       	ret

00002de0 <__fp_pscB>:
    2de0:	00 24       	eor	r0, r0
    2de2:	0a 94       	dec	r0
    2de4:	12 16       	cp	r1, r18
    2de6:	13 06       	cpc	r1, r19
    2de8:	14 06       	cpc	r1, r20
    2dea:	05 06       	cpc	r0, r21
    2dec:	08 95       	ret

00002dee <__fp_round>:
    2dee:	09 2e       	mov	r0, r25
    2df0:	03 94       	inc	r0
    2df2:	00 0c       	add	r0, r0
    2df4:	11 f4       	brne	.+4      	; 0x2dfa <__fp_round+0xc>
    2df6:	88 23       	and	r24, r24
    2df8:	52 f0       	brmi	.+20     	; 0x2e0e <__fp_round+0x20>
    2dfa:	bb 0f       	add	r27, r27
    2dfc:	40 f4       	brcc	.+16     	; 0x2e0e <__fp_round+0x20>
    2dfe:	bf 2b       	or	r27, r31
    2e00:	11 f4       	brne	.+4      	; 0x2e06 <__fp_round+0x18>
    2e02:	60 ff       	sbrs	r22, 0
    2e04:	04 c0       	rjmp	.+8      	; 0x2e0e <__fp_round+0x20>
    2e06:	6f 5f       	subi	r22, 0xFF	; 255
    2e08:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0e:	08 95       	ret

00002e10 <__fp_split3>:
    2e10:	57 fd       	sbrc	r21, 7
    2e12:	90 58       	subi	r25, 0x80	; 128
    2e14:	44 0f       	add	r20, r20
    2e16:	55 1f       	adc	r21, r21
    2e18:	59 f0       	breq	.+22     	; 0x2e30 <__fp_splitA+0x10>
    2e1a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e1c:	71 f0       	breq	.+28     	; 0x2e3a <__fp_splitA+0x1a>
    2e1e:	47 95       	ror	r20

00002e20 <__fp_splitA>:
    2e20:	88 0f       	add	r24, r24
    2e22:	97 fb       	bst	r25, 7
    2e24:	99 1f       	adc	r25, r25
    2e26:	61 f0       	breq	.+24     	; 0x2e40 <__fp_splitA+0x20>
    2e28:	9f 3f       	cpi	r25, 0xFF	; 255
    2e2a:	79 f0       	breq	.+30     	; 0x2e4a <__fp_splitA+0x2a>
    2e2c:	87 95       	ror	r24
    2e2e:	08 95       	ret
    2e30:	12 16       	cp	r1, r18
    2e32:	13 06       	cpc	r1, r19
    2e34:	14 06       	cpc	r1, r20
    2e36:	55 1f       	adc	r21, r21
    2e38:	f2 cf       	rjmp	.-28     	; 0x2e1e <__fp_split3+0xe>
    2e3a:	46 95       	lsr	r20
    2e3c:	f1 df       	rcall	.-30     	; 0x2e20 <__fp_splitA>
    2e3e:	08 c0       	rjmp	.+16     	; 0x2e50 <__fp_splitA+0x30>
    2e40:	16 16       	cp	r1, r22
    2e42:	17 06       	cpc	r1, r23
    2e44:	18 06       	cpc	r1, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	f1 cf       	rjmp	.-30     	; 0x2e2c <__fp_splitA+0xc>
    2e4a:	86 95       	lsr	r24
    2e4c:	71 05       	cpc	r23, r1
    2e4e:	61 05       	cpc	r22, r1
    2e50:	08 94       	sec
    2e52:	08 95       	ret

00002e54 <__fp_zero>:
    2e54:	e8 94       	clt

00002e56 <__fp_szero>:
    2e56:	bb 27       	eor	r27, r27
    2e58:	66 27       	eor	r22, r22
    2e5a:	77 27       	eor	r23, r23
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	97 f9       	bld	r25, 7
    2e60:	08 95       	ret

00002e62 <__gesf2>:
    2e62:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__fp_cmp>
    2e66:	08 f4       	brcc	.+2      	; 0x2e6a <__gesf2+0x8>
    2e68:	8f ef       	ldi	r24, 0xFF	; 255
    2e6a:	08 95       	ret

00002e6c <__mulsf3>:
    2e6c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__mulsf3x>
    2e70:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__fp_round>
    2e74:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fp_pscA>
    2e78:	38 f0       	brcs	.+14     	; 0x2e88 <__mulsf3+0x1c>
    2e7a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fp_pscB>
    2e7e:	20 f0       	brcs	.+8      	; 0x2e88 <__mulsf3+0x1c>
    2e80:	95 23       	and	r25, r21
    2e82:	11 f0       	breq	.+4      	; 0x2e88 <__mulsf3+0x1c>
    2e84:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__fp_inf>
    2e88:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__fp_nan>
    2e8c:	11 24       	eor	r1, r1
    2e8e:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__fp_szero>

00002e92 <__mulsf3x>:
    2e92:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__fp_split3>
    2e96:	70 f3       	brcs	.-36     	; 0x2e74 <__mulsf3+0x8>

00002e98 <__mulsf3_pse>:
    2e98:	95 9f       	mul	r25, r21
    2e9a:	c1 f3       	breq	.-16     	; 0x2e8c <__mulsf3+0x20>
    2e9c:	95 0f       	add	r25, r21
    2e9e:	50 e0       	ldi	r21, 0x00	; 0
    2ea0:	55 1f       	adc	r21, r21
    2ea2:	62 9f       	mul	r22, r18
    2ea4:	f0 01       	movw	r30, r0
    2ea6:	72 9f       	mul	r23, r18
    2ea8:	bb 27       	eor	r27, r27
    2eaa:	f0 0d       	add	r31, r0
    2eac:	b1 1d       	adc	r27, r1
    2eae:	63 9f       	mul	r22, r19
    2eb0:	aa 27       	eor	r26, r26
    2eb2:	f0 0d       	add	r31, r0
    2eb4:	b1 1d       	adc	r27, r1
    2eb6:	aa 1f       	adc	r26, r26
    2eb8:	64 9f       	mul	r22, r20
    2eba:	66 27       	eor	r22, r22
    2ebc:	b0 0d       	add	r27, r0
    2ebe:	a1 1d       	adc	r26, r1
    2ec0:	66 1f       	adc	r22, r22
    2ec2:	82 9f       	mul	r24, r18
    2ec4:	22 27       	eor	r18, r18
    2ec6:	b0 0d       	add	r27, r0
    2ec8:	a1 1d       	adc	r26, r1
    2eca:	62 1f       	adc	r22, r18
    2ecc:	73 9f       	mul	r23, r19
    2ece:	b0 0d       	add	r27, r0
    2ed0:	a1 1d       	adc	r26, r1
    2ed2:	62 1f       	adc	r22, r18
    2ed4:	83 9f       	mul	r24, r19
    2ed6:	a0 0d       	add	r26, r0
    2ed8:	61 1d       	adc	r22, r1
    2eda:	22 1f       	adc	r18, r18
    2edc:	74 9f       	mul	r23, r20
    2ede:	33 27       	eor	r19, r19
    2ee0:	a0 0d       	add	r26, r0
    2ee2:	61 1d       	adc	r22, r1
    2ee4:	23 1f       	adc	r18, r19
    2ee6:	84 9f       	mul	r24, r20
    2ee8:	60 0d       	add	r22, r0
    2eea:	21 1d       	adc	r18, r1
    2eec:	82 2f       	mov	r24, r18
    2eee:	76 2f       	mov	r23, r22
    2ef0:	6a 2f       	mov	r22, r26
    2ef2:	11 24       	eor	r1, r1
    2ef4:	9f 57       	subi	r25, 0x7F	; 127
    2ef6:	50 40       	sbci	r21, 0x00	; 0
    2ef8:	9a f0       	brmi	.+38     	; 0x2f20 <__mulsf3_pse+0x88>
    2efa:	f1 f0       	breq	.+60     	; 0x2f38 <__mulsf3_pse+0xa0>
    2efc:	88 23       	and	r24, r24
    2efe:	4a f0       	brmi	.+18     	; 0x2f12 <__mulsf3_pse+0x7a>
    2f00:	ee 0f       	add	r30, r30
    2f02:	ff 1f       	adc	r31, r31
    2f04:	bb 1f       	adc	r27, r27
    2f06:	66 1f       	adc	r22, r22
    2f08:	77 1f       	adc	r23, r23
    2f0a:	88 1f       	adc	r24, r24
    2f0c:	91 50       	subi	r25, 0x01	; 1
    2f0e:	50 40       	sbci	r21, 0x00	; 0
    2f10:	a9 f7       	brne	.-22     	; 0x2efc <__mulsf3_pse+0x64>
    2f12:	9e 3f       	cpi	r25, 0xFE	; 254
    2f14:	51 05       	cpc	r21, r1
    2f16:	80 f0       	brcs	.+32     	; 0x2f38 <__mulsf3_pse+0xa0>
    2f18:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__fp_inf>
    2f1c:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__fp_szero>
    2f20:	5f 3f       	cpi	r21, 0xFF	; 255
    2f22:	e4 f3       	brlt	.-8      	; 0x2f1c <__mulsf3_pse+0x84>
    2f24:	98 3e       	cpi	r25, 0xE8	; 232
    2f26:	d4 f3       	brlt	.-12     	; 0x2f1c <__mulsf3_pse+0x84>
    2f28:	86 95       	lsr	r24
    2f2a:	77 95       	ror	r23
    2f2c:	67 95       	ror	r22
    2f2e:	b7 95       	ror	r27
    2f30:	f7 95       	ror	r31
    2f32:	e7 95       	ror	r30
    2f34:	9f 5f       	subi	r25, 0xFF	; 255
    2f36:	c1 f7       	brne	.-16     	; 0x2f28 <__mulsf3_pse+0x90>
    2f38:	fe 2b       	or	r31, r30
    2f3a:	88 0f       	add	r24, r24
    2f3c:	91 1d       	adc	r25, r1
    2f3e:	96 95       	lsr	r25
    2f40:	87 95       	ror	r24
    2f42:	97 f9       	bld	r25, 7
    2f44:	08 95       	ret

00002f46 <pow>:
    2f46:	fa 01       	movw	r30, r20
    2f48:	ee 0f       	add	r30, r30
    2f4a:	ff 1f       	adc	r31, r31
    2f4c:	30 96       	adiw	r30, 0x00	; 0
    2f4e:	21 05       	cpc	r18, r1
    2f50:	31 05       	cpc	r19, r1
    2f52:	a1 f1       	breq	.+104    	; 0x2fbc <pow+0x76>
    2f54:	61 15       	cp	r22, r1
    2f56:	71 05       	cpc	r23, r1
    2f58:	61 f4       	brne	.+24     	; 0x2f72 <pow+0x2c>
    2f5a:	80 38       	cpi	r24, 0x80	; 128
    2f5c:	bf e3       	ldi	r27, 0x3F	; 63
    2f5e:	9b 07       	cpc	r25, r27
    2f60:	49 f1       	breq	.+82     	; 0x2fb4 <pow+0x6e>
    2f62:	68 94       	set
    2f64:	90 38       	cpi	r25, 0x80	; 128
    2f66:	81 05       	cpc	r24, r1
    2f68:	61 f0       	breq	.+24     	; 0x2f82 <pow+0x3c>
    2f6a:	80 38       	cpi	r24, 0x80	; 128
    2f6c:	bf ef       	ldi	r27, 0xFF	; 255
    2f6e:	9b 07       	cpc	r25, r27
    2f70:	41 f0       	breq	.+16     	; 0x2f82 <pow+0x3c>
    2f72:	99 23       	and	r25, r25
    2f74:	4a f5       	brpl	.+82     	; 0x2fc8 <pow+0x82>
    2f76:	ff 3f       	cpi	r31, 0xFF	; 255
    2f78:	e1 05       	cpc	r30, r1
    2f7a:	31 05       	cpc	r19, r1
    2f7c:	21 05       	cpc	r18, r1
    2f7e:	19 f1       	breq	.+70     	; 0x2fc6 <pow+0x80>
    2f80:	e8 94       	clt
    2f82:	08 94       	sec
    2f84:	e7 95       	ror	r30
    2f86:	d9 01       	movw	r26, r18
    2f88:	aa 23       	and	r26, r26
    2f8a:	29 f4       	brne	.+10     	; 0x2f96 <pow+0x50>
    2f8c:	ab 2f       	mov	r26, r27
    2f8e:	be 2f       	mov	r27, r30
    2f90:	f8 5f       	subi	r31, 0xF8	; 248
    2f92:	d0 f3       	brcs	.-12     	; 0x2f88 <pow+0x42>
    2f94:	10 c0       	rjmp	.+32     	; 0x2fb6 <pow+0x70>
    2f96:	ff 5f       	subi	r31, 0xFF	; 255
    2f98:	70 f4       	brcc	.+28     	; 0x2fb6 <pow+0x70>
    2f9a:	a6 95       	lsr	r26
    2f9c:	e0 f7       	brcc	.-8      	; 0x2f96 <pow+0x50>
    2f9e:	f7 39       	cpi	r31, 0x97	; 151
    2fa0:	50 f0       	brcs	.+20     	; 0x2fb6 <pow+0x70>
    2fa2:	19 f0       	breq	.+6      	; 0x2faa <pow+0x64>
    2fa4:	ff 3a       	cpi	r31, 0xAF	; 175
    2fa6:	38 f4       	brcc	.+14     	; 0x2fb6 <pow+0x70>
    2fa8:	9f 77       	andi	r25, 0x7F	; 127
    2faa:	9f 93       	push	r25
    2fac:	0d d0       	rcall	.+26     	; 0x2fc8 <pow+0x82>
    2fae:	0f 90       	pop	r0
    2fb0:	07 fc       	sbrc	r0, 7
    2fb2:	90 58       	subi	r25, 0x80	; 128
    2fb4:	08 95       	ret
    2fb6:	46 f0       	brts	.+16     	; 0x2fc8 <pow+0x82>
    2fb8:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__fp_nan>
    2fbc:	60 e0       	ldi	r22, 0x00	; 0
    2fbe:	70 e0       	ldi	r23, 0x00	; 0
    2fc0:	80 e8       	ldi	r24, 0x80	; 128
    2fc2:	9f e3       	ldi	r25, 0x3F	; 63
    2fc4:	08 95       	ret
    2fc6:	4f e7       	ldi	r20, 0x7F	; 127
    2fc8:	9f 77       	andi	r25, 0x7F	; 127
    2fca:	5f 93       	push	r21
    2fcc:	4f 93       	push	r20
    2fce:	3f 93       	push	r19
    2fd0:	2f 93       	push	r18
    2fd2:	0e 94 9e 18 	call	0x313c	; 0x313c <log>
    2fd6:	2f 91       	pop	r18
    2fd8:	3f 91       	pop	r19
    2fda:	4f 91       	pop	r20
    2fdc:	5f 91       	pop	r21
    2fde:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <__mulsf3>
    2fe2:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <exp>
    2fe6:	29 f4       	brne	.+10     	; 0x2ff2 <pow+0xac>
    2fe8:	16 f0       	brts	.+4      	; 0x2fee <pow+0xa8>
    2fea:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__fp_inf>
    2fee:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__fp_zero>
    2ff2:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__fp_nan>

00002ff6 <exp>:
    2ff6:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__fp_splitA>
    2ffa:	a8 f3       	brcs	.-22     	; 0x2fe6 <pow+0xa0>
    2ffc:	96 38       	cpi	r25, 0x86	; 134
    2ffe:	a0 f7       	brcc	.-24     	; 0x2fe8 <pow+0xa2>
    3000:	07 f8       	bld	r0, 7
    3002:	0f 92       	push	r0
    3004:	e8 94       	clt
    3006:	2b e3       	ldi	r18, 0x3B	; 59
    3008:	3a ea       	ldi	r19, 0xAA	; 170
    300a:	48 eb       	ldi	r20, 0xB8	; 184
    300c:	5f e7       	ldi	r21, 0x7F	; 127
    300e:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <__mulsf3_pse>
    3012:	0f 92       	push	r0
    3014:	0f 92       	push	r0
    3016:	0f 92       	push	r0
    3018:	4d b7       	in	r20, 0x3d	; 61
    301a:	5e b7       	in	r21, 0x3e	; 62
    301c:	0f 92       	push	r0
    301e:	0e 94 e6 18 	call	0x31cc	; 0x31cc <modf>
    3022:	e8 e6       	ldi	r30, 0x68	; 104
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	0e 94 2d 18 	call	0x305a	; 0x305a <__fp_powser>
    302a:	4f 91       	pop	r20
    302c:	5f 91       	pop	r21
    302e:	ef 91       	pop	r30
    3030:	ff 91       	pop	r31
    3032:	e5 95       	asr	r30
    3034:	ee 1f       	adc	r30, r30
    3036:	ff 1f       	adc	r31, r31
    3038:	49 f0       	breq	.+18     	; 0x304c <exp+0x56>
    303a:	fe 57       	subi	r31, 0x7E	; 126
    303c:	e0 68       	ori	r30, 0x80	; 128
    303e:	44 27       	eor	r20, r20
    3040:	ee 0f       	add	r30, r30
    3042:	44 1f       	adc	r20, r20
    3044:	fa 95       	dec	r31
    3046:	e1 f7       	brne	.-8      	; 0x3040 <exp+0x4a>
    3048:	41 95       	neg	r20
    304a:	55 0b       	sbc	r21, r21
    304c:	0e 94 60 18 	call	0x30c0	; 0x30c0 <ldexp>
    3050:	0f 90       	pop	r0
    3052:	07 fe       	sbrs	r0, 7
    3054:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <inverse>
    3058:	08 95       	ret

0000305a <__fp_powser>:
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	1f 93       	push	r17
    3060:	0f 93       	push	r16
    3062:	ff 92       	push	r15
    3064:	ef 92       	push	r14
    3066:	df 92       	push	r13
    3068:	7b 01       	movw	r14, r22
    306a:	8c 01       	movw	r16, r24
    306c:	68 94       	set
    306e:	06 c0       	rjmp	.+12     	; 0x307c <__fp_powser+0x22>
    3070:	da 2e       	mov	r13, r26
    3072:	ef 01       	movw	r28, r30
    3074:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__mulsf3x>
    3078:	fe 01       	movw	r30, r28
    307a:	e8 94       	clt
    307c:	a5 91       	lpm	r26, Z+
    307e:	25 91       	lpm	r18, Z+
    3080:	35 91       	lpm	r19, Z+
    3082:	45 91       	lpm	r20, Z+
    3084:	55 91       	lpm	r21, Z+
    3086:	a6 f3       	brts	.-24     	; 0x3070 <__fp_powser+0x16>
    3088:	ef 01       	movw	r28, r30
    308a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3x>
    308e:	fe 01       	movw	r30, r28
    3090:	97 01       	movw	r18, r14
    3092:	a8 01       	movw	r20, r16
    3094:	da 94       	dec	r13
    3096:	69 f7       	brne	.-38     	; 0x3072 <__fp_powser+0x18>
    3098:	df 90       	pop	r13
    309a:	ef 90       	pop	r14
    309c:	ff 90       	pop	r15
    309e:	0f 91       	pop	r16
    30a0:	1f 91       	pop	r17
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	08 95       	ret

000030a8 <inverse>:
    30a8:	9b 01       	movw	r18, r22
    30aa:	ac 01       	movw	r20, r24
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	70 e0       	ldi	r23, 0x00	; 0
    30b0:	80 e8       	ldi	r24, 0x80	; 128
    30b2:	9f e3       	ldi	r25, 0x3F	; 63
    30b4:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__divsf3>
    30b8:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__fp_inf>
    30bc:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__fp_mpack>

000030c0 <ldexp>:
    30c0:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__fp_splitA>
    30c4:	d8 f3       	brcs	.-10     	; 0x30bc <inverse+0x14>
    30c6:	99 23       	and	r25, r25
    30c8:	c9 f3       	breq	.-14     	; 0x30bc <inverse+0x14>
    30ca:	94 0f       	add	r25, r20
    30cc:	51 1d       	adc	r21, r1
    30ce:	a3 f3       	brvs	.-24     	; 0x30b8 <inverse+0x10>
    30d0:	91 50       	subi	r25, 0x01	; 1
    30d2:	50 40       	sbci	r21, 0x00	; 0
    30d4:	94 f0       	brlt	.+36     	; 0x30fa <ldexp+0x3a>
    30d6:	59 f0       	breq	.+22     	; 0x30ee <ldexp+0x2e>
    30d8:	88 23       	and	r24, r24
    30da:	32 f0       	brmi	.+12     	; 0x30e8 <ldexp+0x28>
    30dc:	66 0f       	add	r22, r22
    30de:	77 1f       	adc	r23, r23
    30e0:	88 1f       	adc	r24, r24
    30e2:	91 50       	subi	r25, 0x01	; 1
    30e4:	50 40       	sbci	r21, 0x00	; 0
    30e6:	c1 f7       	brne	.-16     	; 0x30d8 <ldexp+0x18>
    30e8:	9e 3f       	cpi	r25, 0xFE	; 254
    30ea:	51 05       	cpc	r21, r1
    30ec:	2c f7       	brge	.-54     	; 0x30b8 <inverse+0x10>
    30ee:	88 0f       	add	r24, r24
    30f0:	91 1d       	adc	r25, r1
    30f2:	96 95       	lsr	r25
    30f4:	87 95       	ror	r24
    30f6:	97 f9       	bld	r25, 7
    30f8:	08 95       	ret
    30fa:	5f 3f       	cpi	r21, 0xFF	; 255
    30fc:	ac f0       	brlt	.+42     	; 0x3128 <ldexp+0x68>
    30fe:	98 3e       	cpi	r25, 0xE8	; 232
    3100:	9c f0       	brlt	.+38     	; 0x3128 <ldexp+0x68>
    3102:	bb 27       	eor	r27, r27
    3104:	86 95       	lsr	r24
    3106:	77 95       	ror	r23
    3108:	67 95       	ror	r22
    310a:	b7 95       	ror	r27
    310c:	08 f4       	brcc	.+2      	; 0x3110 <ldexp+0x50>
    310e:	b1 60       	ori	r27, 0x01	; 1
    3110:	93 95       	inc	r25
    3112:	c1 f7       	brne	.-16     	; 0x3104 <ldexp+0x44>
    3114:	bb 0f       	add	r27, r27
    3116:	58 f7       	brcc	.-42     	; 0x30ee <ldexp+0x2e>
    3118:	11 f4       	brne	.+4      	; 0x311e <ldexp+0x5e>
    311a:	60 ff       	sbrs	r22, 0
    311c:	e8 cf       	rjmp	.-48     	; 0x30ee <ldexp+0x2e>
    311e:	6f 5f       	subi	r22, 0xFF	; 255
    3120:	7f 4f       	sbci	r23, 0xFF	; 255
    3122:	8f 4f       	sbci	r24, 0xFF	; 255
    3124:	9f 4f       	sbci	r25, 0xFF	; 255
    3126:	e3 cf       	rjmp	.-58     	; 0x30ee <ldexp+0x2e>
    3128:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__fp_szero>
    312c:	16 f0       	brts	.+4      	; 0x3132 <ldexp+0x72>
    312e:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__fp_mpack>
    3132:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__fp_nan>
    3136:	68 94       	set
    3138:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__fp_inf>

0000313c <log>:
    313c:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__fp_splitA>
    3140:	a8 f3       	brcs	.-22     	; 0x312c <ldexp+0x6c>
    3142:	99 23       	and	r25, r25
    3144:	c1 f3       	breq	.-16     	; 0x3136 <ldexp+0x76>
    3146:	ae f3       	brts	.-22     	; 0x3132 <ldexp+0x72>
    3148:	df 93       	push	r29
    314a:	cf 93       	push	r28
    314c:	1f 93       	push	r17
    314e:	0f 93       	push	r16
    3150:	ff 92       	push	r15
    3152:	c9 2f       	mov	r28, r25
    3154:	dd 27       	eor	r29, r29
    3156:	88 23       	and	r24, r24
    3158:	2a f0       	brmi	.+10     	; 0x3164 <log+0x28>
    315a:	21 97       	sbiw	r28, 0x01	; 1
    315c:	66 0f       	add	r22, r22
    315e:	77 1f       	adc	r23, r23
    3160:	88 1f       	adc	r24, r24
    3162:	da f7       	brpl	.-10     	; 0x315a <log+0x1e>
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f eb       	ldi	r21, 0xBF	; 191
    316c:	9f e3       	ldi	r25, 0x3F	; 63
    316e:	88 39       	cpi	r24, 0x98	; 152
    3170:	20 f0       	brcs	.+8      	; 0x317a <log+0x3e>
    3172:	80 3e       	cpi	r24, 0xE0	; 224
    3174:	38 f0       	brcs	.+14     	; 0x3184 <log+0x48>
    3176:	21 96       	adiw	r28, 0x01	; 1
    3178:	8f 77       	andi	r24, 0x7F	; 127
    317a:	0e 94 66 15 	call	0x2acc	; 0x2acc <__addsf3>
    317e:	e0 e9       	ldi	r30, 0x90	; 144
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	04 c0       	rjmp	.+8      	; 0x318c <log+0x50>
    3184:	0e 94 66 15 	call	0x2acc	; 0x2acc <__addsf3>
    3188:	ed eb       	ldi	r30, 0xBD	; 189
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	0e 94 2d 18 	call	0x305a	; 0x305a <__fp_powser>
    3190:	8b 01       	movw	r16, r22
    3192:	be 01       	movw	r22, r28
    3194:	ec 01       	movw	r28, r24
    3196:	fb 2e       	mov	r15, r27
    3198:	6f 57       	subi	r22, 0x7F	; 127
    319a:	71 09       	sbc	r23, r1
    319c:	75 95       	asr	r23
    319e:	77 1f       	adc	r23, r23
    31a0:	88 0b       	sbc	r24, r24
    31a2:	99 0b       	sbc	r25, r25
    31a4:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__floatsisf>
    31a8:	28 e1       	ldi	r18, 0x18	; 24
    31aa:	32 e7       	ldi	r19, 0x72	; 114
    31ac:	41 e3       	ldi	r20, 0x31	; 49
    31ae:	5f e3       	ldi	r21, 0x3F	; 63
    31b0:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__mulsf3x>
    31b4:	af 2d       	mov	r26, r15
    31b6:	98 01       	movw	r18, r16
    31b8:	ae 01       	movw	r20, r28
    31ba:	ff 90       	pop	r15
    31bc:	0f 91       	pop	r16
    31be:	1f 91       	pop	r17
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3x>
    31c8:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__fp_round>

000031cc <modf>:
    31cc:	fa 01       	movw	r30, r20
    31ce:	dc 01       	movw	r26, r24
    31d0:	aa 0f       	add	r26, r26
    31d2:	bb 1f       	adc	r27, r27
    31d4:	9b 01       	movw	r18, r22
    31d6:	ac 01       	movw	r20, r24
    31d8:	bf 57       	subi	r27, 0x7F	; 127
    31da:	28 f4       	brcc	.+10     	; 0x31e6 <modf+0x1a>
    31dc:	22 27       	eor	r18, r18
    31de:	33 27       	eor	r19, r19
    31e0:	44 27       	eor	r20, r20
    31e2:	50 78       	andi	r21, 0x80	; 128
    31e4:	20 c0       	rjmp	.+64     	; 0x3226 <modf+0x5a>
    31e6:	b7 51       	subi	r27, 0x17	; 23
    31e8:	90 f4       	brcc	.+36     	; 0x320e <modf+0x42>
    31ea:	ab 2f       	mov	r26, r27
    31ec:	00 24       	eor	r0, r0
    31ee:	46 95       	lsr	r20
    31f0:	37 95       	ror	r19
    31f2:	27 95       	ror	r18
    31f4:	01 1c       	adc	r0, r1
    31f6:	a3 95       	inc	r26
    31f8:	d2 f3       	brmi	.-12     	; 0x31ee <modf+0x22>
    31fa:	00 20       	and	r0, r0
    31fc:	71 f0       	breq	.+28     	; 0x321a <modf+0x4e>
    31fe:	22 0f       	add	r18, r18
    3200:	33 1f       	adc	r19, r19
    3202:	44 1f       	adc	r20, r20
    3204:	b3 95       	inc	r27
    3206:	da f3       	brmi	.-10     	; 0x31fe <modf+0x32>
    3208:	0e d0       	rcall	.+28     	; 0x3226 <modf+0x5a>
    320a:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__subsf3>
    320e:	61 30       	cpi	r22, 0x01	; 1
    3210:	71 05       	cpc	r23, r1
    3212:	a0 e8       	ldi	r26, 0x80	; 128
    3214:	8a 07       	cpc	r24, r26
    3216:	b9 46       	sbci	r27, 0x69	; 105
    3218:	30 f4       	brcc	.+12     	; 0x3226 <modf+0x5a>
    321a:	9b 01       	movw	r18, r22
    321c:	ac 01       	movw	r20, r24
    321e:	66 27       	eor	r22, r22
    3220:	77 27       	eor	r23, r23
    3222:	88 27       	eor	r24, r24
    3224:	90 78       	andi	r25, 0x80	; 128
    3226:	30 96       	adiw	r30, 0x00	; 0
    3228:	21 f0       	breq	.+8      	; 0x3232 <modf+0x66>
    322a:	20 83       	st	Z, r18
    322c:	31 83       	std	Z+1, r19	; 0x01
    322e:	42 83       	std	Z+2, r20	; 0x02
    3230:	53 83       	std	Z+3, r21	; 0x03
    3232:	08 95       	ret

00003234 <__fp_mpack>:
    3234:	9f 3f       	cpi	r25, 0xFF	; 255
    3236:	31 f0       	breq	.+12     	; 0x3244 <__fp_mpack_finite+0xc>

00003238 <__fp_mpack_finite>:
    3238:	91 50       	subi	r25, 0x01	; 1
    323a:	20 f4       	brcc	.+8      	; 0x3244 <__fp_mpack_finite+0xc>
    323c:	87 95       	ror	r24
    323e:	77 95       	ror	r23
    3240:	67 95       	ror	r22
    3242:	b7 95       	ror	r27
    3244:	88 0f       	add	r24, r24
    3246:	91 1d       	adc	r25, r1
    3248:	96 95       	lsr	r25
    324a:	87 95       	ror	r24
    324c:	97 f9       	bld	r25, 7
    324e:	08 95       	ret

00003250 <__udivmodsi4>:
    3250:	a1 e2       	ldi	r26, 0x21	; 33
    3252:	1a 2e       	mov	r1, r26
    3254:	aa 1b       	sub	r26, r26
    3256:	bb 1b       	sub	r27, r27
    3258:	fd 01       	movw	r30, r26
    325a:	0d c0       	rjmp	.+26     	; 0x3276 <__udivmodsi4_ep>

0000325c <__udivmodsi4_loop>:
    325c:	aa 1f       	adc	r26, r26
    325e:	bb 1f       	adc	r27, r27
    3260:	ee 1f       	adc	r30, r30
    3262:	ff 1f       	adc	r31, r31
    3264:	a2 17       	cp	r26, r18
    3266:	b3 07       	cpc	r27, r19
    3268:	e4 07       	cpc	r30, r20
    326a:	f5 07       	cpc	r31, r21
    326c:	20 f0       	brcs	.+8      	; 0x3276 <__udivmodsi4_ep>
    326e:	a2 1b       	sub	r26, r18
    3270:	b3 0b       	sbc	r27, r19
    3272:	e4 0b       	sbc	r30, r20
    3274:	f5 0b       	sbc	r31, r21

00003276 <__udivmodsi4_ep>:
    3276:	66 1f       	adc	r22, r22
    3278:	77 1f       	adc	r23, r23
    327a:	88 1f       	adc	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	1a 94       	dec	r1
    3280:	69 f7       	brne	.-38     	; 0x325c <__udivmodsi4_loop>
    3282:	60 95       	com	r22
    3284:	70 95       	com	r23
    3286:	80 95       	com	r24
    3288:	90 95       	com	r25
    328a:	9b 01       	movw	r18, r22
    328c:	ac 01       	movw	r20, r24
    328e:	bd 01       	movw	r22, r26
    3290:	cf 01       	movw	r24, r30
    3292:	08 95       	ret

00003294 <__tablejump2__>:
    3294:	ee 0f       	add	r30, r30
    3296:	ff 1f       	adc	r31, r31
    3298:	05 90       	lpm	r0, Z+
    329a:	f4 91       	lpm	r31, Z
    329c:	e0 2d       	mov	r30, r0
    329e:	09 94       	ijmp

000032a0 <sprintf>:
    32a0:	ae e0       	ldi	r26, 0x0E	; 14
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e6 e5       	ldi	r30, 0x56	; 86
    32a6:	f9 e1       	ldi	r31, 0x19	; 25
    32a8:	0c 94 ff 1b 	jmp	0x37fe	; 0x37fe <__prologue_saves__+0x1c>
    32ac:	0d 89       	ldd	r16, Y+21	; 0x15
    32ae:	1e 89       	ldd	r17, Y+22	; 0x16
    32b0:	86 e0       	ldi	r24, 0x06	; 6
    32b2:	8c 83       	std	Y+4, r24	; 0x04
    32b4:	1a 83       	std	Y+2, r17	; 0x02
    32b6:	09 83       	std	Y+1, r16	; 0x01
    32b8:	8f ef       	ldi	r24, 0xFF	; 255
    32ba:	9f e7       	ldi	r25, 0x7F	; 127
    32bc:	9e 83       	std	Y+6, r25	; 0x06
    32be:	8d 83       	std	Y+5, r24	; 0x05
    32c0:	ae 01       	movw	r20, r28
    32c2:	47 5e       	subi	r20, 0xE7	; 231
    32c4:	5f 4f       	sbci	r21, 0xFF	; 255
    32c6:	6f 89       	ldd	r22, Y+23	; 0x17
    32c8:	78 8d       	ldd	r23, Y+24	; 0x18
    32ca:	ce 01       	movw	r24, r28
    32cc:	01 96       	adiw	r24, 0x01	; 1
    32ce:	0e 94 73 19 	call	0x32e6	; 0x32e6 <vfprintf>
    32d2:	2f 81       	ldd	r18, Y+7	; 0x07
    32d4:	38 85       	ldd	r19, Y+8	; 0x08
    32d6:	02 0f       	add	r16, r18
    32d8:	13 1f       	adc	r17, r19
    32da:	f8 01       	movw	r30, r16
    32dc:	10 82       	st	Z, r1
    32de:	2e 96       	adiw	r28, 0x0e	; 14
    32e0:	e4 e0       	ldi	r30, 0x04	; 4
    32e2:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__epilogue_restores__+0x1c>

000032e6 <vfprintf>:
    32e6:	ab e0       	ldi	r26, 0x0B	; 11
    32e8:	b0 e0       	ldi	r27, 0x00	; 0
    32ea:	e9 e7       	ldi	r30, 0x79	; 121
    32ec:	f9 e1       	ldi	r31, 0x19	; 25
    32ee:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__prologue_saves__>
    32f2:	7c 01       	movw	r14, r24
    32f4:	3b 01       	movw	r6, r22
    32f6:	8a 01       	movw	r16, r20
    32f8:	fc 01       	movw	r30, r24
    32fa:	17 82       	std	Z+7, r1	; 0x07
    32fc:	16 82       	std	Z+6, r1	; 0x06
    32fe:	83 81       	ldd	r24, Z+3	; 0x03
    3300:	81 ff       	sbrs	r24, 1
    3302:	c8 c1       	rjmp	.+912    	; 0x3694 <vfprintf+0x3ae>
    3304:	ce 01       	movw	r24, r28
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	5c 01       	movw	r10, r24
    330a:	f7 01       	movw	r30, r14
    330c:	93 81       	ldd	r25, Z+3	; 0x03
    330e:	f3 01       	movw	r30, r6
    3310:	93 fd       	sbrc	r25, 3
    3312:	85 91       	lpm	r24, Z+
    3314:	93 ff       	sbrs	r25, 3
    3316:	81 91       	ld	r24, Z+
    3318:	3f 01       	movw	r6, r30
    331a:	88 23       	and	r24, r24
    331c:	09 f4       	brne	.+2      	; 0x3320 <vfprintf+0x3a>
    331e:	53 c1       	rjmp	.+678    	; 0x35c6 <vfprintf+0x2e0>
    3320:	85 32       	cpi	r24, 0x25	; 37
    3322:	39 f4       	brne	.+14     	; 0x3332 <vfprintf+0x4c>
    3324:	93 fd       	sbrc	r25, 3
    3326:	85 91       	lpm	r24, Z+
    3328:	93 ff       	sbrs	r25, 3
    332a:	81 91       	ld	r24, Z+
    332c:	3f 01       	movw	r6, r30
    332e:	85 32       	cpi	r24, 0x25	; 37
    3330:	29 f4       	brne	.+10     	; 0x333c <vfprintf+0x56>
    3332:	b7 01       	movw	r22, r14
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    333a:	e7 cf       	rjmp	.-50     	; 0x330a <vfprintf+0x24>
    333c:	91 2c       	mov	r9, r1
    333e:	21 2c       	mov	r2, r1
    3340:	31 2c       	mov	r3, r1
    3342:	ff e1       	ldi	r31, 0x1F	; 31
    3344:	f3 15       	cp	r31, r3
    3346:	38 f0       	brcs	.+14     	; 0x3356 <vfprintf+0x70>
    3348:	8b 32       	cpi	r24, 0x2B	; 43
    334a:	11 f1       	breq	.+68     	; 0x3390 <vfprintf+0xaa>
    334c:	90 f4       	brcc	.+36     	; 0x3372 <vfprintf+0x8c>
    334e:	80 32       	cpi	r24, 0x20	; 32
    3350:	09 f1       	breq	.+66     	; 0x3394 <vfprintf+0xae>
    3352:	83 32       	cpi	r24, 0x23	; 35
    3354:	29 f1       	breq	.+74     	; 0x33a0 <vfprintf+0xba>
    3356:	37 fc       	sbrc	r3, 7
    3358:	3c c0       	rjmp	.+120    	; 0x33d2 <vfprintf+0xec>
    335a:	20 ed       	ldi	r18, 0xD0	; 208
    335c:	28 0f       	add	r18, r24
    335e:	2a 30       	cpi	r18, 0x0A	; 10
    3360:	50 f5       	brcc	.+84     	; 0x33b6 <vfprintf+0xd0>
    3362:	36 fe       	sbrs	r3, 6
    3364:	20 c0       	rjmp	.+64     	; 0x33a6 <vfprintf+0xc0>
    3366:	8a e0       	ldi	r24, 0x0A	; 10
    3368:	98 9e       	mul	r9, r24
    336a:	20 0d       	add	r18, r0
    336c:	11 24       	eor	r1, r1
    336e:	92 2e       	mov	r9, r18
    3370:	06 c0       	rjmp	.+12     	; 0x337e <vfprintf+0x98>
    3372:	8d 32       	cpi	r24, 0x2D	; 45
    3374:	91 f0       	breq	.+36     	; 0x339a <vfprintf+0xb4>
    3376:	80 33       	cpi	r24, 0x30	; 48
    3378:	71 f7       	brne	.-36     	; 0x3356 <vfprintf+0x70>
    337a:	68 94       	set
    337c:	30 f8       	bld	r3, 0
    337e:	f3 01       	movw	r30, r6
    3380:	93 fd       	sbrc	r25, 3
    3382:	85 91       	lpm	r24, Z+
    3384:	93 ff       	sbrs	r25, 3
    3386:	81 91       	ld	r24, Z+
    3388:	3f 01       	movw	r6, r30
    338a:	81 11       	cpse	r24, r1
    338c:	da cf       	rjmp	.-76     	; 0x3342 <vfprintf+0x5c>
    338e:	21 c0       	rjmp	.+66     	; 0x33d2 <vfprintf+0xec>
    3390:	68 94       	set
    3392:	31 f8       	bld	r3, 1
    3394:	68 94       	set
    3396:	32 f8       	bld	r3, 2
    3398:	f2 cf       	rjmp	.-28     	; 0x337e <vfprintf+0x98>
    339a:	68 94       	set
    339c:	33 f8       	bld	r3, 3
    339e:	ef cf       	rjmp	.-34     	; 0x337e <vfprintf+0x98>
    33a0:	68 94       	set
    33a2:	34 f8       	bld	r3, 4
    33a4:	ec cf       	rjmp	.-40     	; 0x337e <vfprintf+0x98>
    33a6:	ea e0       	ldi	r30, 0x0A	; 10
    33a8:	2e 9e       	mul	r2, r30
    33aa:	20 0d       	add	r18, r0
    33ac:	11 24       	eor	r1, r1
    33ae:	22 2e       	mov	r2, r18
    33b0:	68 94       	set
    33b2:	35 f8       	bld	r3, 5
    33b4:	e4 cf       	rjmp	.-56     	; 0x337e <vfprintf+0x98>
    33b6:	8e 32       	cpi	r24, 0x2E	; 46
    33b8:	29 f4       	brne	.+10     	; 0x33c4 <vfprintf+0xde>
    33ba:	36 fc       	sbrc	r3, 6
    33bc:	04 c1       	rjmp	.+520    	; 0x35c6 <vfprintf+0x2e0>
    33be:	68 94       	set
    33c0:	36 f8       	bld	r3, 6
    33c2:	dd cf       	rjmp	.-70     	; 0x337e <vfprintf+0x98>
    33c4:	8c 36       	cpi	r24, 0x6C	; 108
    33c6:	19 f4       	brne	.+6      	; 0x33ce <vfprintf+0xe8>
    33c8:	68 94       	set
    33ca:	37 f8       	bld	r3, 7
    33cc:	d8 cf       	rjmp	.-80     	; 0x337e <vfprintf+0x98>
    33ce:	88 36       	cpi	r24, 0x68	; 104
    33d0:	b1 f2       	breq	.-84     	; 0x337e <vfprintf+0x98>
    33d2:	98 2f       	mov	r25, r24
    33d4:	9f 7d       	andi	r25, 0xDF	; 223
    33d6:	95 54       	subi	r25, 0x45	; 69
    33d8:	93 30       	cpi	r25, 0x03	; 3
    33da:	e0 f0       	brcs	.+56     	; 0x3414 <vfprintf+0x12e>
    33dc:	83 36       	cpi	r24, 0x63	; 99
    33de:	a1 f1       	breq	.+104    	; 0x3448 <vfprintf+0x162>
    33e0:	83 37       	cpi	r24, 0x73	; 115
    33e2:	c1 f1       	breq	.+112    	; 0x3454 <vfprintf+0x16e>
    33e4:	83 35       	cpi	r24, 0x53	; 83
    33e6:	09 f0       	breq	.+2      	; 0x33ea <vfprintf+0x104>
    33e8:	63 c0       	rjmp	.+198    	; 0x34b0 <vfprintf+0x1ca>
    33ea:	28 01       	movw	r4, r16
    33ec:	f2 e0       	ldi	r31, 0x02	; 2
    33ee:	4f 0e       	add	r4, r31
    33f0:	51 1c       	adc	r5, r1
    33f2:	f8 01       	movw	r30, r16
    33f4:	c0 80       	ld	r12, Z
    33f6:	d1 80       	ldd	r13, Z+1	; 0x01
    33f8:	69 2d       	mov	r22, r9
    33fa:	70 e0       	ldi	r23, 0x00	; 0
    33fc:	36 fc       	sbrc	r3, 6
    33fe:	02 c0       	rjmp	.+4      	; 0x3404 <vfprintf+0x11e>
    3400:	6f ef       	ldi	r22, 0xFF	; 255
    3402:	7f ef       	ldi	r23, 0xFF	; 255
    3404:	c6 01       	movw	r24, r12
    3406:	0e 94 4d 1b 	call	0x369a	; 0x369a <strnlen_P>
    340a:	4c 01       	movw	r8, r24
    340c:	68 94       	set
    340e:	37 f8       	bld	r3, 7
    3410:	82 01       	movw	r16, r4
    3412:	0a c0       	rjmp	.+20     	; 0x3428 <vfprintf+0x142>
    3414:	0c 5f       	subi	r16, 0xFC	; 252
    3416:	1f 4f       	sbci	r17, 0xFF	; 255
    3418:	ff e3       	ldi	r31, 0x3F	; 63
    341a:	f9 83       	std	Y+1, r31	; 0x01
    341c:	88 24       	eor	r8, r8
    341e:	83 94       	inc	r8
    3420:	91 2c       	mov	r9, r1
    3422:	65 01       	movw	r12, r10
    3424:	e8 94       	clt
    3426:	37 f8       	bld	r3, 7
    3428:	33 fe       	sbrs	r3, 3
    342a:	2d c0       	rjmp	.+90     	; 0x3486 <vfprintf+0x1a0>
    342c:	52 2c       	mov	r5, r2
    342e:	81 14       	cp	r8, r1
    3430:	91 04       	cpc	r9, r1
    3432:	71 f5       	brne	.+92     	; 0x3490 <vfprintf+0x1aa>
    3434:	55 20       	and	r5, r5
    3436:	09 f4       	brne	.+2      	; 0x343a <vfprintf+0x154>
    3438:	68 cf       	rjmp	.-304    	; 0x330a <vfprintf+0x24>
    343a:	b7 01       	movw	r22, r14
    343c:	80 e2       	ldi	r24, 0x20	; 32
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    3444:	5a 94       	dec	r5
    3446:	f6 cf       	rjmp	.-20     	; 0x3434 <vfprintf+0x14e>
    3448:	f8 01       	movw	r30, r16
    344a:	80 81       	ld	r24, Z
    344c:	89 83       	std	Y+1, r24	; 0x01
    344e:	0e 5f       	subi	r16, 0xFE	; 254
    3450:	1f 4f       	sbci	r17, 0xFF	; 255
    3452:	e4 cf       	rjmp	.-56     	; 0x341c <vfprintf+0x136>
    3454:	28 01       	movw	r4, r16
    3456:	f2 e0       	ldi	r31, 0x02	; 2
    3458:	4f 0e       	add	r4, r31
    345a:	51 1c       	adc	r5, r1
    345c:	f8 01       	movw	r30, r16
    345e:	c0 80       	ld	r12, Z
    3460:	d1 80       	ldd	r13, Z+1	; 0x01
    3462:	69 2d       	mov	r22, r9
    3464:	70 e0       	ldi	r23, 0x00	; 0
    3466:	36 fc       	sbrc	r3, 6
    3468:	02 c0       	rjmp	.+4      	; 0x346e <vfprintf+0x188>
    346a:	6f ef       	ldi	r22, 0xFF	; 255
    346c:	7f ef       	ldi	r23, 0xFF	; 255
    346e:	c6 01       	movw	r24, r12
    3470:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <strnlen>
    3474:	4c 01       	movw	r8, r24
    3476:	82 01       	movw	r16, r4
    3478:	d5 cf       	rjmp	.-86     	; 0x3424 <vfprintf+0x13e>
    347a:	b7 01       	movw	r22, r14
    347c:	80 e2       	ldi	r24, 0x20	; 32
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    3484:	2a 94       	dec	r2
    3486:	28 14       	cp	r2, r8
    3488:	19 04       	cpc	r1, r9
    348a:	09 f0       	breq	.+2      	; 0x348e <vfprintf+0x1a8>
    348c:	b0 f7       	brcc	.-20     	; 0x347a <vfprintf+0x194>
    348e:	ce cf       	rjmp	.-100    	; 0x342c <vfprintf+0x146>
    3490:	f6 01       	movw	r30, r12
    3492:	37 fc       	sbrc	r3, 7
    3494:	85 91       	lpm	r24, Z+
    3496:	37 fe       	sbrs	r3, 7
    3498:	81 91       	ld	r24, Z+
    349a:	6f 01       	movw	r12, r30
    349c:	b7 01       	movw	r22, r14
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    34a4:	51 10       	cpse	r5, r1
    34a6:	5a 94       	dec	r5
    34a8:	f1 e0       	ldi	r31, 0x01	; 1
    34aa:	8f 1a       	sub	r8, r31
    34ac:	91 08       	sbc	r9, r1
    34ae:	bf cf       	rjmp	.-130    	; 0x342e <vfprintf+0x148>
    34b0:	84 36       	cpi	r24, 0x64	; 100
    34b2:	19 f0       	breq	.+6      	; 0x34ba <vfprintf+0x1d4>
    34b4:	89 36       	cpi	r24, 0x69	; 105
    34b6:	09 f0       	breq	.+2      	; 0x34ba <vfprintf+0x1d4>
    34b8:	77 c0       	rjmp	.+238    	; 0x35a8 <vfprintf+0x2c2>
    34ba:	f8 01       	movw	r30, r16
    34bc:	37 fe       	sbrs	r3, 7
    34be:	6b c0       	rjmp	.+214    	; 0x3596 <vfprintf+0x2b0>
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	82 81       	ldd	r24, Z+2	; 0x02
    34c6:	93 81       	ldd	r25, Z+3	; 0x03
    34c8:	0c 5f       	subi	r16, 0xFC	; 252
    34ca:	1f 4f       	sbci	r17, 0xFF	; 255
    34cc:	f3 2d       	mov	r31, r3
    34ce:	ff 76       	andi	r31, 0x6F	; 111
    34d0:	3f 2e       	mov	r3, r31
    34d2:	97 ff       	sbrs	r25, 7
    34d4:	09 c0       	rjmp	.+18     	; 0x34e8 <vfprintf+0x202>
    34d6:	90 95       	com	r25
    34d8:	80 95       	com	r24
    34da:	70 95       	com	r23
    34dc:	61 95       	neg	r22
    34de:	7f 4f       	sbci	r23, 0xFF	; 255
    34e0:	8f 4f       	sbci	r24, 0xFF	; 255
    34e2:	9f 4f       	sbci	r25, 0xFF	; 255
    34e4:	68 94       	set
    34e6:	37 f8       	bld	r3, 7
    34e8:	2a e0       	ldi	r18, 0x0A	; 10
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	a5 01       	movw	r20, r10
    34ee:	0e 94 93 1b 	call	0x3726	; 0x3726 <__ultoa_invert>
    34f2:	c8 2e       	mov	r12, r24
    34f4:	ca 18       	sub	r12, r10
    34f6:	8c 2c       	mov	r8, r12
    34f8:	43 2c       	mov	r4, r3
    34fa:	36 fe       	sbrs	r3, 6
    34fc:	0c c0       	rjmp	.+24     	; 0x3516 <vfprintf+0x230>
    34fe:	e8 94       	clt
    3500:	40 f8       	bld	r4, 0
    3502:	c9 14       	cp	r12, r9
    3504:	40 f4       	brcc	.+16     	; 0x3516 <vfprintf+0x230>
    3506:	34 fe       	sbrs	r3, 4
    3508:	05 c0       	rjmp	.+10     	; 0x3514 <vfprintf+0x22e>
    350a:	32 fc       	sbrc	r3, 2
    350c:	03 c0       	rjmp	.+6      	; 0x3514 <vfprintf+0x22e>
    350e:	f3 2d       	mov	r31, r3
    3510:	fe 7e       	andi	r31, 0xEE	; 238
    3512:	4f 2e       	mov	r4, r31
    3514:	89 2c       	mov	r8, r9
    3516:	44 fe       	sbrs	r4, 4
    3518:	95 c0       	rjmp	.+298    	; 0x3644 <vfprintf+0x35e>
    351a:	fe 01       	movw	r30, r28
    351c:	ec 0d       	add	r30, r12
    351e:	f1 1d       	adc	r31, r1
    3520:	80 81       	ld	r24, Z
    3522:	80 33       	cpi	r24, 0x30	; 48
    3524:	09 f0       	breq	.+2      	; 0x3528 <vfprintf+0x242>
    3526:	87 c0       	rjmp	.+270    	; 0x3636 <vfprintf+0x350>
    3528:	24 2d       	mov	r18, r4
    352a:	29 7e       	andi	r18, 0xE9	; 233
    352c:	42 2e       	mov	r4, r18
    352e:	84 2d       	mov	r24, r4
    3530:	88 70       	andi	r24, 0x08	; 8
    3532:	58 2e       	mov	r5, r24
    3534:	43 fc       	sbrc	r4, 3
    3536:	95 c0       	rjmp	.+298    	; 0x3662 <vfprintf+0x37c>
    3538:	40 fe       	sbrs	r4, 0
    353a:	8f c0       	rjmp	.+286    	; 0x365a <vfprintf+0x374>
    353c:	9c 2c       	mov	r9, r12
    353e:	82 14       	cp	r8, r2
    3540:	18 f4       	brcc	.+6      	; 0x3548 <vfprintf+0x262>
    3542:	2c 0c       	add	r2, r12
    3544:	92 2c       	mov	r9, r2
    3546:	98 18       	sub	r9, r8
    3548:	44 fe       	sbrs	r4, 4
    354a:	91 c0       	rjmp	.+290    	; 0x366e <vfprintf+0x388>
    354c:	b7 01       	movw	r22, r14
    354e:	80 e3       	ldi	r24, 0x30	; 48
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    3556:	42 fe       	sbrs	r4, 2
    3558:	09 c0       	rjmp	.+18     	; 0x356c <vfprintf+0x286>
    355a:	88 e7       	ldi	r24, 0x78	; 120
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	41 fe       	sbrs	r4, 1
    3560:	02 c0       	rjmp	.+4      	; 0x3566 <vfprintf+0x280>
    3562:	88 e5       	ldi	r24, 0x58	; 88
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	b7 01       	movw	r22, r14
    3568:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    356c:	c9 14       	cp	r12, r9
    356e:	08 f4       	brcc	.+2      	; 0x3572 <vfprintf+0x28c>
    3570:	8a c0       	rjmp	.+276    	; 0x3686 <vfprintf+0x3a0>
    3572:	ca 94       	dec	r12
    3574:	d1 2c       	mov	r13, r1
    3576:	9f ef       	ldi	r25, 0xFF	; 255
    3578:	c9 1a       	sub	r12, r25
    357a:	d9 0a       	sbc	r13, r25
    357c:	ca 0c       	add	r12, r10
    357e:	db 1c       	adc	r13, r11
    3580:	f6 01       	movw	r30, r12
    3582:	82 91       	ld	r24, -Z
    3584:	6f 01       	movw	r12, r30
    3586:	b7 01       	movw	r22, r14
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    358e:	ac 14       	cp	r10, r12
    3590:	bd 04       	cpc	r11, r13
    3592:	b1 f7       	brne	.-20     	; 0x3580 <vfprintf+0x29a>
    3594:	4f cf       	rjmp	.-354    	; 0x3434 <vfprintf+0x14e>
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	07 2e       	mov	r0, r23
    359c:	00 0c       	add	r0, r0
    359e:	88 0b       	sbc	r24, r24
    35a0:	99 0b       	sbc	r25, r25
    35a2:	0e 5f       	subi	r16, 0xFE	; 254
    35a4:	1f 4f       	sbci	r17, 0xFF	; 255
    35a6:	92 cf       	rjmp	.-220    	; 0x34cc <vfprintf+0x1e6>
    35a8:	d3 2c       	mov	r13, r3
    35aa:	e8 94       	clt
    35ac:	d4 f8       	bld	r13, 4
    35ae:	2a e0       	ldi	r18, 0x0A	; 10
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	85 37       	cpi	r24, 0x75	; 117
    35b4:	39 f1       	breq	.+78     	; 0x3604 <vfprintf+0x31e>
    35b6:	23 2d       	mov	r18, r3
    35b8:	29 7f       	andi	r18, 0xF9	; 249
    35ba:	d2 2e       	mov	r13, r18
    35bc:	8f 36       	cpi	r24, 0x6F	; 111
    35be:	01 f1       	breq	.+64     	; 0x3600 <vfprintf+0x31a>
    35c0:	48 f4       	brcc	.+18     	; 0x35d4 <vfprintf+0x2ee>
    35c2:	88 35       	cpi	r24, 0x58	; 88
    35c4:	a9 f0       	breq	.+42     	; 0x35f0 <vfprintf+0x30a>
    35c6:	f7 01       	movw	r30, r14
    35c8:	86 81       	ldd	r24, Z+6	; 0x06
    35ca:	97 81       	ldd	r25, Z+7	; 0x07
    35cc:	2b 96       	adiw	r28, 0x0b	; 11
    35ce:	e2 e1       	ldi	r30, 0x12	; 18
    35d0:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__epilogue_restores__>
    35d4:	80 37       	cpi	r24, 0x70	; 112
    35d6:	49 f0       	breq	.+18     	; 0x35ea <vfprintf+0x304>
    35d8:	88 37       	cpi	r24, 0x78	; 120
    35da:	a9 f7       	brne	.-22     	; 0x35c6 <vfprintf+0x2e0>
    35dc:	d4 fe       	sbrs	r13, 4
    35de:	02 c0       	rjmp	.+4      	; 0x35e4 <vfprintf+0x2fe>
    35e0:	68 94       	set
    35e2:	d2 f8       	bld	r13, 2
    35e4:	20 e1       	ldi	r18, 0x10	; 16
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	0d c0       	rjmp	.+26     	; 0x3604 <vfprintf+0x31e>
    35ea:	68 94       	set
    35ec:	d4 f8       	bld	r13, 4
    35ee:	f6 cf       	rjmp	.-20     	; 0x35dc <vfprintf+0x2f6>
    35f0:	34 fe       	sbrs	r3, 4
    35f2:	03 c0       	rjmp	.+6      	; 0x35fa <vfprintf+0x314>
    35f4:	82 2f       	mov	r24, r18
    35f6:	86 60       	ori	r24, 0x06	; 6
    35f8:	d8 2e       	mov	r13, r24
    35fa:	20 e1       	ldi	r18, 0x10	; 16
    35fc:	32 e0       	ldi	r19, 0x02	; 2
    35fe:	02 c0       	rjmp	.+4      	; 0x3604 <vfprintf+0x31e>
    3600:	28 e0       	ldi	r18, 0x08	; 8
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	f8 01       	movw	r30, r16
    3606:	d7 fe       	sbrs	r13, 7
    3608:	0f c0       	rjmp	.+30     	; 0x3628 <vfprintf+0x342>
    360a:	60 81       	ld	r22, Z
    360c:	71 81       	ldd	r23, Z+1	; 0x01
    360e:	82 81       	ldd	r24, Z+2	; 0x02
    3610:	93 81       	ldd	r25, Z+3	; 0x03
    3612:	0c 5f       	subi	r16, 0xFC	; 252
    3614:	1f 4f       	sbci	r17, 0xFF	; 255
    3616:	a5 01       	movw	r20, r10
    3618:	0e 94 93 1b 	call	0x3726	; 0x3726 <__ultoa_invert>
    361c:	c8 2e       	mov	r12, r24
    361e:	ca 18       	sub	r12, r10
    3620:	3d 2c       	mov	r3, r13
    3622:	e8 94       	clt
    3624:	37 f8       	bld	r3, 7
    3626:	67 cf       	rjmp	.-306    	; 0x34f6 <vfprintf+0x210>
    3628:	60 81       	ld	r22, Z
    362a:	71 81       	ldd	r23, Z+1	; 0x01
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	0e 5f       	subi	r16, 0xFE	; 254
    3632:	1f 4f       	sbci	r17, 0xFF	; 255
    3634:	f0 cf       	rjmp	.-32     	; 0x3616 <vfprintf+0x330>
    3636:	42 fc       	sbrc	r4, 2
    3638:	02 c0       	rjmp	.+4      	; 0x363e <vfprintf+0x358>
    363a:	83 94       	inc	r8
    363c:	78 cf       	rjmp	.-272    	; 0x352e <vfprintf+0x248>
    363e:	83 94       	inc	r8
    3640:	83 94       	inc	r8
    3642:	75 cf       	rjmp	.-278    	; 0x352e <vfprintf+0x248>
    3644:	84 2d       	mov	r24, r4
    3646:	86 78       	andi	r24, 0x86	; 134
    3648:	09 f4       	brne	.+2      	; 0x364c <vfprintf+0x366>
    364a:	71 cf       	rjmp	.-286    	; 0x352e <vfprintf+0x248>
    364c:	f6 cf       	rjmp	.-20     	; 0x363a <vfprintf+0x354>
    364e:	b7 01       	movw	r22, r14
    3650:	80 e2       	ldi	r24, 0x20	; 32
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    3658:	83 94       	inc	r8
    365a:	82 14       	cp	r8, r2
    365c:	c0 f3       	brcs	.-16     	; 0x364e <vfprintf+0x368>
    365e:	51 2c       	mov	r5, r1
    3660:	73 cf       	rjmp	.-282    	; 0x3548 <vfprintf+0x262>
    3662:	52 2c       	mov	r5, r2
    3664:	58 18       	sub	r5, r8
    3666:	82 14       	cp	r8, r2
    3668:	08 f4       	brcc	.+2      	; 0x366c <vfprintf+0x386>
    366a:	6e cf       	rjmp	.-292    	; 0x3548 <vfprintf+0x262>
    366c:	f8 cf       	rjmp	.-16     	; 0x365e <vfprintf+0x378>
    366e:	84 2d       	mov	r24, r4
    3670:	86 78       	andi	r24, 0x86	; 134
    3672:	09 f4       	brne	.+2      	; 0x3676 <vfprintf+0x390>
    3674:	7b cf       	rjmp	.-266    	; 0x356c <vfprintf+0x286>
    3676:	8b e2       	ldi	r24, 0x2B	; 43
    3678:	41 fe       	sbrs	r4, 1
    367a:	80 e2       	ldi	r24, 0x20	; 32
    367c:	47 fc       	sbrc	r4, 7
    367e:	8d e2       	ldi	r24, 0x2D	; 45
    3680:	b7 01       	movw	r22, r14
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	71 cf       	rjmp	.-286    	; 0x3568 <vfprintf+0x282>
    3686:	b7 01       	movw	r22, r14
    3688:	80 e3       	ldi	r24, 0x30	; 48
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    3690:	9a 94       	dec	r9
    3692:	6c cf       	rjmp	.-296    	; 0x356c <vfprintf+0x286>
    3694:	8f ef       	ldi	r24, 0xFF	; 255
    3696:	9f ef       	ldi	r25, 0xFF	; 255
    3698:	99 cf       	rjmp	.-206    	; 0x35cc <vfprintf+0x2e6>

0000369a <strnlen_P>:
    369a:	fc 01       	movw	r30, r24
    369c:	05 90       	lpm	r0, Z+
    369e:	61 50       	subi	r22, 0x01	; 1
    36a0:	70 40       	sbci	r23, 0x00	; 0
    36a2:	01 10       	cpse	r0, r1
    36a4:	d8 f7       	brcc	.-10     	; 0x369c <strnlen_P+0x2>
    36a6:	80 95       	com	r24
    36a8:	90 95       	com	r25
    36aa:	8e 0f       	add	r24, r30
    36ac:	9f 1f       	adc	r25, r31
    36ae:	08 95       	ret

000036b0 <strnlen>:
    36b0:	fc 01       	movw	r30, r24
    36b2:	61 50       	subi	r22, 0x01	; 1
    36b4:	70 40       	sbci	r23, 0x00	; 0
    36b6:	01 90       	ld	r0, Z+
    36b8:	01 10       	cpse	r0, r1
    36ba:	d8 f7       	brcc	.-10     	; 0x36b2 <strnlen+0x2>
    36bc:	80 95       	com	r24
    36be:	90 95       	com	r25
    36c0:	8e 0f       	add	r24, r30
    36c2:	9f 1f       	adc	r25, r31
    36c4:	08 95       	ret

000036c6 <fputc>:
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	18 2f       	mov	r17, r24
    36d0:	09 2f       	mov	r16, r25
    36d2:	eb 01       	movw	r28, r22
    36d4:	8b 81       	ldd	r24, Y+3	; 0x03
    36d6:	81 fd       	sbrc	r24, 1
    36d8:	09 c0       	rjmp	.+18     	; 0x36ec <fputc+0x26>
    36da:	1f ef       	ldi	r17, 0xFF	; 255
    36dc:	0f ef       	ldi	r16, 0xFF	; 255
    36de:	81 2f       	mov	r24, r17
    36e0:	90 2f       	mov	r25, r16
    36e2:	df 91       	pop	r29
    36e4:	cf 91       	pop	r28
    36e6:	1f 91       	pop	r17
    36e8:	0f 91       	pop	r16
    36ea:	08 95       	ret
    36ec:	82 ff       	sbrs	r24, 2
    36ee:	14 c0       	rjmp	.+40     	; 0x3718 <fputc+0x52>
    36f0:	2e 81       	ldd	r18, Y+6	; 0x06
    36f2:	3f 81       	ldd	r19, Y+7	; 0x07
    36f4:	8c 81       	ldd	r24, Y+4	; 0x04
    36f6:	9d 81       	ldd	r25, Y+5	; 0x05
    36f8:	28 17       	cp	r18, r24
    36fa:	39 07       	cpc	r19, r25
    36fc:	3c f4       	brge	.+14     	; 0x370c <fputc+0x46>
    36fe:	e8 81       	ld	r30, Y
    3700:	f9 81       	ldd	r31, Y+1	; 0x01
    3702:	cf 01       	movw	r24, r30
    3704:	01 96       	adiw	r24, 0x01	; 1
    3706:	99 83       	std	Y+1, r25	; 0x01
    3708:	88 83       	st	Y, r24
    370a:	10 83       	st	Z, r17
    370c:	8e 81       	ldd	r24, Y+6	; 0x06
    370e:	9f 81       	ldd	r25, Y+7	; 0x07
    3710:	01 96       	adiw	r24, 0x01	; 1
    3712:	9f 83       	std	Y+7, r25	; 0x07
    3714:	8e 83       	std	Y+6, r24	; 0x06
    3716:	e3 cf       	rjmp	.-58     	; 0x36de <fputc+0x18>
    3718:	e8 85       	ldd	r30, Y+8	; 0x08
    371a:	f9 85       	ldd	r31, Y+9	; 0x09
    371c:	81 2f       	mov	r24, r17
    371e:	09 95       	icall
    3720:	89 2b       	or	r24, r25
    3722:	a1 f3       	breq	.-24     	; 0x370c <fputc+0x46>
    3724:	da cf       	rjmp	.-76     	; 0x36da <fputc+0x14>

00003726 <__ultoa_invert>:
    3726:	fa 01       	movw	r30, r20
    3728:	aa 27       	eor	r26, r26
    372a:	28 30       	cpi	r18, 0x08	; 8
    372c:	51 f1       	breq	.+84     	; 0x3782 <__ultoa_invert+0x5c>
    372e:	20 31       	cpi	r18, 0x10	; 16
    3730:	81 f1       	breq	.+96     	; 0x3792 <__ultoa_invert+0x6c>
    3732:	e8 94       	clt
    3734:	6f 93       	push	r22
    3736:	6e 7f       	andi	r22, 0xFE	; 254
    3738:	6e 5f       	subi	r22, 0xFE	; 254
    373a:	7f 4f       	sbci	r23, 0xFF	; 255
    373c:	8f 4f       	sbci	r24, 0xFF	; 255
    373e:	9f 4f       	sbci	r25, 0xFF	; 255
    3740:	af 4f       	sbci	r26, 0xFF	; 255
    3742:	b1 e0       	ldi	r27, 0x01	; 1
    3744:	3e d0       	rcall	.+124    	; 0x37c2 <__ultoa_invert+0x9c>
    3746:	b4 e0       	ldi	r27, 0x04	; 4
    3748:	3c d0       	rcall	.+120    	; 0x37c2 <__ultoa_invert+0x9c>
    374a:	67 0f       	add	r22, r23
    374c:	78 1f       	adc	r23, r24
    374e:	89 1f       	adc	r24, r25
    3750:	9a 1f       	adc	r25, r26
    3752:	a1 1d       	adc	r26, r1
    3754:	68 0f       	add	r22, r24
    3756:	79 1f       	adc	r23, r25
    3758:	8a 1f       	adc	r24, r26
    375a:	91 1d       	adc	r25, r1
    375c:	a1 1d       	adc	r26, r1
    375e:	6a 0f       	add	r22, r26
    3760:	71 1d       	adc	r23, r1
    3762:	81 1d       	adc	r24, r1
    3764:	91 1d       	adc	r25, r1
    3766:	a1 1d       	adc	r26, r1
    3768:	20 d0       	rcall	.+64     	; 0x37aa <__ultoa_invert+0x84>
    376a:	09 f4       	brne	.+2      	; 0x376e <__ultoa_invert+0x48>
    376c:	68 94       	set
    376e:	3f 91       	pop	r19
    3770:	2a e0       	ldi	r18, 0x0A	; 10
    3772:	26 9f       	mul	r18, r22
    3774:	11 24       	eor	r1, r1
    3776:	30 19       	sub	r19, r0
    3778:	30 5d       	subi	r19, 0xD0	; 208
    377a:	31 93       	st	Z+, r19
    377c:	de f6       	brtc	.-74     	; 0x3734 <__ultoa_invert+0xe>
    377e:	cf 01       	movw	r24, r30
    3780:	08 95       	ret
    3782:	46 2f       	mov	r20, r22
    3784:	47 70       	andi	r20, 0x07	; 7
    3786:	40 5d       	subi	r20, 0xD0	; 208
    3788:	41 93       	st	Z+, r20
    378a:	b3 e0       	ldi	r27, 0x03	; 3
    378c:	0f d0       	rcall	.+30     	; 0x37ac <__ultoa_invert+0x86>
    378e:	c9 f7       	brne	.-14     	; 0x3782 <__ultoa_invert+0x5c>
    3790:	f6 cf       	rjmp	.-20     	; 0x377e <__ultoa_invert+0x58>
    3792:	46 2f       	mov	r20, r22
    3794:	4f 70       	andi	r20, 0x0F	; 15
    3796:	40 5d       	subi	r20, 0xD0	; 208
    3798:	4a 33       	cpi	r20, 0x3A	; 58
    379a:	18 f0       	brcs	.+6      	; 0x37a2 <__ultoa_invert+0x7c>
    379c:	49 5d       	subi	r20, 0xD9	; 217
    379e:	31 fd       	sbrc	r19, 1
    37a0:	40 52       	subi	r20, 0x20	; 32
    37a2:	41 93       	st	Z+, r20
    37a4:	02 d0       	rcall	.+4      	; 0x37aa <__ultoa_invert+0x84>
    37a6:	a9 f7       	brne	.-22     	; 0x3792 <__ultoa_invert+0x6c>
    37a8:	ea cf       	rjmp	.-44     	; 0x377e <__ultoa_invert+0x58>
    37aa:	b4 e0       	ldi	r27, 0x04	; 4
    37ac:	a6 95       	lsr	r26
    37ae:	97 95       	ror	r25
    37b0:	87 95       	ror	r24
    37b2:	77 95       	ror	r23
    37b4:	67 95       	ror	r22
    37b6:	ba 95       	dec	r27
    37b8:	c9 f7       	brne	.-14     	; 0x37ac <__ultoa_invert+0x86>
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	61 05       	cpc	r22, r1
    37be:	71 05       	cpc	r23, r1
    37c0:	08 95       	ret
    37c2:	9b 01       	movw	r18, r22
    37c4:	ac 01       	movw	r20, r24
    37c6:	0a 2e       	mov	r0, r26
    37c8:	06 94       	lsr	r0
    37ca:	57 95       	ror	r21
    37cc:	47 95       	ror	r20
    37ce:	37 95       	ror	r19
    37d0:	27 95       	ror	r18
    37d2:	ba 95       	dec	r27
    37d4:	c9 f7       	brne	.-14     	; 0x37c8 <__ultoa_invert+0xa2>
    37d6:	62 0f       	add	r22, r18
    37d8:	73 1f       	adc	r23, r19
    37da:	84 1f       	adc	r24, r20
    37dc:	95 1f       	adc	r25, r21
    37de:	a0 1d       	adc	r26, r0
    37e0:	08 95       	ret

000037e2 <__prologue_saves__>:
    37e2:	2f 92       	push	r2
    37e4:	3f 92       	push	r3
    37e6:	4f 92       	push	r4
    37e8:	5f 92       	push	r5
    37ea:	6f 92       	push	r6
    37ec:	7f 92       	push	r7
    37ee:	8f 92       	push	r8
    37f0:	9f 92       	push	r9
    37f2:	af 92       	push	r10
    37f4:	bf 92       	push	r11
    37f6:	cf 92       	push	r12
    37f8:	df 92       	push	r13
    37fa:	ef 92       	push	r14
    37fc:	ff 92       	push	r15
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	ca 1b       	sub	r28, r26
    380c:	db 0b       	sbc	r29, r27
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	f8 94       	cli
    3812:	de bf       	out	0x3e, r29	; 62
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	09 94       	ijmp

0000381a <__epilogue_restores__>:
    381a:	2a 88       	ldd	r2, Y+18	; 0x12
    381c:	39 88       	ldd	r3, Y+17	; 0x11
    381e:	48 88       	ldd	r4, Y+16	; 0x10
    3820:	5f 84       	ldd	r5, Y+15	; 0x0f
    3822:	6e 84       	ldd	r6, Y+14	; 0x0e
    3824:	7d 84       	ldd	r7, Y+13	; 0x0d
    3826:	8c 84       	ldd	r8, Y+12	; 0x0c
    3828:	9b 84       	ldd	r9, Y+11	; 0x0b
    382a:	aa 84       	ldd	r10, Y+10	; 0x0a
    382c:	b9 84       	ldd	r11, Y+9	; 0x09
    382e:	c8 84       	ldd	r12, Y+8	; 0x08
    3830:	df 80       	ldd	r13, Y+7	; 0x07
    3832:	ee 80       	ldd	r14, Y+6	; 0x06
    3834:	fd 80       	ldd	r15, Y+5	; 0x05
    3836:	0c 81       	ldd	r16, Y+4	; 0x04
    3838:	1b 81       	ldd	r17, Y+3	; 0x03
    383a:	aa 81       	ldd	r26, Y+2	; 0x02
    383c:	b9 81       	ldd	r27, Y+1	; 0x01
    383e:	ce 0f       	add	r28, r30
    3840:	d1 1d       	adc	r29, r1
    3842:	0f b6       	in	r0, 0x3f	; 63
    3844:	f8 94       	cli
    3846:	de bf       	out	0x3e, r29	; 62
    3848:	0f be       	out	0x3f, r0	; 63
    384a:	cd bf       	out	0x3d, r28	; 61
    384c:	ed 01       	movw	r28, r26
    384e:	08 95       	ret

00003850 <_exit>:
    3850:	f8 94       	cli

00003852 <__stop_program>:
    3852:	ff cf       	rjmp	.-2      	; 0x3852 <__stop_program>

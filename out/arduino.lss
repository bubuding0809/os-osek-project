
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ba  00800100  00003cc2  00003d56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003cc2  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001aa  008004ba  008004ba  00004110  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00004110  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004124  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000688  00000000  00000000  00004168  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000185d4  00000000  00000000  000047f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003725  00000000  00000000  0001cdc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004db1  00000000  00000000  000204e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000107c  00000000  00000000  0002529c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004358  00000000  00000000  00026318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000078c1  00000000  00000000  0002a670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e8  00000000  00000000  00031f31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      24:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_9>
      28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      2c:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__vector_11>
      30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      40:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__vector_16>
      44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      48:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__vector_18>
      4c:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__vector_19>
      50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      54:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      58:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      5c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      60:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      64:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <idle_hook+0x10>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	00 00       	nop
      ec:	00 08       	sbc	r0, r0
      ee:	00 02       	muls	r16, r16
      f0:	01 00       	.word	0x0001	; ????
      f2:	00 03       	mulsu	r16, r16
      f4:	04 07       	cpc	r16, r20
	...

000000fe <digital_pin_to_bit_mask_PGM>:
      fe:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     10e:	04 08 10 20                                         ... 

00000112 <digital_pin_to_port_PGM>:
     112:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     122:	03 03 03 03                                         ....

00000126 <port_to_input_PGM>:
     126:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000130 <port_to_output_PGM>:
     130:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000013a <port_to_mode_PGM>:
     13a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000144 <__ctors_start>:
     144:	8b 09       	sbc	r24, r11
     146:	ab 0c       	add	r10, r11

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d8 e0       	ldi	r29, 0x08	; 8
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	14 e0       	ldi	r17, 0x04	; 4
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	e2 ec       	ldi	r30, 0xC2	; 194
     15c:	fc e3       	ldi	r31, 0x3C	; 60
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x10>
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	aa 3b       	cpi	r26, 0xBA	; 186
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0xc>

0000016a <__do_clear_bss>:
     16a:	26 e0       	ldi	r18, 0x06	; 6
     16c:	aa eb       	ldi	r26, 0xBA	; 186
     16e:	b4 e0       	ldi	r27, 0x04	; 4
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a4 36       	cpi	r26, 0x64	; 100
     176:	b2 07       	cpc	r27, r18
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>

0000017a <__do_global_ctors>:
     17a:	10 e0       	ldi	r17, 0x00	; 0
     17c:	c4 ea       	ldi	r28, 0xA4	; 164
     17e:	d0 e0       	ldi	r29, 0x00	; 0
     180:	04 c0       	rjmp	.+8      	; 0x18a <__do_global_ctors+0x10>
     182:	21 97       	sbiw	r28, 0x01	; 1
     184:	fe 01       	movw	r30, r28
     186:	0e 94 81 1b 	call	0x3702	; 0x3702 <__tablejump2__>
     18a:	c2 3a       	cpi	r28, 0xA2	; 162
     18c:	d1 07       	cpc	r29, r17
     18e:	c9 f7       	brne	.-14     	; 0x182 <__do_global_ctors+0x8>
     190:	0e 94 18 05 	call	0xa30	; 0xa30 <main>
     194:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <_exit>

00000198 <__bad_interrupt>:
     198:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__vector_default>

0000019c <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     19c:	2f 92       	push	r2
     19e:	3f 92       	push	r3
     1a0:	4f 92       	push	r4
     1a2:	5f 92       	push	r5
     1a4:	6f 92       	push	r6
     1a6:	7f 92       	push	r7
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	bf 92       	push	r11
     1b0:	cf 92       	push	r12
     1b2:	df 92       	push	r13
     1b4:	ef 92       	push	r14
     1b6:	ff 92       	push	r15
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	e4 2f       	mov	r30, r20
     1c2:	f5 2f       	mov	r31, r21
     1c4:	41 90       	ld	r4, Z+
     1c6:	50 80       	ld	r5, Z
     1c8:	4f 92       	push	r4
     1ca:	5f 92       	push	r5
     1cc:	e4 2f       	mov	r30, r20
     1ce:	f5 2f       	mov	r31, r21
     1d0:	4d b6       	in	r4, 0x3d	; 61
     1d2:	5e b6       	in	r5, 0x3e	; 62
     1d4:	41 92       	st	Z+, r4
     1d6:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     1d8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>

000001dc <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     1dc:	e6 2f       	mov	r30, r22
     1de:	f7 2f       	mov	r31, r23
     1e0:	41 90       	ld	r4, Z+
     1e2:	50 80       	ld	r5, Z
     1e4:	4d be       	out	0x3d, r4	; 61
     1e6:	5e be       	out	0x3e, r5	; 62
     1e8:	5f 90       	pop	r5
     1ea:	4f 90       	pop	r4
     1ec:	e6 2f       	mov	r30, r22
     1ee:	f7 2f       	mov	r31, r23
     1f0:	41 92       	st	Z+, r4
     1f2:	50 82       	st	Z, r5
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	bf 90       	pop	r11
     206:	af 90       	pop	r10
     208:	9f 90       	pop	r9
     20a:	8f 90       	pop	r8
     20c:	7f 90       	pop	r7
     20e:	6f 90       	pop	r6
     210:	5f 90       	pop	r5
     212:	4f 90       	pop	r4
     214:	3f 90       	pop	r3
     216:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     218:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <osEE_scheduler_task_wrapper_restore>

0000021c <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     21c:	e6 2f       	mov	r30, r22
    mov r31, r23
     21e:	f7 2f       	mov	r31, r23
    ld  r20, z+
     220:	41 91       	ld	r20, Z+
    ld  r21, z
     222:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     224:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     226:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     228:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <osEE_scheduler_task_wrapper_run>

0000022c <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     22c:	2f 92       	push	r2
     22e:	3f 92       	push	r3
     230:	4f 92       	push	r4
     232:	5f 92       	push	r5
     234:	6f 92       	push	r6
     236:	7f 92       	push	r7
     238:	8f 92       	push	r8
     23a:	9f 92       	push	r9
     23c:	af 92       	push	r10
     23e:	bf 92       	push	r11
     240:	cf 92       	push	r12
     242:	df 92       	push	r13
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	e4 2f       	mov	r30, r20
     252:	f5 2f       	mov	r31, r21
     254:	41 90       	ld	r4, Z+
     256:	50 80       	ld	r5, Z
     258:	4f 92       	push	r4
     25a:	5f 92       	push	r5
     25c:	e4 2f       	mov	r30, r20
     25e:	f5 2f       	mov	r31, r21
     260:	4d b6       	in	r4, 0x3d	; 61
     262:	5e b6       	in	r5, 0x3e	; 62
     264:	41 92       	st	Z+, r4
     266:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     268:	0c 94 0e 01 	jmp	0x21c	; 0x21c <osEE_hal_ready2stacked>

0000026c <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     26c:	e8 2f       	mov	r30, r24
    mov r31, r25
     26e:	f9 2f       	mov	r31, r25
    ld  r20, z+
     270:	41 91       	ld	r20, Z+
    ld  r21, z
     272:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     274:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     276:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     278:	e6 2f       	mov	r30, r22
    mov r31, r23
     27a:	f7 2f       	mov	r31, r23

    ijmp
     27c:	09 94       	ijmp
	...

00000280 <_ZN5Print17availableForWriteEv>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 95       	ret

00000286 <_ZN5Print5flushEv>:
     286:	08 95       	ret

00000288 <_ZN13LiquidCrystal11pulseEnableEv>:
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	ec 01       	movw	r28, r24
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	8e 81       	ldd	r24, Y+6	; 0x06
     292:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <delayMicroseconds>
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	8e 81       	ldd	r24, Y+6	; 0x06
     2a2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <delayMicroseconds>
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	8e 81       	ldd	r24, Y+6	; 0x06
     2b2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     2b6:	84 e6       	ldi	r24, 0x64	; 100
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <delayMicroseconds>

000002c2 <_ZN13LiquidCrystal10write4bitsEh>:
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	6c 01       	movw	r12, r24
     2d4:	7c 01       	movw	r14, r24
     2d6:	87 e0       	ldi	r24, 0x07	; 7
     2d8:	e8 0e       	add	r14, r24
     2da:	f1 1c       	adc	r15, r1
     2dc:	d0 e0       	ldi	r29, 0x00	; 0
     2de:	c0 e0       	ldi	r28, 0x00	; 0
     2e0:	06 2f       	mov	r16, r22
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	b8 01       	movw	r22, r16
     2e6:	0c 2e       	mov	r0, r28
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     2ea:	75 95       	asr	r23
     2ec:	67 95       	ror	r22
     2ee:	0a 94       	dec	r0
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <_ZN13LiquidCrystal10write4bitsEh+0x28>
     2f2:	61 70       	andi	r22, 0x01	; 1
     2f4:	f7 01       	movw	r30, r14
     2f6:	81 91       	ld	r24, Z+
     2f8:	7f 01       	movw	r14, r30
     2fa:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     2fe:	21 96       	adiw	r28, 0x01	; 1
     300:	c4 30       	cpi	r28, 0x04	; 4
     302:	d1 05       	cpc	r29, r1
     304:	79 f7       	brne	.-34     	; 0x2e4 <_ZN13LiquidCrystal10write4bitsEh+0x22>
     306:	c6 01       	movw	r24, r12
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	0c 94 44 01 	jmp	0x288	; 0x288 <_ZN13LiquidCrystal11pulseEnableEv>

0000031c <_ZN13LiquidCrystal10write8bitsEh>:
     31c:	cf 92       	push	r12
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	6c 01       	movw	r12, r24
     32e:	7c 01       	movw	r14, r24
     330:	87 e0       	ldi	r24, 0x07	; 7
     332:	e8 0e       	add	r14, r24
     334:	f1 1c       	adc	r15, r1
     336:	d0 e0       	ldi	r29, 0x00	; 0
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	06 2f       	mov	r16, r22
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	b8 01       	movw	r22, r16
     340:	0c 2e       	mov	r0, r28
     342:	02 c0       	rjmp	.+4      	; 0x348 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     344:	75 95       	asr	r23
     346:	67 95       	ror	r22
     348:	0a 94       	dec	r0
     34a:	e2 f7       	brpl	.-8      	; 0x344 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     34c:	61 70       	andi	r22, 0x01	; 1
     34e:	f7 01       	movw	r30, r14
     350:	81 91       	ld	r24, Z+
     352:	7f 01       	movw	r14, r30
     354:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     358:	21 96       	adiw	r28, 0x01	; 1
     35a:	c8 30       	cpi	r28, 0x08	; 8
     35c:	d1 05       	cpc	r29, r1
     35e:	79 f7       	brne	.-34     	; 0x33e <_ZN13LiquidCrystal10write8bitsEh+0x22>
     360:	c6 01       	movw	r24, r12
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	df 90       	pop	r13
     370:	cf 90       	pop	r12
     372:	0c 94 44 01 	jmp	0x288	; 0x288 <_ZN13LiquidCrystal11pulseEnableEv>

00000376 <_ZN13LiquidCrystal4sendEhh>:
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	ec 01       	movw	r28, r24
     37e:	16 2f       	mov	r17, r22
     380:	64 2f       	mov	r22, r20
     382:	8c 81       	ldd	r24, Y+4	; 0x04
     384:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	8f 3f       	cpi	r24, 0xFF	; 255
     38c:	19 f0       	breq	.+6      	; 0x394 <_ZN13LiquidCrystal4sendEhh+0x1e>
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     394:	8f 85       	ldd	r24, Y+15	; 0x0f
     396:	61 2f       	mov	r22, r17
     398:	84 ff       	sbrs	r24, 4
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <_ZN13LiquidCrystal4sendEhh+0x32>
     39c:	ce 01       	movw	r24, r28
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_ZN13LiquidCrystal10write8bitsEh>
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	75 95       	asr	r23
     3ae:	67 95       	ror	r22
     3b0:	8a 95       	dec	r24
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <_ZN13LiquidCrystal4sendEhh+0x36>
     3b4:	ce 01       	movw	r24, r28
     3b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     3ba:	61 2f       	mov	r22, r17
     3bc:	ce 01       	movw	r24, r28
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>

000003c8 <_ZN13LiquidCrystal7commandEh>:
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	0c 94 bb 01 	jmp	0x376	; 0x376 <_ZN13LiquidCrystal4sendEhh>

000003ce <_ZN13LiquidCrystal5clearEv>:
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     3d4:	80 ed       	ldi	r24, 0xD0	; 208
     3d6:	97 e0       	ldi	r25, 0x07	; 7
     3d8:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <delayMicroseconds>

000003dc <_ZN13LiquidCrystal9setCursorEhh>:
     3dc:	44 30       	cpi	r20, 0x04	; 4
     3de:	08 f0       	brcs	.+2      	; 0x3e2 <_ZN13LiquidCrystal9setCursorEhh+0x6>
     3e0:	43 e0       	ldi	r20, 0x03	; 3
     3e2:	fc 01       	movw	r30, r24
     3e4:	23 89       	ldd	r18, Z+19	; 0x13
     3e6:	42 17       	cp	r20, r18
     3e8:	10 f0       	brcs	.+4      	; 0x3ee <_ZN13LiquidCrystal9setCursorEhh+0x12>
     3ea:	4f ef       	ldi	r20, 0xFF	; 255
     3ec:	42 0f       	add	r20, r18
     3ee:	fc 01       	movw	r30, r24
     3f0:	e4 0f       	add	r30, r20
     3f2:	f1 1d       	adc	r31, r1
     3f4:	24 89       	ldd	r18, Z+20	; 0x14
     3f6:	62 0f       	add	r22, r18
     3f8:	60 68       	ori	r22, 0x80	; 128
     3fa:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>

000003fe <_ZN13LiquidCrystal7displayEv>:
     3fe:	fc 01       	movw	r30, r24
     400:	60 89       	ldd	r22, Z+16	; 0x10
     402:	26 2f       	mov	r18, r22
     404:	24 60       	ori	r18, 0x04	; 4
     406:	20 8b       	std	Z+16, r18	; 0x10
     408:	6c 60       	ori	r22, 0x0C	; 12
     40a:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>

0000040e <_ZN13LiquidCrystal5beginEhhh>:
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	ec 01       	movw	r28, r24
     418:	42 30       	cpi	r20, 0x02	; 2
     41a:	18 f0       	brcs	.+6      	; 0x422 <_ZN13LiquidCrystal5beginEhhh+0x14>
     41c:	8f 85       	ldd	r24, Y+15	; 0x0f
     41e:	88 60       	ori	r24, 0x08	; 8
     420:	8f 87       	std	Y+15, r24	; 0x0f
     422:	4b 8b       	std	Y+19, r20	; 0x13
     424:	1c 8a       	std	Y+20, r1	; 0x14
     426:	80 e4       	ldi	r24, 0x40	; 64
     428:	8d 8b       	std	Y+21, r24	; 0x15
     42a:	6e 8b       	std	Y+22, r22	; 0x16
     42c:	60 5c       	subi	r22, 0xC0	; 192
     42e:	6f 8b       	std	Y+23, r22	; 0x17
     430:	22 23       	and	r18, r18
     432:	29 f0       	breq	.+10     	; 0x43e <_ZN13LiquidCrystal5beginEhhh+0x30>
     434:	41 30       	cpi	r20, 0x01	; 1
     436:	19 f4       	brne	.+6      	; 0x43e <_ZN13LiquidCrystal5beginEhhh+0x30>
     438:	8f 85       	ldd	r24, Y+15	; 0x0f
     43a:	84 60       	ori	r24, 0x04	; 4
     43c:	8f 87       	std	Y+15, r24	; 0x0f
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	8c 81       	ldd	r24, Y+4	; 0x04
     442:	0e 94 5f 0a 	call	0x14be	; 0x14be <pinMode>
     446:	8d 81       	ldd	r24, Y+5	; 0x05
     448:	8f 3f       	cpi	r24, 0xFF	; 255
     44a:	19 f0       	breq	.+6      	; 0x452 <_ZN13LiquidCrystal5beginEhhh+0x44>
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	0e 94 5f 0a 	call	0x14be	; 0x14be <pinMode>
     452:	61 e0       	ldi	r22, 0x01	; 1
     454:	8e 81       	ldd	r24, Y+6	; 0x06
     456:	0e 94 5f 0a 	call	0x14be	; 0x14be <pinMode>
     45a:	8e 01       	movw	r16, r28
     45c:	98 01       	movw	r18, r16
     45e:	2c 1b       	sub	r18, r28
     460:	3d 0b       	sbc	r19, r29
     462:	8f 85       	ldd	r24, Y+15	; 0x0f
     464:	84 fd       	sbrc	r24, 4
     466:	0d c0       	rjmp	.+26     	; 0x482 <_ZN13LiquidCrystal5beginEhhh+0x74>
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0f 5f       	subi	r16, 0xFF	; 255
     46e:	1f 4f       	sbci	r17, 0xFF	; 255
     470:	28 17       	cp	r18, r24
     472:	39 07       	cpc	r19, r25
     474:	4c f4       	brge	.+18     	; 0x488 <_ZN13LiquidCrystal5beginEhhh+0x7a>
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	f8 01       	movw	r30, r16
     47a:	86 81       	ldd	r24, Z+6	; 0x06
     47c:	0e 94 5f 0a 	call	0x14be	; 0x14be <pinMode>
     480:	ed cf       	rjmp	.-38     	; 0x45c <_ZN13LiquidCrystal5beginEhhh+0x4e>
     482:	88 e0       	ldi	r24, 0x08	; 8
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	f2 cf       	rjmp	.-28     	; 0x46c <_ZN13LiquidCrystal5beginEhhh+0x5e>
     488:	80 e5       	ldi	r24, 0x50	; 80
     48a:	93 ec       	ldi	r25, 0xC3	; 195
     48c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <delayMicroseconds>
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	8c 81       	ldd	r24, Y+4	; 0x04
     494:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	8e 81       	ldd	r24, Y+6	; 0x06
     49c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     4a0:	8d 81       	ldd	r24, Y+5	; 0x05
     4a2:	8f 3f       	cpi	r24, 0xFF	; 255
     4a4:	19 f0       	breq	.+6      	; 0x4ac <_ZN13LiquidCrystal5beginEhhh+0x9e>
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     4ac:	6f 85       	ldd	r22, Y+15	; 0x0f
     4ae:	64 fd       	sbrc	r22, 4
     4b0:	33 c0       	rjmp	.+102    	; 0x518 <_ZN13LiquidCrystal5beginEhhh+0x10a>
     4b2:	63 e0       	ldi	r22, 0x03	; 3
     4b4:	ce 01       	movw	r24, r28
     4b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ba:	84 e9       	ldi	r24, 0x94	; 148
     4bc:	91 e1       	ldi	r25, 0x11	; 17
     4be:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <delayMicroseconds>
     4c2:	63 e0       	ldi	r22, 0x03	; 3
     4c4:	ce 01       	movw	r24, r28
     4c6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ca:	84 e9       	ldi	r24, 0x94	; 148
     4cc:	91 e1       	ldi	r25, 0x11	; 17
     4ce:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <delayMicroseconds>
     4d2:	63 e0       	ldi	r22, 0x03	; 3
     4d4:	ce 01       	movw	r24, r28
     4d6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4da:	86 e9       	ldi	r24, 0x96	; 150
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <delayMicroseconds>
     4e2:	62 e0       	ldi	r22, 0x02	; 2
     4e4:	ce 01       	movw	r24, r28
     4e6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ea:	6f 85       	ldd	r22, Y+15	; 0x0f
     4ec:	60 62       	ori	r22, 0x20	; 32
     4ee:	ce 01       	movw	r24, r28
     4f0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     4f4:	84 e0       	ldi	r24, 0x04	; 4
     4f6:	88 8b       	std	Y+16, r24	; 0x10
     4f8:	ce 01       	movw	r24, r28
     4fa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN13LiquidCrystal7displayEv>
     4fe:	ce 01       	movw	r24, r28
     500:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN13LiquidCrystal5clearEv>
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	89 8b       	std	Y+17, r24	; 0x11
     508:	66 e0       	ldi	r22, 0x06	; 6
     50a:	ce 01       	movw	r24, r28
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     518:	60 62       	ori	r22, 0x20	; 32
     51a:	ce 01       	movw	r24, r28
     51c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     520:	84 e9       	ldi	r24, 0x94	; 148
     522:	91 e1       	ldi	r25, 0x11	; 17
     524:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <delayMicroseconds>
     528:	6f 85       	ldd	r22, Y+15	; 0x0f
     52a:	60 62       	ori	r22, 0x20	; 32
     52c:	ce 01       	movw	r24, r28
     52e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     532:	86 e9       	ldi	r24, 0x96	; 150
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <delayMicroseconds>
     53a:	6f 85       	ldd	r22, Y+15	; 0x0f
     53c:	60 62       	ori	r22, 0x20	; 32
     53e:	ce 01       	movw	r24, r28
     540:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     544:	d2 cf       	rjmp	.-92     	; 0x4ea <_ZN13LiquidCrystal5beginEhhh+0xdc>

00000546 <_ZN13LiquidCrystalC1Ehhhhhh>:
     546:	cf 92       	push	r12
     548:	ef 92       	push	r14
     54a:	0f 93       	push	r16
     54c:	fc 01       	movw	r30, r24
     54e:	13 82       	std	Z+3, r1	; 0x03
     550:	12 82       	std	Z+2, r1	; 0x02
     552:	83 eb       	ldi	r24, 0xB3	; 179
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	91 83       	std	Z+1, r25	; 0x01
     558:	80 83       	st	Z, r24
     55a:	64 83       	std	Z+4, r22	; 0x04
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	85 83       	std	Z+5, r24	; 0x05
     560:	46 83       	std	Z+6, r20	; 0x06
     562:	27 83       	std	Z+7, r18	; 0x07
     564:	00 87       	std	Z+8, r16	; 0x08
     566:	e1 86       	std	Z+9, r14	; 0x09
     568:	c2 86       	std	Z+10, r12	; 0x0a
     56a:	13 86       	std	Z+11, r1	; 0x0b
     56c:	14 86       	std	Z+12, r1	; 0x0c
     56e:	15 86       	std	Z+13, r1	; 0x0d
     570:	16 86       	std	Z+14, r1	; 0x0e
     572:	17 86       	std	Z+15, r1	; 0x0f
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	60 e1       	ldi	r22, 0x10	; 16
     57a:	cf 01       	movw	r24, r30
     57c:	0f 91       	pop	r16
     57e:	ef 90       	pop	r14
     580:	cf 90       	pop	r12
     582:	0c 94 07 02 	jmp	0x40e	; 0x40e <_ZN13LiquidCrystal5beginEhhh>

00000586 <_ZN13LiquidCrystal10createCharEhPh>:
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	8c 01       	movw	r16, r24
     594:	7a 01       	movw	r14, r20
     596:	67 70       	andi	r22, 0x07	; 7
     598:	88 e0       	ldi	r24, 0x08	; 8
     59a:	68 9f       	mul	r22, r24
     59c:	b0 01       	movw	r22, r0
     59e:	11 24       	eor	r1, r1
     5a0:	60 64       	ori	r22, 0x40	; 64
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     5a8:	e7 01       	movw	r28, r14
     5aa:	a8 e0       	ldi	r26, 0x08	; 8
     5ac:	ea 0e       	add	r14, r26
     5ae:	f1 1c       	adc	r15, r1
     5b0:	69 91       	ld	r22, Y+
     5b2:	d8 01       	movw	r26, r16
     5b4:	ed 91       	ld	r30, X+
     5b6:	fc 91       	ld	r31, X
     5b8:	01 90       	ld	r0, Z+
     5ba:	f0 81       	ld	r31, Z
     5bc:	e0 2d       	mov	r30, r0
     5be:	c8 01       	movw	r24, r16
     5c0:	09 95       	icall
     5c2:	ce 15       	cp	r28, r14
     5c4:	df 05       	cpc	r29, r15
     5c6:	a1 f7       	brne	.-24     	; 0x5b0 <_ZN13LiquidCrystal10createCharEhPh+0x2a>
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	08 95       	ret

000005d6 <_ZN13LiquidCrystal5writeEh>:
     5d6:	41 e0       	ldi	r20, 0x01	; 1
     5d8:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN13LiquidCrystal4sendEhh>
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	08 95       	ret

000005e2 <__vector_9>:
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
     604:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <_ZL8ISRCount>
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <_ZL8ISRCount>
     60e:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     612:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <_ZL8ISRCount>
     616:	8e 2f       	mov	r24, r30
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	fc 01       	movw	r30, r24
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	e8 0f       	add	r30, r24
     622:	f9 1f       	adc	r31, r25
     624:	e2 54       	subi	r30, 0x42	; 66
     626:	fb 4f       	sbci	r31, 0xFB	; 251
     628:	81 81       	ldd	r24, Z+1	; 0x01
     62a:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     62e:	82 13       	cpse	r24, r18
     630:	1d c0       	rjmp	.+58     	; 0x66c <__vector_9+0x8a>
     632:	8e 2f       	mov	r24, r30
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	fc 01       	movw	r30, r24
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	e8 0f       	add	r30, r24
     63e:	f9 1f       	adc	r31, r25
     640:	e2 54       	subi	r30, 0x42	; 66
     642:	fb 4f       	sbci	r31, 0xFB	; 251
     644:	82 81       	ldd	r24, Z+2	; 0x02
     646:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0f be       	out	0x3f, r0	; 63
     666:	0f 90       	pop	r0
     668:	1f 90       	pop	r1
     66a:	18 95       	reti
     66c:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <_ZL8ISRCount>
     670:	8e 2f       	mov	r24, r30
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	fc 01       	movw	r30, r24
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	e8 0f       	add	r30, r24
     67c:	f9 1f       	adc	r31, r25
     67e:	e2 54       	subi	r30, 0x42	; 66
     680:	fb 4f       	sbci	r31, 0xFB	; 251
     682:	81 81       	ldd	r24, Z+1	; 0x01
     684:	82 17       	cp	r24, r18
     686:	08 f7       	brcc	.-62     	; 0x64a <__vector_9+0x68>
     688:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     68c:	8e 2f       	mov	r24, r30
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	fc 01       	movw	r30, r24
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	e8 0f       	add	r30, r24
     698:	f9 1f       	adc	r31, r25
     69a:	e2 54       	subi	r30, 0x42	; 66
     69c:	fb 4f       	sbci	r31, 0xFB	; 251
     69e:	80 81       	ld	r24, Z
     6a0:	85 ff       	sbrs	r24, 5
     6a2:	10 c0       	rjmp	.+32     	; 0x6c4 <__vector_9+0xe2>
     6a4:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     6a8:	8e 2f       	mov	r24, r30
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	fc 01       	movw	r30, r24
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	e8 0f       	add	r30, r24
     6b4:	f9 1f       	adc	r31, r25
     6b6:	e2 54       	subi	r30, 0x42	; 66
     6b8:	fb 4f       	sbci	r31, 0xFB	; 251
     6ba:	80 81       	ld	r24, Z
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	8f 71       	andi	r24, 0x1F	; 31
     6c0:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     6c4:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <_ZL7Channel>
     6c8:	8f 5f       	subi	r24, 0xFF	; 255
     6ca:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <_ZL7Channel>
     6ce:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <_ZL8ISRCount>
     6d2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     6d6:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <_ZL7Channel>
     6da:	88 23       	and	r24, r24
     6dc:	19 f1       	breq	.+70     	; 0x724 <__vector_9+0x142>
     6de:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <_ZL7Channel>
     6e2:	89 30       	cpi	r24, 0x09	; 9
     6e4:	f8 f4       	brcc	.+62     	; 0x724 <__vector_9+0x142>
     6e6:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     6ea:	8e 2f       	mov	r24, r30
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	fc 01       	movw	r30, r24
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	e8 0f       	add	r30, r24
     6f6:	f9 1f       	adc	r31, r25
     6f8:	e2 54       	subi	r30, 0x42	; 66
     6fa:	fb 4f       	sbci	r31, 0xFB	; 251
     6fc:	80 81       	ld	r24, Z
     6fe:	85 ff       	sbrs	r24, 5
     700:	a4 cf       	rjmp	.-184    	; 0x64a <__vector_9+0x68>
     702:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <_ZL7Channel>
     706:	8e 2f       	mov	r24, r30
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	fc 01       	movw	r30, r24
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	e8 0f       	add	r30, r24
     712:	f9 1f       	adc	r31, r25
     714:	e2 54       	subi	r30, 0x42	; 66
     716:	fb 4f       	sbci	r31, 0xFB	; 251
     718:	80 81       	ld	r24, Z
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	8f 71       	andi	r24, 0x1F	; 31
     71e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     722:	93 cf       	rjmp	.-218    	; 0x64a <__vector_9+0x68>
     724:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <_ZL7Channel>
     728:	89 30       	cpi	r24, 0x09	; 9
     72a:	08 f4       	brcc	.+2      	; 0x72e <__vector_9+0x14c>
     72c:	8e cf       	rjmp	.-228    	; 0x64a <__vector_9+0x68>
     72e:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <_ZL7Channel>
     732:	8b cf       	rjmp	.-234    	; 0x64a <__vector_9+0x68>

00000734 <_ZN11ServoTimer2C1Ev>:
     734:	fc 01       	movw	r30, r24
     736:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <ChannelCount>
     73a:	98 30       	cpi	r25, 0x08	; 8
     73c:	28 f4       	brcc	.+10     	; 0x748 <_ZN11ServoTimer2C1Ev+0x14>
     73e:	9f 5f       	subi	r25, 0xFF	; 255
     740:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <ChannelCount>
     744:	90 83       	st	Z, r25
     746:	08 95       	ret
     748:	10 82       	st	Z, r1
     74a:	08 95       	ret

0000074c <_ZN11ServoTimer26attachEi>:
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
     754:	16 2f       	mov	r17, r22
     756:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <__data_end>
     75a:	81 11       	cpse	r24, r1
     75c:	22 c0       	rjmp	.+68     	; 0x7a2 <_ZN11ServoTimer26attachEi+0x56>
     75e:	ee eb       	ldi	r30, 0xBE	; 190
     760:	f4 e0       	ldi	r31, 0x04	; 4
     762:	86 ed       	ldi	r24, 0xD6	; 214
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	3b e0       	ldi	r19, 0x0B	; 11
     768:	27 e5       	ldi	r18, 0x57	; 87
     76a:	34 83       	std	Z+4, r19	; 0x04
     76c:	25 83       	std	Z+5, r18	; 0x05
     76e:	33 96       	adiw	r30, 0x03	; 3
     770:	8e 17       	cp	r24, r30
     772:	9f 07       	cpc	r25, r31
     774:	d1 f7       	brne	.-12     	; 0x76a <_ZN11ServoTimer26attachEi+0x1e>
     776:	8e e3       	ldi	r24, 0x3E	; 62
     778:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <_ZL6servos+0x1>
     77c:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <_ZL7Channel>
     780:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <_ZL8ISRCount>
     784:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     788:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     792:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	87 bb       	out	0x17, r24	; 23
     79a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     79e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <__data_end>
     7a2:	88 81       	ld	r24, Y
     7a4:	88 23       	and	r24, r24
     7a6:	a1 f0       	breq	.+40     	; 0x7d0 <_ZN11ServoTimer26attachEi+0x84>
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	81 2f       	mov	r24, r17
     7ac:	0e 94 5f 0a 	call	0x14be	; 0x14be <pinMode>
     7b0:	e8 81       	ld	r30, Y
     7b2:	8e 2f       	mov	r24, r30
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	fc 01       	movw	r30, r24
     7b8:	ee 0f       	add	r30, r30
     7ba:	ff 1f       	adc	r31, r31
     7bc:	e8 0f       	add	r30, r24
     7be:	f9 1f       	adc	r31, r25
     7c0:	e2 54       	subi	r30, 0x42	; 66
     7c2:	fb 4f       	sbci	r31, 0xFB	; 251
     7c4:	1f 71       	andi	r17, 0x1F	; 31
     7c6:	60 81       	ld	r22, Z
     7c8:	60 7e       	andi	r22, 0xE0	; 224
     7ca:	61 2b       	or	r22, r17
     7cc:	60 62       	ori	r22, 0x20	; 32
     7ce:	60 83       	st	Z, r22
     7d0:	88 81       	ld	r24, Y
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	08 95       	ret

000007da <_ZN11ServoTimer25writeEi>:
     7da:	dc 01       	movw	r26, r24
     7dc:	ec 91       	ld	r30, X
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	8e 0f       	add	r24, r30
     7e2:	88 30       	cpi	r24, 0x08	; 8
     7e4:	f8 f4       	brcc	.+62     	; 0x824 <_ZN11ServoTimer25writeEi+0x4a>
     7e6:	cb 01       	movw	r24, r22
     7e8:	6b 3c       	cpi	r22, 0xCB	; 203
     7ea:	78 40       	sbci	r23, 0x08	; 8
     7ec:	14 f0       	brlt	.+4      	; 0x7f2 <_ZN11ServoTimer25writeEi+0x18>
     7ee:	8a ec       	ldi	r24, 0xCA	; 202
     7f0:	98 e0       	ldi	r25, 0x08	; 8
     7f2:	8e 3e       	cpi	r24, 0xEE	; 238
     7f4:	22 e0       	ldi	r18, 0x02	; 2
     7f6:	92 07       	cpc	r25, r18
     7f8:	14 f4       	brge	.+4      	; 0x7fe <_ZN11ServoTimer25writeEi+0x24>
     7fa:	8e ee       	ldi	r24, 0xEE	; 238
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	08 97       	sbiw	r24, 0x08	; 8
     800:	ac 01       	movw	r20, r24
     802:	44 0f       	add	r20, r20
     804:	45 2f       	mov	r20, r21
     806:	44 1f       	adc	r20, r20
     808:	55 0b       	sbc	r21, r21
     80a:	2e 2f       	mov	r18, r30
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	f9 01       	movw	r30, r18
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	e2 0f       	add	r30, r18
     816:	f3 1f       	adc	r31, r19
     818:	e2 54       	subi	r30, 0x42	; 66
     81a:	fb 4f       	sbci	r31, 0xFB	; 251
     81c:	41 83       	std	Z+1, r20	; 0x01
     81e:	88 0f       	add	r24, r24
     820:	80 95       	com	r24
     822:	82 83       	std	Z+2, r24	; 0x02
     824:	08 95       	ret

00000826 <StartupHook>:
     826:	65 e0       	ldi	r22, 0x05	; 5
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	8b e1       	ldi	r24, 0x1B	; 27
     82c:	95 e0       	ldi	r25, 0x05	; 5
     82e:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN11ServoTimer26attachEi>
     832:	6e ee       	ldi	r22, 0xEE	; 238
     834:	72 e0       	ldi	r23, 0x02	; 2
     836:	8b e1       	ldi	r24, 0x1B	; 27
     838:	95 e0       	ldi	r25, 0x05	; 5
     83a:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     83e:	64 e0       	ldi	r22, 0x04	; 4
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	8a e1       	ldi	r24, 0x1A	; 26
     844:	95 e0       	ldi	r25, 0x05	; 5
     846:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN11ServoTimer26attachEi>
     84a:	6e ee       	ldi	r22, 0xEE	; 238
     84c:	72 e0       	ldi	r23, 0x02	; 2
     84e:	8a e1       	ldi	r24, 0x1A	; 26
     850:	95 e0       	ldi	r25, 0x05	; 5
     852:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	44 e0       	ldi	r20, 0x04	; 4
     85a:	64 e1       	ldi	r22, 0x14	; 20
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	95 e0       	ldi	r25, 0x05	; 5
     860:	0e 94 07 02 	call	0x40e	; 0x40e <_ZN13LiquidCrystal5beginEhhh>
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	51 e0       	ldi	r21, 0x01	; 1
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN13LiquidCrystal10createCharEhPh>
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	95 e0       	ldi	r25, 0x05	; 5
     876:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN13LiquidCrystal5clearEv>
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	83 e1       	ldi	r24, 0x13	; 19
     87e:	0e 94 5f 0a 	call	0x14be	; 0x14be <pinMode>
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	82 e1       	ldi	r24, 0x12	; 18
     886:	0e 94 5f 0a 	call	0x14be	; 0x14be <pinMode>
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	0e 94 5f 0a 	call	0x14be	; 0x14be <pinMode>
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	87 e0       	ldi	r24, 0x07	; 7
     896:	0e 94 5f 0a 	call	0x14be	; 0x14be <pinMode>
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	87 e0       	ldi	r24, 0x07	; 7
     8a6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
     8aa:	e9 e6       	ldi	r30, 0x69	; 105
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	82 60       	ori	r24, 0x02	; 2
     8b2:	80 83       	st	Z, r24
     8b4:	e8 9a       	sbi	0x1d, 0	; 29
     8b6:	26 e0       	ldi	r18, 0x06	; 6
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	52 ec       	ldi	r21, 0xC2	; 194
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	85 e2       	ldi	r24, 0x25	; 37
     8c2:	95 e0       	ldi	r25, 0x05	; 5
     8c4:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN14HardwareSerial5beginEmh>
     8c8:	6b eb       	ldi	r22, 0xBB	; 187
     8ca:	71 e0       	ldi	r23, 0x01	; 1
     8cc:	85 e2       	ldi	r24, 0x25	; 37
     8ce:	95 e0       	ldi	r25, 0x05	; 5
     8d0:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>

000008d4 <idle_hook>:
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	00 d0       	rcall	.+0      	; 0x8de <idle_hook+0xa>
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	8d b7       	in	r24, 0x3d	; 61
     8e4:	9e b7       	in	r25, 0x3e	; 62
     8e6:	9a 83       	std	Y+2, r25	; 0x02
     8e8:	89 83       	std	Y+1, r24	; 0x01
     8ea:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <main_sp>
     8ee:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <main_sp+0x1>
     8f2:	89 2b       	or	r24, r25
     8f4:	a9 f4       	brne	.+42     	; 0x920 <__stack+0x21>
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <main_sp+0x1>
     8fe:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <main_sp>
     902:	f8 94       	cli
     904:	8a e4       	ldi	r24, 0x4A	; 74
     906:	9b e0       	ldi	r25, 0x0B	; 11
     908:	89 2b       	or	r24, r25
     90a:	11 f0       	breq	.+4      	; 0x910 <__stack+0x11>
     90c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_Z14serialEventRunv>
     910:	78 94       	sei
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	08 95       	ret
     920:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <main_sp>
     924:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <main_sp+0x1>
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	28 17       	cp	r18, r24
     92e:	39 07       	cpc	r19, r25
     930:	41 f3       	breq	.-48     	; 0x902 <__stack+0x3>
     932:	f8 94       	cli
     934:	80 ed       	ldi	r24, 0xD0	; 208
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 20 05 	call	0xa40	; 0xa40 <serial_print>
     93c:	0a e4       	ldi	r16, 0x4A	; 74
     93e:	1b e0       	ldi	r17, 0x0B	; 11
     940:	01 15       	cp	r16, r1
     942:	11 05       	cpc	r17, r1
     944:	e9 f3       	breq	.-6      	; 0x940 <__stack+0x41>
     946:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_Z14serialEventRunv>
     94a:	fa cf       	rjmp	.-12     	; 0x940 <__stack+0x41>

0000094c <ErrorHook>:
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	ec 01       	movw	r28, r24
     956:	0e 94 1b 12 	call	0x2436	; 0x2436 <osEE_get_service_id>
     95a:	8c 01       	movw	r16, r24
     95c:	c4 30       	cpi	r28, 0x04	; 4
     95e:	d1 05       	cpc	r29, r1
     960:	09 f4       	brne	.+2      	; 0x964 <ErrorHook+0x18>
     962:	4c c0       	rjmp	.+152    	; 0x9fc <ErrorHook+0xb0>
     964:	c8 f4       	brcc	.+50     	; 0x998 <ErrorHook+0x4c>
     966:	c1 30       	cpi	r28, 0x01	; 1
     968:	d1 05       	cpc	r29, r1
     96a:	79 f1       	breq	.+94     	; 0x9ca <ErrorHook+0x7e>
     96c:	c3 30       	cpi	r28, 0x03	; 3
     96e:	d1 05       	cpc	r29, r1
     970:	c1 f1       	breq	.+112    	; 0x9e2 <ErrorHook+0x96>
     972:	4a e0       	ldi	r20, 0x0A	; 10
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	be 01       	movw	r22, r28
     978:	85 e2       	ldi	r24, 0x25	; 37
     97a:	95 e0       	ldi	r25, 0x05	; 5
     97c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <_ZN5Print5printEii>
     980:	63 ef       	ldi	r22, 0xF3	; 243
     982:	71 e0       	ldi	r23, 0x01	; 1
     984:	85 e2       	ldi	r24, 0x25	; 37
     986:	95 e0       	ldi	r25, 0x05	; 5
     988:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     98c:	0e 94 1b 12 	call	0x2436	; 0x2436 <osEE_get_service_id>
     990:	4a e0       	ldi	r20, 0x0A	; 10
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	bc 01       	movw	r22, r24
     996:	1d c0       	rjmp	.+58     	; 0x9d2 <ErrorHook+0x86>
     998:	c7 30       	cpi	r28, 0x07	; 7
     99a:	d1 05       	cpc	r29, r1
     99c:	c9 f1       	breq	.+114    	; 0xa10 <ErrorHook+0xc4>
     99e:	ce 30       	cpi	r28, 0x0E	; 14
     9a0:	d1 05       	cpc	r29, r1
     9a2:	39 f7       	brne	.-50     	; 0x972 <ErrorHook+0x26>
     9a4:	64 e2       	ldi	r22, 0x24	; 36
     9a6:	72 e0       	ldi	r23, 0x02	; 2
     9a8:	85 e2       	ldi	r24, 0x25	; 37
     9aa:	95 e0       	ldi	r25, 0x05	; 5
     9ac:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     9b0:	06 32       	cpi	r16, 0x26	; 38
     9b2:	11 05       	cpc	r17, r1
     9b4:	c1 f5       	brne	.+112    	; 0xa26 <ErrorHook+0xda>
     9b6:	68 e3       	ldi	r22, 0x38	; 56
     9b8:	72 e0       	ldi	r23, 0x02	; 2
     9ba:	85 e2       	ldi	r24, 0x25	; 37
     9bc:	95 e0       	ldi	r25, 0x05	; 5
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     9ca:	4a e0       	ldi	r20, 0x0A	; 10
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	85 e2       	ldi	r24, 0x25	; 37
     9d4:	95 e0       	ldi	r25, 0x05	; 5
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <_ZN5Print7printlnEii>
     9e2:	6c ee       	ldi	r22, 0xEC	; 236
     9e4:	71 e0       	ldi	r23, 0x01	; 1
     9e6:	85 e2       	ldi	r24, 0x25	; 37
     9e8:	95 e0       	ldi	r25, 0x05	; 5
     9ea:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     9ee:	4a e0       	ldi	r20, 0x0A	; 10
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	b8 01       	movw	r22, r16
     9f4:	85 e2       	ldi	r24, 0x25	; 37
     9f6:	95 e0       	ldi	r25, 0x05	; 5
     9f8:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN5Print7printlnEii>
     9fc:	65 ef       	ldi	r22, 0xF5	; 245
     9fe:	71 e0       	ldi	r23, 0x01	; 1
     a00:	85 e2       	ldi	r24, 0x25	; 37
     a02:	95 e0       	ldi	r25, 0x05	; 5
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	72 e0       	ldi	r23, 0x02	; 2
     a14:	85 e2       	ldi	r24, 0x25	; 37
     a16:	95 e0       	ldi	r25, 0x05	; 5
     a18:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     a1c:	6c e0       	ldi	r22, 0x0C	; 12
     a1e:	72 e0       	ldi	r23, 0x02	; 2
     a20:	08 32       	cpi	r16, 0x28	; 40
     a22:	11 05       	cpc	r17, r1
     a24:	51 f2       	breq	.-108    	; 0x9ba <ErrorHook+0x6e>
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	08 95       	ret

00000a30 <main>:
     a30:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <init>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <StartOS>
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	08 95       	ret

00000a40 <serial_print>:
     a40:	f8 94       	cli
     a42:	fc 01       	movw	r30, r24
     a44:	01 90       	ld	r0, Z+
     a46:	00 20       	and	r0, r0
     a48:	e9 f7       	brne	.-6      	; 0xa44 <serial_print+0x4>
     a4a:	31 97       	sbiw	r30, 0x01	; 1
     a4c:	af 01       	movw	r20, r30
     a4e:	48 1b       	sub	r20, r24
     a50:	59 0b       	sbc	r21, r25
     a52:	bc 01       	movw	r22, r24
     a54:	85 e2       	ldi	r24, 0x25	; 37
     a56:	95 e0       	ldi	r25, 0x05	; 5
     a58:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN5Print5writeEPKhj>
     a5c:	78 94       	sei
     a5e:	08 95       	ret

00000a60 <FuncClockTask>:
     a60:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <second>
     a64:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <second+0x1>
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	8c 33       	cpi	r24, 0x3C	; 60
     a6c:	91 05       	cpc	r25, r1
     a6e:	41 f0       	breq	.+16     	; 0xa80 <FuncClockTask+0x20>
     a70:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <second+0x1>
     a74:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <second>
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <isNewTime>
     a7e:	08 95       	ret
     a80:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <second+0x1>
     a84:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <second>
     a88:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <minute>
     a8c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <minute+0x1>
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	8c 33       	cpi	r24, 0x3C	; 60
     a94:	91 05       	cpc	r25, r1
     a96:	29 f0       	breq	.+10     	; 0xaa2 <FuncClockTask+0x42>
     a98:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <minute+0x1>
     a9c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <minute>
     aa0:	eb cf       	rjmp	.-42     	; 0xa78 <FuncClockTask+0x18>
     aa2:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <minute+0x1>
     aa6:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <minute>
     aaa:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <hour>
     aae:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <hour+0x1>
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	88 31       	cpi	r24, 0x18	; 24
     ab6:	91 05       	cpc	r25, r1
     ab8:	29 f0       	breq	.+10     	; 0xac4 <FuncClockTask+0x64>
     aba:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <hour+0x1>
     abe:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <hour>
     ac2:	da cf       	rjmp	.-76     	; 0xa78 <FuncClockTask+0x18>
     ac4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <hour+0x1>
     ac8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <hour>
     acc:	d5 cf       	rjmp	.-86     	; 0xa78 <FuncClockTask+0x18>

00000ace <FuncToggleEastServoTask>:
     ace:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
     ad2:	88 23       	and	r24, r24
     ad4:	c9 f0       	breq	.+50     	; 0xb08 <FuncToggleEastServoTask+0x3a>
     ad6:	6c e5       	ldi	r22, 0x5C	; 92
     ad8:	73 e0       	ldi	r23, 0x03	; 3
     ada:	85 e2       	ldi	r24, 0x25	; 37
     adc:	95 e0       	ldi	r25, 0x05	; 5
     ade:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     ae2:	6a ec       	ldi	r22, 0xCA	; 202
     ae4:	78 e0       	ldi	r23, 0x08	; 8
     ae6:	8b e1       	ldi	r24, 0x1B	; 27
     ae8:	95 e0       	ldi	r25, 0x05	; 5
     aea:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     aee:	60 e7       	ldi	r22, 0x70	; 112
     af0:	73 e0       	ldi	r23, 0x03	; 3
     af2:	85 e2       	ldi	r24, 0x25	; 37
     af4:	95 e0       	ldi	r25, 0x05	; 5
     af6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     afa:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	89 27       	eor	r24, r25
     b02:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <eastContracted>
     b06:	08 95       	ret
     b08:	63 e8       	ldi	r22, 0x83	; 131
     b0a:	73 e0       	ldi	r23, 0x03	; 3
     b0c:	85 e2       	ldi	r24, 0x25	; 37
     b0e:	95 e0       	ldi	r25, 0x05	; 5
     b10:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     b14:	6e ee       	ldi	r22, 0xEE	; 238
     b16:	72 e0       	ldi	r23, 0x02	; 2
     b18:	8b e1       	ldi	r24, 0x1B	; 27
     b1a:	95 e0       	ldi	r25, 0x05	; 5
     b1c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     b20:	6b e9       	ldi	r22, 0x9B	; 155
     b22:	73 e0       	ldi	r23, 0x03	; 3
     b24:	e6 cf       	rjmp	.-52     	; 0xaf2 <FuncToggleEastServoTask+0x24>

00000b26 <FuncToggleWestServoTask>:
     b26:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
     b2a:	88 23       	and	r24, r24
     b2c:	c9 f0       	breq	.+50     	; 0xb60 <FuncToggleWestServoTask+0x3a>
     b2e:	62 eb       	ldi	r22, 0xB2	; 178
     b30:	73 e0       	ldi	r23, 0x03	; 3
     b32:	85 e2       	ldi	r24, 0x25	; 37
     b34:	95 e0       	ldi	r25, 0x05	; 5
     b36:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     b3a:	6a ec       	ldi	r22, 0xCA	; 202
     b3c:	78 e0       	ldi	r23, 0x08	; 8
     b3e:	8a e1       	ldi	r24, 0x1A	; 26
     b40:	95 e0       	ldi	r25, 0x05	; 5
     b42:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     b46:	66 ec       	ldi	r22, 0xC6	; 198
     b48:	73 e0       	ldi	r23, 0x03	; 3
     b4a:	85 e2       	ldi	r24, 0x25	; 37
     b4c:	95 e0       	ldi	r25, 0x05	; 5
     b4e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     b52:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	89 27       	eor	r24, r25
     b5a:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <westContracted>
     b5e:	08 95       	ret
     b60:	69 ed       	ldi	r22, 0xD9	; 217
     b62:	73 e0       	ldi	r23, 0x03	; 3
     b64:	85 e2       	ldi	r24, 0x25	; 37
     b66:	95 e0       	ldi	r25, 0x05	; 5
     b68:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     b6c:	6e ee       	ldi	r22, 0xEE	; 238
     b6e:	72 e0       	ldi	r23, 0x02	; 2
     b70:	8a e1       	ldi	r24, 0x1A	; 26
     b72:	95 e0       	ldi	r25, 0x05	; 5
     b74:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     b78:	6b e9       	ldi	r22, 0x9B	; 155
     b7a:	73 e0       	ldi	r23, 0x03	; 3
     b7c:	e6 cf       	rjmp	.-52     	; 0xb4a <FuncToggleWestServoTask+0x24>

00000b7e <FuncToggleServoTask>:
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	00 d0       	rcall	.+0      	; 0xb84 <FuncToggleServoTask+0x6>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	11 e0       	ldi	r17, 0x01	; 1
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 45 10 	call	0x208a	; 0x208a <WaitEvent>
     b92:	be 01       	movw	r22, r28
     b94:	6f 5f       	subi	r22, 0xFF	; 255
     b96:	7f 4f       	sbci	r23, 0xFF	; 255
     b98:	86 e0       	ldi	r24, 0x06	; 6
     b9a:	0e 94 60 11 	call	0x22c0	; 0x22c0 <GetEvent>
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	81 ff       	sbrs	r24, 1
     ba2:	1f c0       	rjmp	.+62     	; 0xbe2 <FuncToggleServoTask+0x64>
     ba4:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
     ba8:	88 23       	and	r24, r24
     baa:	f1 f1       	breq	.+124    	; 0xc28 <FuncToggleServoTask+0xaa>
     bac:	6c e5       	ldi	r22, 0x5C	; 92
     bae:	73 e0       	ldi	r23, 0x03	; 3
     bb0:	85 e2       	ldi	r24, 0x25	; 37
     bb2:	95 e0       	ldi	r25, 0x05	; 5
     bb4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     bb8:	6a ec       	ldi	r22, 0xCA	; 202
     bba:	78 e0       	ldi	r23, 0x08	; 8
     bbc:	8b e1       	ldi	r24, 0x1B	; 27
     bbe:	95 e0       	ldi	r25, 0x05	; 5
     bc0:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     bc4:	60 e7       	ldi	r22, 0x70	; 112
     bc6:	73 e0       	ldi	r23, 0x03	; 3
     bc8:	85 e2       	ldi	r24, 0x25	; 37
     bca:	95 e0       	ldi	r25, 0x05	; 5
     bcc:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     bd0:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
     bd4:	81 27       	eor	r24, r17
     bd6:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <eastContracted>
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 d5 11 	call	0x23aa	; 0x23aa <ClearEvent>
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	80 ff       	sbrs	r24, 0
     be6:	d1 cf       	rjmp	.-94     	; 0xb8a <FuncToggleServoTask+0xc>
     be8:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
     bec:	88 23       	and	r24, r24
     bee:	59 f1       	breq	.+86     	; 0xc46 <FuncToggleServoTask+0xc8>
     bf0:	62 eb       	ldi	r22, 0xB2	; 178
     bf2:	73 e0       	ldi	r23, 0x03	; 3
     bf4:	85 e2       	ldi	r24, 0x25	; 37
     bf6:	95 e0       	ldi	r25, 0x05	; 5
     bf8:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     bfc:	6a ec       	ldi	r22, 0xCA	; 202
     bfe:	78 e0       	ldi	r23, 0x08	; 8
     c00:	8a e1       	ldi	r24, 0x1A	; 26
     c02:	95 e0       	ldi	r25, 0x05	; 5
     c04:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     c08:	66 ec       	ldi	r22, 0xC6	; 198
     c0a:	73 e0       	ldi	r23, 0x03	; 3
     c0c:	85 e2       	ldi	r24, 0x25	; 37
     c0e:	95 e0       	ldi	r25, 0x05	; 5
     c10:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     c14:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
     c18:	81 27       	eor	r24, r17
     c1a:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <westContracted>
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 d5 11 	call	0x23aa	; 0x23aa <ClearEvent>
     c26:	b1 cf       	rjmp	.-158    	; 0xb8a <FuncToggleServoTask+0xc>
     c28:	63 e8       	ldi	r22, 0x83	; 131
     c2a:	73 e0       	ldi	r23, 0x03	; 3
     c2c:	85 e2       	ldi	r24, 0x25	; 37
     c2e:	95 e0       	ldi	r25, 0x05	; 5
     c30:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     c34:	6e ee       	ldi	r22, 0xEE	; 238
     c36:	72 e0       	ldi	r23, 0x02	; 2
     c38:	8b e1       	ldi	r24, 0x1B	; 27
     c3a:	95 e0       	ldi	r25, 0x05	; 5
     c3c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     c40:	6b e9       	ldi	r22, 0x9B	; 155
     c42:	73 e0       	ldi	r23, 0x03	; 3
     c44:	c1 cf       	rjmp	.-126    	; 0xbc8 <FuncToggleServoTask+0x4a>
     c46:	69 ed       	ldi	r22, 0xD9	; 217
     c48:	73 e0       	ldi	r23, 0x03	; 3
     c4a:	85 e2       	ldi	r24, 0x25	; 37
     c4c:	95 e0       	ldi	r25, 0x05	; 5
     c4e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN5Print7printlnEPKc>
     c52:	6e ee       	ldi	r22, 0xEE	; 238
     c54:	72 e0       	ldi	r23, 0x02	; 2
     c56:	8a e1       	ldi	r24, 0x1A	; 26
     c58:	95 e0       	ldi	r25, 0x05	; 5
     c5a:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11ServoTimer25writeEi>
     c5e:	6b e9       	ldi	r22, 0x9B	; 155
     c60:	73 e0       	ldi	r23, 0x03	; 3
     c62:	d4 cf       	rjmp	.-88     	; 0xc0c <FuncToggleServoTask+0x8e>

00000c64 <FuncDisplayTask>:
     c64:	8f 92       	push	r8
     c66:	9f 92       	push	r9
     c68:	af 92       	push	r10
     c6a:	bf 92       	push	r11
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	64 97       	sbiw	r28, 0x14	; 20
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	95 e0       	ldi	r25, 0x05	; 5
     c94:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     c98:	80 90 e6 04 	lds	r8, 0x04E6	; 0x8004e6 <avgEast>
     c9c:	90 90 e7 04 	lds	r9, 0x04E7	; 0x8004e7 <avgEast+0x1>
     ca0:	a0 90 e8 04 	lds	r10, 0x04E8	; 0x8004e8 <avgEast+0x2>
     ca4:	b0 90 e9 04 	lds	r11, 0x04E9	; 0x8004e9 <avgEast+0x3>
     ca8:	c0 90 e2 04 	lds	r12, 0x04E2	; 0x8004e2 <avgWest>
     cac:	d0 90 e3 04 	lds	r13, 0x04E3	; 0x8004e3 <avgWest+0x1>
     cb0:	e0 90 e4 04 	lds	r14, 0x04E4	; 0x8004e4 <avgWest+0x2>
     cb4:	f0 90 e5 04 	lds	r15, 0x04E5	; 0x8004e5 <avgWest+0x3>
     cb8:	c5 01       	movw	r24, r10
     cba:	b4 01       	movw	r22, r8
     cbc:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__fixsfsi>
     cc0:	7f 93       	push	r23
     cc2:	6f 93       	push	r22
     cc4:	a7 01       	movw	r20, r14
     cc6:	96 01       	movw	r18, r12
     cc8:	c5 01       	movw	r24, r10
     cca:	b4 01       	movw	r22, r8
     ccc:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	5f e3       	ldi	r21, 0x3F	; 63
     cd8:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     cdc:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__fixsfsi>
     ce0:	7f 93       	push	r23
     ce2:	6f 93       	push	r22
     ce4:	c7 01       	movw	r24, r14
     ce6:	b6 01       	movw	r22, r12
     ce8:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__fixsfsi>
     cec:	7f 93       	push	r23
     cee:	6f 93       	push	r22
     cf0:	89 ef       	ldi	r24, 0xF9	; 249
     cf2:	93 e0       	ldi	r25, 0x03	; 3
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	8e 01       	movw	r16, r28
     cfa:	0f 5f       	subi	r16, 0xFF	; 255
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	1f 93       	push	r17
     d00:	0f 93       	push	r16
     d02:	0e 94 87 1b 	call	0x370e	; 0x370e <sprintf>
     d06:	b8 01       	movw	r22, r16
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	95 e0       	ldi	r25, 0x05	; 5
     d0c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	95 e0       	ldi	r25, 0x05	; 5
     d18:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
     d2a:	25 ef       	ldi	r18, 0xF5	; 245
     d2c:	33 e0       	ldi	r19, 0x03	; 3
     d2e:	88 23       	and	r24, r24
     d30:	11 f0       	breq	.+4      	; 0xd36 <FuncDisplayTask+0xd2>
     d32:	21 ef       	ldi	r18, 0xF1	; 241
     d34:	33 e0       	ldi	r19, 0x03	; 3
     d36:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
     d3a:	81 11       	cpse	r24, r1
     d3c:	89 c0       	rjmp	.+274    	; 0xe50 <FuncDisplayTask+0x1ec>
     d3e:	85 ef       	ldi	r24, 0xF5	; 245
     d40:	93 e0       	ldi	r25, 0x03	; 3
     d42:	3f 93       	push	r19
     d44:	2f 93       	push	r18
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	8e e0       	ldi	r24, 0x0E	; 14
     d4c:	94 e0       	ldi	r25, 0x04	; 4
     d4e:	9f 93       	push	r25
     d50:	8f 93       	push	r24
     d52:	1f 93       	push	r17
     d54:	0f 93       	push	r16
     d56:	0e 94 87 1b 	call	0x370e	; 0x370e <sprintf>
     d5a:	b8 01       	movw	r22, r16
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	95 e0       	ldi	r25, 0x05	; 5
     d60:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     d64:	42 e0       	ldi	r20, 0x02	; 2
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	95 e0       	ldi	r25, 0x05	; 5
     d6c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	0e 94 c9 0a 	call	0x1592	; 0x1592 <digitalRead>
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	89 2b       	or	r24, r25
     d82:	09 f0       	breq	.+2      	; 0xd86 <FuncDisplayTask+0x122>
     d84:	68 c0       	rjmp	.+208    	; 0xe56 <FuncDisplayTask+0x1f2>
     d86:	91 ef       	ldi	r25, 0xF1	; 241
     d88:	e9 2e       	mov	r14, r25
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	f9 2e       	mov	r15, r25
     d8e:	87 e0       	ldi	r24, 0x07	; 7
     d90:	0e 94 c9 0a 	call	0x1592	; 0x1592 <digitalRead>
     d94:	89 2b       	or	r24, r25
     d96:	09 f0       	breq	.+2      	; 0xd9a <FuncDisplayTask+0x136>
     d98:	63 c0       	rjmp	.+198    	; 0xe60 <FuncDisplayTask+0x1fc>
     d9a:	81 ef       	ldi	r24, 0xF1	; 241
     d9c:	93 e0       	ldi	r25, 0x03	; 3
     d9e:	ff 92       	push	r15
     da0:	ef 92       	push	r14
     da2:	9f 93       	push	r25
     da4:	8f 93       	push	r24
     da6:	80 e2       	ldi	r24, 0x20	; 32
     da8:	94 e0       	ldi	r25, 0x04	; 4
     daa:	9f 93       	push	r25
     dac:	8f 93       	push	r24
     dae:	1f 93       	push	r17
     db0:	0f 93       	push	r16
     db2:	0e 94 87 1b 	call	0x370e	; 0x370e <sprintf>
     db6:	b8 01       	movw	r22, r16
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	95 e0       	ldi	r25, 0x05	; 5
     dbc:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <isNewTime>
     dce:	88 23       	and	r24, r24
     dd0:	51 f1       	breq	.+84     	; 0xe26 <FuncDisplayTask+0x1c2>
     dd2:	43 e0       	ldi	r20, 0x03	; 3
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	95 e0       	ldi	r25, 0x05	; 5
     dda:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     dde:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <second+0x1>
     de2:	8f 93       	push	r24
     de4:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <second>
     de8:	8f 93       	push	r24
     dea:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <minute+0x1>
     dee:	8f 93       	push	r24
     df0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <minute>
     df4:	8f 93       	push	r24
     df6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <hour+0x1>
     dfa:	8f 93       	push	r24
     dfc:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <hour>
     e00:	8f 93       	push	r24
     e02:	82 e3       	ldi	r24, 0x32	; 50
     e04:	94 e0       	ldi	r25, 0x04	; 4
     e06:	9f 93       	push	r25
     e08:	8f 93       	push	r24
     e0a:	1f 93       	push	r17
     e0c:	0f 93       	push	r16
     e0e:	0e 94 87 1b 	call	0x370e	; 0x370e <sprintf>
     e12:	b8 01       	movw	r22, r16
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	95 e0       	ldi	r25, 0x05	; 5
     e18:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	0e 94 13 10 	call	0x2026	; 0x2026 <TerminateTask>
     e2a:	64 96       	adiw	r28, 0x14	; 20
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	9f 90       	pop	r9
     e4c:	8f 90       	pop	r8
     e4e:	08 95       	ret
     e50:	81 ef       	ldi	r24, 0xF1	; 241
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	76 cf       	rjmp	.-276    	; 0xd42 <FuncDisplayTask+0xde>
     e56:	85 ef       	ldi	r24, 0xF5	; 245
     e58:	e8 2e       	mov	r14, r24
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	f8 2e       	mov	r15, r24
     e5e:	97 cf       	rjmp	.-210    	; 0xd8e <FuncDisplayTask+0x12a>
     e60:	85 ef       	ldi	r24, 0xF5	; 245
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	9c cf       	rjmp	.-200    	; 0xd9e <FuncDisplayTask+0x13a>

00000e66 <getLux>:
     e66:	cf 92       	push	r12
     e68:	df 92       	push	r13
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	bc 01       	movw	r22, r24
     e70:	99 0f       	add	r25, r25
     e72:	88 0b       	sbc	r24, r24
     e74:	99 0b       	sbc	r25, r25
     e76:	0e 94 b3 18 	call	0x3166	; 0x3166 <__floatsisf>
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 ec       	ldi	r19, 0xC0	; 192
     e7e:	4f e7       	ldi	r20, 0x7F	; 127
     e80:	54 e4       	ldi	r21, 0x44	; 68
     e82:	0e 94 09 18 	call	0x3012	; 0x3012 <__divsf3>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 ea       	ldi	r20, 0xA0	; 160
     e8c:	50 e4       	ldi	r21, 0x40	; 64
     e8e:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     e92:	6b 01       	movw	r12, r22
     e94:	7c 01       	movw	r14, r24
     e96:	ac 01       	movw	r20, r24
     e98:	9b 01       	movw	r18, r22
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 ea       	ldi	r24, 0xA0	; 160
     ea0:	90 e4       	ldi	r25, 0x40	; 64
     ea2:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
     ea6:	a7 01       	movw	r20, r14
     ea8:	96 01       	movw	r18, r12
     eaa:	0e 94 09 18 	call	0x3012	; 0x3012 <__divsf3>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e4       	ldi	r19, 0x40	; 64
     eb2:	4c e9       	ldi	r20, 0x9C	; 156
     eb4:	55 e4       	ldi	r21, 0x45	; 69
     eb6:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     eba:	22 ec       	ldi	r18, 0xC2	; 194
     ebc:	3f e2       	ldi	r19, 0x2F	; 47
     ebe:	45 e9       	ldi	r20, 0x95	; 149
     ec0:	5f eb       	ldi	r21, 0xBF	; 191
     ec2:	0e 94 d5 19 	call	0x33aa	; 0x33aa <pow>
     ec6:	2e e1       	ldi	r18, 0x1E	; 30
     ec8:	38 e4       	ldi	r19, 0x48	; 72
     eca:	49 e5       	ldi	r20, 0x59	; 89
     ecc:	59 e4       	ldi	r21, 0x49	; 73
     ece:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	08 95       	ret

00000edc <FuncDetectTask>:
     edc:	cf 92       	push	r12
     ede:	df 92       	push	r13
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <countEast>
     eec:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <countEast+0x1>
     ef0:	04 97       	sbiw	r24, 0x04	; 4
     ef2:	0c f0       	brlt	.+2      	; 0xef6 <FuncDetectTask+0x1a>
     ef4:	5d c0       	rjmp	.+186    	; 0xfb0 <FuncDetectTask+0xd4>
     ef6:	6a e4       	ldi	r22, 0x4A	; 74
     ef8:	74 e0       	ldi	r23, 0x04	; 4
     efa:	85 e2       	ldi	r24, 0x25	; 37
     efc:	95 e0       	ldi	r25, 0x05	; 5
     efe:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     f02:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <countEast>
     f06:	f0 91 df 04 	lds	r31, 0x04DF	; 0x8004df <countEast+0x1>
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	e8 55       	subi	r30, 0x58	; 88
     f10:	fe 4f       	sbci	r31, 0xFE	; 254
     f12:	60 81       	ld	r22, Z
     f14:	71 81       	ldd	r23, Z+1	; 0x01
     f16:	4a e0       	ldi	r20, 0x0A	; 10
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	85 e2       	ldi	r24, 0x25	; 37
     f1c:	95 e0       	ldi	r25, 0x05	; 5
     f1e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN5Print7printlnEii>
     f22:	c0 91 de 04 	lds	r28, 0x04DE	; 0x8004de <countEast>
     f26:	d0 91 df 04 	lds	r29, 0x04DF	; 0x8004df <countEast+0x1>
     f2a:	83 e1       	ldi	r24, 0x13	; 19
     f2c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <analogRead>
     f30:	cc 0f       	add	r28, r28
     f32:	dd 1f       	adc	r29, r29
     f34:	c8 55       	subi	r28, 0x58	; 88
     f36:	de 4f       	sbci	r29, 0xFE	; 254
     f38:	99 83       	std	Y+1, r25	; 0x01
     f3a:	88 83       	st	Y, r24
     f3c:	c0 91 de 04 	lds	r28, 0x04DE	; 0x8004de <countEast>
     f40:	d0 91 df 04 	lds	r29, 0x04DF	; 0x8004df <countEast+0x1>
     f44:	fe 01       	movw	r30, r28
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	e8 55       	subi	r30, 0x58	; 88
     f4c:	fe 4f       	sbci	r31, 0xFE	; 254
     f4e:	80 81       	ld	r24, Z
     f50:	91 81       	ldd	r25, Z+1	; 0x01
     f52:	0e 94 33 07 	call	0xe66	; 0xe66 <getLux>
     f56:	cc 0f       	add	r28, r28
     f58:	dd 1f       	adc	r29, r29
     f5a:	cc 0f       	add	r28, r28
     f5c:	dd 1f       	adc	r29, r29
     f5e:	ca 50       	subi	r28, 0x0A	; 10
     f60:	db 4f       	sbci	r29, 0xFB	; 251
     f62:	68 83       	st	Y, r22
     f64:	79 83       	std	Y+1, r23	; 0x01
     f66:	8a 83       	std	Y+2, r24	; 0x02
     f68:	9b 83       	std	Y+3, r25	; 0x03
     f6a:	69 e5       	ldi	r22, 0x59	; 89
     f6c:	74 e0       	ldi	r23, 0x04	; 4
     f6e:	85 e2       	ldi	r24, 0x25	; 37
     f70:	95 e0       	ldi	r25, 0x05	; 5
     f72:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     f76:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <countEast>
     f7a:	f0 91 df 04 	lds	r31, 0x04DF	; 0x8004df <countEast+0x1>
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ea 50       	subi	r30, 0x0A	; 10
     f88:	fb 4f       	sbci	r31, 0xFB	; 251
     f8a:	40 81       	ld	r20, Z
     f8c:	51 81       	ldd	r21, Z+1	; 0x01
     f8e:	62 81       	ldd	r22, Z+2	; 0x02
     f90:	73 81       	ldd	r23, Z+3	; 0x03
     f92:	22 e0       	ldi	r18, 0x02	; 2
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	85 e2       	ldi	r24, 0x25	; 37
     f98:	95 e0       	ldi	r25, 0x05	; 5
     f9a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <_ZN5Print7printlnEdi>
     f9e:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <countEast>
     fa2:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <countEast+0x1>
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <countEast+0x1>
     fac:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <countEast>
     fb0:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <countWest>
     fb4:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <countWest+0x1>
     fb8:	04 97       	sbiw	r24, 0x04	; 4
     fba:	0c f0       	brlt	.+2      	; 0xfbe <FuncDetectTask+0xe2>
     fbc:	5d c0       	rjmp	.+186    	; 0x1078 <FuncDetectTask+0x19c>
     fbe:	64 e6       	ldi	r22, 0x64	; 100
     fc0:	74 e0       	ldi	r23, 0x04	; 4
     fc2:	85 e2       	ldi	r24, 0x25	; 37
     fc4:	95 e0       	ldi	r25, 0x05	; 5
     fc6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
     fca:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <countWest>
     fce:	f0 91 dd 04 	lds	r31, 0x04DD	; 0x8004dd <countWest+0x1>
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	ee 55       	subi	r30, 0x5E	; 94
     fd8:	fe 4f       	sbci	r31, 0xFE	; 254
     fda:	60 81       	ld	r22, Z
     fdc:	71 81       	ldd	r23, Z+1	; 0x01
     fde:	4a e0       	ldi	r20, 0x0A	; 10
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	85 e2       	ldi	r24, 0x25	; 37
     fe4:	95 e0       	ldi	r25, 0x05	; 5
     fe6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN5Print7printlnEii>
     fea:	c0 91 dc 04 	lds	r28, 0x04DC	; 0x8004dc <countWest>
     fee:	d0 91 dd 04 	lds	r29, 0x04DD	; 0x8004dd <countWest+0x1>
     ff2:	82 e1       	ldi	r24, 0x12	; 18
     ff4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <analogRead>
     ff8:	cc 0f       	add	r28, r28
     ffa:	dd 1f       	adc	r29, r29
     ffc:	ce 55       	subi	r28, 0x5E	; 94
     ffe:	de 4f       	sbci	r29, 0xFE	; 254
    1000:	99 83       	std	Y+1, r25	; 0x01
    1002:	88 83       	st	Y, r24
    1004:	c0 91 dc 04 	lds	r28, 0x04DC	; 0x8004dc <countWest>
    1008:	d0 91 dd 04 	lds	r29, 0x04DD	; 0x8004dd <countWest+0x1>
    100c:	fe 01       	movw	r30, r28
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	ee 55       	subi	r30, 0x5E	; 94
    1014:	fe 4f       	sbci	r31, 0xFE	; 254
    1016:	80 81       	ld	r24, Z
    1018:	91 81       	ldd	r25, Z+1	; 0x01
    101a:	0e 94 33 07 	call	0xe66	; 0xe66 <getLux>
    101e:	cc 0f       	add	r28, r28
    1020:	dd 1f       	adc	r29, r29
    1022:	cc 0f       	add	r28, r28
    1024:	dd 1f       	adc	r29, r29
    1026:	c6 51       	subi	r28, 0x16	; 22
    1028:	db 4f       	sbci	r29, 0xFB	; 251
    102a:	68 83       	st	Y, r22
    102c:	79 83       	std	Y+1, r23	; 0x01
    102e:	8a 83       	std	Y+2, r24	; 0x02
    1030:	9b 83       	std	Y+3, r25	; 0x03
    1032:	63 e7       	ldi	r22, 0x73	; 115
    1034:	74 e0       	ldi	r23, 0x04	; 4
    1036:	85 e2       	ldi	r24, 0x25	; 37
    1038:	95 e0       	ldi	r25, 0x05	; 5
    103a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
    103e:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <countWest>
    1042:	f0 91 dd 04 	lds	r31, 0x04DD	; 0x8004dd <countWest+0x1>
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	e6 51       	subi	r30, 0x16	; 22
    1050:	fb 4f       	sbci	r31, 0xFB	; 251
    1052:	40 81       	ld	r20, Z
    1054:	51 81       	ldd	r21, Z+1	; 0x01
    1056:	62 81       	ldd	r22, Z+2	; 0x02
    1058:	73 81       	ldd	r23, Z+3	; 0x03
    105a:	22 e0       	ldi	r18, 0x02	; 2
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	85 e2       	ldi	r24, 0x25	; 37
    1060:	95 e0       	ldi	r25, 0x05	; 5
    1062:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <_ZN5Print7printlnEdi>
    1066:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <countWest>
    106a:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <countWest+0x1>
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <countWest+0x1>
    1074:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <countWest>
    1078:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <dataLuxEast+0x4>
    107c:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <dataLuxEast+0x5>
    1080:	40 91 fc 04 	lds	r20, 0x04FC	; 0x8004fc <dataLuxEast+0x6>
    1084:	50 91 fd 04 	lds	r21, 0x04FD	; 0x8004fd <dataLuxEast+0x7>
    1088:	60 91 f6 04 	lds	r22, 0x04F6	; 0x8004f6 <dataLuxEast>
    108c:	70 91 f7 04 	lds	r23, 0x04F7	; 0x8004f7 <dataLuxEast+0x1>
    1090:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <dataLuxEast+0x2>
    1094:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <dataLuxEast+0x3>
    1098:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    109c:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <dataLuxEast+0x8>
    10a0:	30 91 ff 04 	lds	r19, 0x04FF	; 0x8004ff <dataLuxEast+0x9>
    10a4:	40 91 00 05 	lds	r20, 0x0500	; 0x800500 <dataLuxEast+0xa>
    10a8:	50 91 01 05 	lds	r21, 0x0501	; 0x800501 <dataLuxEast+0xb>
    10ac:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e4       	ldi	r20, 0x40	; 64
    10b6:	50 e4       	ldi	r21, 0x40	; 64
    10b8:	0e 94 09 18 	call	0x3012	; 0x3012 <__divsf3>
    10bc:	60 93 e6 04 	sts	0x04E6, r22	; 0x8004e6 <avgEast>
    10c0:	70 93 e7 04 	sts	0x04E7, r23	; 0x8004e7 <avgEast+0x1>
    10c4:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <avgEast+0x2>
    10c8:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <avgEast+0x3>
    10cc:	6e e7       	ldi	r22, 0x7E	; 126
    10ce:	74 e0       	ldi	r23, 0x04	; 4
    10d0:	85 e2       	ldi	r24, 0x25	; 37
    10d2:	95 e0       	ldi	r25, 0x05	; 5
    10d4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
    10d8:	40 91 e6 04 	lds	r20, 0x04E6	; 0x8004e6 <avgEast>
    10dc:	50 91 e7 04 	lds	r21, 0x04E7	; 0x8004e7 <avgEast+0x1>
    10e0:	60 91 e8 04 	lds	r22, 0x04E8	; 0x8004e8 <avgEast+0x2>
    10e4:	70 91 e9 04 	lds	r23, 0x04E9	; 0x8004e9 <avgEast+0x3>
    10e8:	22 e0       	ldi	r18, 0x02	; 2
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	85 e2       	ldi	r24, 0x25	; 37
    10ee:	95 e0       	ldi	r25, 0x05	; 5
    10f0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <_ZN5Print7printlnEdi>
    10f4:	20 91 ee 04 	lds	r18, 0x04EE	; 0x8004ee <dataLuxWest+0x4>
    10f8:	30 91 ef 04 	lds	r19, 0x04EF	; 0x8004ef <dataLuxWest+0x5>
    10fc:	40 91 f0 04 	lds	r20, 0x04F0	; 0x8004f0 <dataLuxWest+0x6>
    1100:	50 91 f1 04 	lds	r21, 0x04F1	; 0x8004f1 <dataLuxWest+0x7>
    1104:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <dataLuxWest>
    1108:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <dataLuxWest+0x1>
    110c:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <dataLuxWest+0x2>
    1110:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <dataLuxWest+0x3>
    1114:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1118:	20 91 f2 04 	lds	r18, 0x04F2	; 0x8004f2 <dataLuxWest+0x8>
    111c:	30 91 f3 04 	lds	r19, 0x04F3	; 0x8004f3 <dataLuxWest+0x9>
    1120:	40 91 f4 04 	lds	r20, 0x04F4	; 0x8004f4 <dataLuxWest+0xa>
    1124:	50 91 f5 04 	lds	r21, 0x04F5	; 0x8004f5 <dataLuxWest+0xb>
    1128:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e4       	ldi	r20, 0x40	; 64
    1132:	50 e4       	ldi	r21, 0x40	; 64
    1134:	0e 94 09 18 	call	0x3012	; 0x3012 <__divsf3>
    1138:	60 93 e2 04 	sts	0x04E2, r22	; 0x8004e2 <avgWest>
    113c:	70 93 e3 04 	sts	0x04E3, r23	; 0x8004e3 <avgWest+0x1>
    1140:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <avgWest+0x2>
    1144:	90 93 e5 04 	sts	0x04E5, r25	; 0x8004e5 <avgWest+0x3>
    1148:	6d e8       	ldi	r22, 0x8D	; 141
    114a:	74 e0       	ldi	r23, 0x04	; 4
    114c:	85 e2       	ldi	r24, 0x25	; 37
    114e:	95 e0       	ldi	r25, 0x05	; 5
    1150:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN5Print5printEPKc>
    1154:	40 91 e2 04 	lds	r20, 0x04E2	; 0x8004e2 <avgWest>
    1158:	50 91 e3 04 	lds	r21, 0x04E3	; 0x8004e3 <avgWest+0x1>
    115c:	60 91 e4 04 	lds	r22, 0x04E4	; 0x8004e4 <avgWest+0x2>
    1160:	70 91 e5 04 	lds	r23, 0x04E5	; 0x8004e5 <avgWest+0x3>
    1164:	22 e0       	ldi	r18, 0x02	; 2
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	85 e2       	ldi	r24, 0x25	; 37
    116a:	95 e0       	ldi	r25, 0x05	; 5
    116c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <_ZN5Print7printlnEdi>
    1170:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <countEast>
    1174:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <countEast+0x1>
    1178:	03 97       	sbiw	r24, 0x03	; 3
    117a:	21 f4       	brne	.+8      	; 0x1184 <FuncDetectTask+0x2a8>
    117c:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <countEast+0x1>
    1180:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <countEast>
    1184:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <countWest>
    1188:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <countWest+0x1>
    118c:	03 97       	sbiw	r24, 0x03	; 3
    118e:	21 f4       	brne	.+8      	; 0x1198 <FuncDetectTask+0x2bc>
    1190:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <countWest+0x1>
    1194:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <countWest>
    1198:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <hour>
    119c:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <hour+0x1>
    11a0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <minute>
    11a4:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <minute+0x1>
    11a8:	22 31       	cpi	r18, 0x12	; 18
    11aa:	31 05       	cpc	r19, r1
    11ac:	0c f4       	brge	.+2      	; 0x11b0 <FuncDetectTask+0x2d4>
    11ae:	41 c0       	rjmp	.+130    	; 0x1232 <FuncDetectTask+0x356>
    11b0:	4e 97       	sbiw	r24, 0x1e	; 30
    11b2:	0c f0       	brlt	.+2      	; 0x11b6 <FuncDetectTask+0x2da>
    11b4:	43 c0       	rjmp	.+134    	; 0x123c <FuncDetectTask+0x360>
    11b6:	c0 90 e6 04 	lds	r12, 0x04E6	; 0x8004e6 <avgEast>
    11ba:	d0 90 e7 04 	lds	r13, 0x04E7	; 0x8004e7 <avgEast+0x1>
    11be:	e0 90 e8 04 	lds	r14, 0x04E8	; 0x8004e8 <avgEast+0x2>
    11c2:	f0 90 e9 04 	lds	r15, 0x04E9	; 0x8004e9 <avgEast+0x3>
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	4a ef       	ldi	r20, 0xFA	; 250
    11cc:	53 e4       	ldi	r21, 0x43	; 67
    11ce:	c7 01       	movw	r24, r14
    11d0:	b6 01       	movw	r22, r12
    11d2:	0e 94 04 18 	call	0x3008	; 0x3008 <__cmpsf2>
    11d6:	87 ff       	sbrs	r24, 7
    11d8:	68 c0       	rjmp	.+208    	; 0x12aa <FuncDetectTask+0x3ce>
    11da:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
    11de:	81 11       	cpse	r24, r1
    11e0:	84 c0       	rjmp	.+264    	; 0x12ea <FuncDetectTask+0x40e>
    11e2:	62 e0       	ldi	r22, 0x02	; 2
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	86 e0       	ldi	r24, 0x06	; 6
    11e8:	0e 94 cc 10 	call	0x2198	; 0x2198 <SetEvent>
    11ec:	c0 90 e2 04 	lds	r12, 0x04E2	; 0x8004e2 <avgWest>
    11f0:	d0 90 e3 04 	lds	r13, 0x04E3	; 0x8004e3 <avgWest+0x1>
    11f4:	e0 90 e4 04 	lds	r14, 0x04E4	; 0x8004e4 <avgWest+0x2>
    11f8:	f0 90 e5 04 	lds	r15, 0x04E5	; 0x8004e5 <avgWest+0x3>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a ef       	ldi	r20, 0xFA	; 250
    1202:	53 e4       	ldi	r21, 0x43	; 67
    1204:	c7 01       	movw	r24, r14
    1206:	b6 01       	movw	r22, r12
    1208:	0e 94 04 18 	call	0x3008	; 0x3008 <__cmpsf2>
    120c:	87 ff       	sbrs	r24, 7
    120e:	5d c0       	rjmp	.+186    	; 0x12ca <FuncDetectTask+0x3ee>
    1210:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
    1214:	81 11       	cpse	r24, r1
    1216:	74 c0       	rjmp	.+232    	; 0x1300 <FuncDetectTask+0x424>
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	86 e0       	ldi	r24, 0x06	; 6
    121e:	0e 94 cc 10 	call	0x2198	; 0x2198 <SetEvent>
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	0c 94 13 10 	jmp	0x2026	; 0x2026 <TerminateTask>
    1232:	28 30       	cpi	r18, 0x08	; 8
    1234:	31 05       	cpc	r19, r1
    1236:	b4 f5       	brge	.+108    	; 0x12a4 <FuncDetectTask+0x3c8>
    1238:	4e 97       	sbiw	r24, 0x1e	; 30
    123a:	34 f4       	brge	.+12     	; 0x1248 <FuncDetectTask+0x36c>
    123c:	61 e0       	ldi	r22, 0x01	; 1
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	2a c0       	rjmp	.+84     	; 0x129c <FuncDetectTask+0x3c0>
    1248:	27 30       	cpi	r18, 0x07	; 7
    124a:	31 05       	cpc	r19, r1
    124c:	09 f0       	breq	.+2      	; 0x1250 <FuncDetectTask+0x374>
    124e:	b3 cf       	rjmp	.-154    	; 0x11b6 <FuncDetectTask+0x2da>
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	48 e4       	ldi	r20, 0x48	; 72
    1256:	53 e4       	ldi	r21, 0x43	; 67
    1258:	60 91 e6 04 	lds	r22, 0x04E6	; 0x8004e6 <avgEast>
    125c:	70 91 e7 04 	lds	r23, 0x04E7	; 0x8004e7 <avgEast+0x1>
    1260:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <avgEast+0x2>
    1264:	90 91 e9 04 	lds	r25, 0x04E9	; 0x8004e9 <avgEast+0x3>
    1268:	0e 94 04 18 	call	0x3008	; 0x3008 <__cmpsf2>
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	18 16       	cp	r1, r24
    1270:	0c f4       	brge	.+2      	; 0x1274 <FuncDetectTask+0x398>
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	83 e0       	ldi	r24, 0x03	; 3
    1276:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	48 e4       	ldi	r20, 0x48	; 72
    1280:	53 e4       	ldi	r21, 0x43	; 67
    1282:	60 91 e2 04 	lds	r22, 0x04E2	; 0x8004e2 <avgWest>
    1286:	70 91 e3 04 	lds	r23, 0x04E3	; 0x8004e3 <avgWest+0x1>
    128a:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <avgWest+0x2>
    128e:	90 91 e5 04 	lds	r25, 0x04E5	; 0x8004e5 <avgWest+0x3>
    1292:	0e 94 04 18 	call	0x3008	; 0x3008 <__cmpsf2>
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	18 16       	cp	r1, r24
    129a:	a4 f6       	brge	.-88     	; 0x1244 <FuncDetectTask+0x368>
    129c:	87 e0       	ldi	r24, 0x07	; 7
    129e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <digitalWrite>
    12a2:	89 cf       	rjmp	.-238    	; 0x11b6 <FuncDetectTask+0x2da>
    12a4:	4e 97       	sbiw	r24, 0x1e	; 30
    12a6:	a4 f6       	brge	.-88     	; 0x1250 <FuncDetectTask+0x374>
    12a8:	86 cf       	rjmp	.-244    	; 0x11b6 <FuncDetectTask+0x2da>
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4a ef       	ldi	r20, 0xFA	; 250
    12b0:	53 e4       	ldi	r21, 0x43	; 67
    12b2:	c7 01       	movw	r24, r14
    12b4:	b6 01       	movw	r22, r12
    12b6:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__gesf2>
    12ba:	87 fd       	sbrc	r24, 7
    12bc:	97 cf       	rjmp	.-210    	; 0x11ec <FuncDetectTask+0x310>
    12be:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <eastContracted>
    12c2:	88 23       	and	r24, r24
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <FuncDetectTask+0x3ec>
    12c6:	92 cf       	rjmp	.-220    	; 0x11ec <FuncDetectTask+0x310>
    12c8:	8c cf       	rjmp	.-232    	; 0x11e2 <FuncDetectTask+0x306>
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	4a ef       	ldi	r20, 0xFA	; 250
    12d0:	53 e4       	ldi	r21, 0x43	; 67
    12d2:	c7 01       	movw	r24, r14
    12d4:	b6 01       	movw	r22, r12
    12d6:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__gesf2>
    12da:	87 fd       	sbrc	r24, 7
    12dc:	a2 cf       	rjmp	.-188    	; 0x1222 <FuncDetectTask+0x346>
    12de:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <westContracted>
    12e2:	88 23       	and	r24, r24
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <FuncDetectTask+0x40c>
    12e6:	9d cf       	rjmp	.-198    	; 0x1222 <FuncDetectTask+0x346>
    12e8:	97 cf       	rjmp	.-210    	; 0x1218 <FuncDetectTask+0x33c>
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	4a ef       	ldi	r20, 0xFA	; 250
    12f0:	53 e4       	ldi	r21, 0x43	; 67
    12f2:	c7 01       	movw	r24, r14
    12f4:	b6 01       	movw	r22, r12
    12f6:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__gesf2>
    12fa:	87 fd       	sbrc	r24, 7
    12fc:	77 cf       	rjmp	.-274    	; 0x11ec <FuncDetectTask+0x310>
    12fe:	71 cf       	rjmp	.-286    	; 0x11e2 <FuncDetectTask+0x306>
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a ef       	ldi	r20, 0xFA	; 250
    1306:	53 e4       	ldi	r21, 0x43	; 67
    1308:	c7 01       	movw	r24, r14
    130a:	b6 01       	movw	r22, r12
    130c:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__gesf2>
    1310:	87 fd       	sbrc	r24, 7
    1312:	87 cf       	rjmp	.-242    	; 0x1222 <FuncDetectTask+0x346>
    1314:	81 cf       	rjmp	.-254    	; 0x1218 <FuncDetectTask+0x33c>

00001316 <_GLOBAL__sub_I_eastServo>:
    1316:	cf 92       	push	r12
    1318:	ef 92       	push	r14
    131a:	0f 93       	push	r16
    131c:	8b e1       	ldi	r24, 0x1B	; 27
    131e:	95 e0       	ldi	r25, 0x05	; 5
    1320:	0e 94 9a 03 	call	0x734	; 0x734 <_ZN11ServoTimer2C1Ev>
    1324:	8a e1       	ldi	r24, 0x1A	; 26
    1326:	95 e0       	ldi	r25, 0x05	; 5
    1328:	0e 94 9a 03 	call	0x734	; 0x734 <_ZN11ServoTimer2C1Ev>
    132c:	8d e0       	ldi	r24, 0x0D	; 13
    132e:	c8 2e       	mov	r12, r24
    1330:	9c e0       	ldi	r25, 0x0C	; 12
    1332:	e9 2e       	mov	r14, r25
    1334:	0b e0       	ldi	r16, 0x0B	; 11
    1336:	2a e0       	ldi	r18, 0x0A	; 10
    1338:	49 e0       	ldi	r20, 0x09	; 9
    133a:	68 e0       	ldi	r22, 0x08	; 8
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	95 e0       	ldi	r25, 0x05	; 5
    1340:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN13LiquidCrystalC1Ehhhhhh>
    1344:	0f 91       	pop	r16
    1346:	ef 90       	pop	r14
    1348:	cf 90       	pop	r12
    134a:	08 95       	ret

0000134c <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    134c:	1f 92       	push	r1
    134e:	0f 92       	push	r0
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	0f 92       	push	r0
    1354:	11 24       	eor	r1, r1
    1356:	2f 93       	push	r18
    1358:	3f 93       	push	r19
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <timer0_millis>
    1366:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <timer0_millis+0x1>
    136a:	a0 91 1f 05 	lds	r26, 0x051F	; 0x80051f <timer0_millis+0x2>
    136e:	b0 91 20 05 	lds	r27, 0x0520	; 0x800520 <timer0_millis+0x3>
    1372:	30 91 1c 05 	lds	r19, 0x051C	; 0x80051c <timer0_fract>
    1376:	23 e0       	ldi	r18, 0x03	; 3
    1378:	23 0f       	add	r18, r19
    137a:	2d 37       	cpi	r18, 0x7D	; 125
    137c:	58 f5       	brcc	.+86     	; 0x13d4 <__vector_16+0x88>
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	a1 1d       	adc	r26, r1
    1382:	b1 1d       	adc	r27, r1
    1384:	20 93 1c 05 	sts	0x051C, r18	; 0x80051c <timer0_fract>
    1388:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <timer0_millis>
    138c:	90 93 1e 05 	sts	0x051E, r25	; 0x80051e <timer0_millis+0x1>
    1390:	a0 93 1f 05 	sts	0x051F, r26	; 0x80051f <timer0_millis+0x2>
    1394:	b0 93 20 05 	sts	0x0520, r27	; 0x800520 <timer0_millis+0x3>
    1398:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <timer0_overflow_count>
    139c:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <timer0_overflow_count+0x1>
    13a0:	a0 91 23 05 	lds	r26, 0x0523	; 0x800523 <timer0_overflow_count+0x2>
    13a4:	b0 91 24 05 	lds	r27, 0x0524	; 0x800524 <timer0_overflow_count+0x3>
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	a1 1d       	adc	r26, r1
    13ac:	b1 1d       	adc	r27, r1
    13ae:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <timer0_overflow_count>
    13b2:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <timer0_overflow_count+0x1>
    13b6:	a0 93 23 05 	sts	0x0523, r26	; 0x800523 <timer0_overflow_count+0x2>
    13ba:	b0 93 24 05 	sts	0x0524, r27	; 0x800524 <timer0_overflow_count+0x3>
    13be:	bf 91       	pop	r27
    13c0:	af 91       	pop	r26
    13c2:	9f 91       	pop	r25
    13c4:	8f 91       	pop	r24
    13c6:	3f 91       	pop	r19
    13c8:	2f 91       	pop	r18
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti
    13d4:	26 e8       	ldi	r18, 0x86	; 134
    13d6:	23 0f       	add	r18, r19
    13d8:	02 96       	adiw	r24, 0x02	; 2
    13da:	a1 1d       	adc	r26, r1
    13dc:	b1 1d       	adc	r27, r1
    13de:	d2 cf       	rjmp	.-92     	; 0x1384 <__vector_16+0x38>

000013e0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	91 05       	cpc	r25, r1
    13e4:	38 f0       	brcs	.+14     	; 0x13f4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    13ee:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <delayMicroseconds+0x10>
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
    13f4:	08 95       	ret

000013f6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    13f6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    13f8:	84 b5       	in	r24, 0x24	; 36
    13fa:	82 60       	ori	r24, 0x02	; 2
    13fc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    13fe:	84 b5       	in	r24, 0x24	; 36
    1400:	81 60       	ori	r24, 0x01	; 1
    1402:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1404:	85 b5       	in	r24, 0x25	; 37
    1406:	82 60       	ori	r24, 0x02	; 2
    1408:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    140a:	85 b5       	in	r24, 0x25	; 37
    140c:	81 60       	ori	r24, 0x01	; 1
    140e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1410:	ee e6       	ldi	r30, 0x6E	; 110
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	81 60       	ori	r24, 0x01	; 1
    1418:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    141a:	e1 e8       	ldi	r30, 0x81	; 129
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1420:	80 81       	ld	r24, Z
    1422:	82 60       	ori	r24, 0x02	; 2
    1424:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1426:	80 81       	ld	r24, Z
    1428:	81 60       	ori	r24, 0x01	; 1
    142a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    142c:	e0 e8       	ldi	r30, 0x80	; 128
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	81 60       	ori	r24, 0x01	; 1
    1434:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1436:	e1 eb       	ldi	r30, 0xB1	; 177
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	84 60       	ori	r24, 0x04	; 4
    143e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1440:	e0 eb       	ldi	r30, 0xB0	; 176
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	81 60       	ori	r24, 0x01	; 1
    1448:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    144a:	ea e7       	ldi	r30, 0x7A	; 122
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	84 60       	ori	r24, 0x04	; 4
    1452:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1454:	80 81       	ld	r24, Z
    1456:	82 60       	ori	r24, 0x02	; 2
    1458:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    145a:	80 81       	ld	r24, Z
    145c:	81 60       	ori	r24, 0x01	; 1
    145e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1460:	80 81       	ld	r24, Z
    1462:	80 68       	ori	r24, 0x80	; 128
    1464:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1466:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
#endif
}
    146a:	08 95       	ret

0000146c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    146c:	83 30       	cpi	r24, 0x03	; 3
    146e:	81 f0       	breq	.+32     	; 0x1490 <turnOffPWM+0x24>
    1470:	28 f4       	brcc	.+10     	; 0x147c <turnOffPWM+0x10>
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	99 f0       	breq	.+38     	; 0x149c <turnOffPWM+0x30>
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	a9 f0       	breq	.+42     	; 0x14a4 <turnOffPWM+0x38>
    147a:	08 95       	ret
    147c:	87 30       	cpi	r24, 0x07	; 7
    147e:	a9 f0       	breq	.+42     	; 0x14aa <turnOffPWM+0x3e>
    1480:	88 30       	cpi	r24, 0x08	; 8
    1482:	c9 f0       	breq	.+50     	; 0x14b6 <turnOffPWM+0x4a>
    1484:	84 30       	cpi	r24, 0x04	; 4
    1486:	b1 f4       	brne	.+44     	; 0x14b4 <turnOffPWM+0x48>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1488:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    148c:	8f 7d       	andi	r24, 0xDF	; 223
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1490:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1494:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1496:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    149a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    149c:	84 b5       	in	r24, 0x24	; 36
    149e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    14a0:	84 bd       	out	0x24, r24	; 36
    14a2:	08 95       	ret
    14a4:	84 b5       	in	r24, 0x24	; 36
    14a6:	8f 7d       	andi	r24, 0xDF	; 223
    14a8:	fb cf       	rjmp	.-10     	; 0x14a0 <turnOffPWM+0x34>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    14aa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    14ae:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    14b0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
    14b4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    14b6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    14ba:	8f 7d       	andi	r24, 0xDF	; 223
    14bc:	f9 cf       	rjmp	.-14     	; 0x14b0 <turnOffPWM+0x44>

000014be <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	fc 01       	movw	r30, r24
    14c6:	e2 50       	subi	r30, 0x02	; 2
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    14cc:	8e 5e       	subi	r24, 0xEE	; 238
    14ce:	9e 4f       	sbci	r25, 0xFE	; 254
    14d0:	fc 01       	movw	r30, r24
    14d2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    14d4:	88 23       	and	r24, r24
    14d6:	c9 f0       	breq	.+50     	; 0x150a <pinMode+0x4c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	fc 01       	movw	r30, r24
    14e0:	e6 5c       	subi	r30, 0xC6	; 198
    14e2:	fe 4f       	sbci	r31, 0xFE	; 254
    14e4:	a5 91       	lpm	r26, Z+
    14e6:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    14e8:	fc 01       	movw	r30, r24
    14ea:	e0 5d       	subi	r30, 0xD0	; 208
    14ec:	fe 4f       	sbci	r31, 0xFE	; 254
    14ee:	c5 91       	lpm	r28, Z+
    14f0:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    14f2:	61 11       	cpse	r22, r1
    14f4:	0d c0       	rjmp	.+26     	; 0x1510 <pinMode+0x52>
		uint8_t oldSREG = SREG;
    14f6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    14f8:	f8 94       	cli
		*reg &= ~bit;
    14fa:	8c 91       	ld	r24, X
    14fc:	20 95       	com	r18
    14fe:	82 23       	and	r24, r18
    1500:	8c 93       	st	X, r24
		*out &= ~bit;
    1502:	88 81       	ld	r24, Y
    1504:	28 23       	and	r18, r24
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out |= bit;
    1506:	28 83       	st	Y, r18
		SREG = oldSREG;
    1508:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	08 95       	ret
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1510:	62 30       	cpi	r22, 0x02	; 2
    1512:	51 f4       	brne	.+20     	; 0x1528 <pinMode+0x6a>
		uint8_t oldSREG = SREG;
    1514:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1516:	f8 94       	cli
		*reg &= ~bit;
    1518:	3c 91       	ld	r19, X
    151a:	82 2f       	mov	r24, r18
    151c:	80 95       	com	r24
    151e:	83 23       	and	r24, r19
    1520:	8c 93       	st	X, r24
		*out |= bit;
    1522:	e8 81       	ld	r30, Y
    1524:	2e 2b       	or	r18, r30
    1526:	ef cf       	rjmp	.-34     	; 0x1506 <pinMode+0x48>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    1528:	8f b7       	in	r24, 0x3f	; 63
                cli();
    152a:	f8 94       	cli
		*reg |= bit;
    152c:	ec 91       	ld	r30, X
    152e:	2e 2b       	or	r18, r30
    1530:	2c 93       	st	X, r18
		SREG = oldSREG;
    1532:	8f bf       	out	0x3f, r24	; 63
    1534:	ea cf       	rjmp	.-44     	; 0x150a <pinMode+0x4c>

00001536 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	f9 01       	movw	r30, r18
    1542:	e6 51       	subi	r30, 0x16	; 22
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1548:	f9 01       	movw	r30, r18
    154a:	e2 50       	subi	r30, 0x02	; 2
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1550:	f9 01       	movw	r30, r18
    1552:	ee 5e       	subi	r30, 0xEE	; 238
    1554:	fe 4f       	sbci	r31, 0xFE	; 254
    1556:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1558:	cc 23       	and	r28, r28
    155a:	a9 f0       	breq	.+42     	; 0x1586 <digitalWrite+0x50>
    155c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    155e:	81 11       	cpse	r24, r1
    1560:	0e 94 36 0a 	call	0x146c	; 0x146c <turnOffPWM>

	out = portOutputRegister(port);
    1564:	ec 2f       	mov	r30, r28
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	ee 0f       	add	r30, r30
    156a:	ff 1f       	adc	r31, r31
    156c:	e0 5d       	subi	r30, 0xD0	; 208
    156e:	fe 4f       	sbci	r31, 0xFE	; 254
    1570:	a5 91       	lpm	r26, Z+
    1572:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1574:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1576:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    1578:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    157a:	11 11       	cpse	r17, r1
    157c:	08 c0       	rjmp	.+16     	; 0x158e <digitalWrite+0x58>
		*out &= ~bit;
    157e:	d0 95       	com	r29
    1580:	de 23       	and	r29, r30
	} else {
		*out |= bit;
    1582:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1584:	8f bf       	out	0x3f, r24	; 63
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	08 95       	ret
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
    158e:	de 2b       	or	r29, r30
    1590:	f8 cf       	rjmp	.-16     	; 0x1582 <digitalWrite+0x4c>

00001592 <digitalRead>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	f9 01       	movw	r30, r18
    159c:	e6 51       	subi	r30, 0x16	; 22
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    15a2:	f9 01       	movw	r30, r18
    15a4:	e2 50       	subi	r30, 0x02	; 2
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    15aa:	f9 01       	movw	r30, r18
    15ac:	ee 5e       	subi	r30, 0xEE	; 238
    15ae:	fe 4f       	sbci	r31, 0xFE	; 254
    15b0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    15b2:	cc 23       	and	r28, r28
    15b4:	a1 f0       	breq	.+40     	; 0x15de <digitalRead+0x4c>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    15b6:	81 11       	cpse	r24, r1
    15b8:	0e 94 36 0a 	call	0x146c	; 0x146c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    15bc:	ec 2f       	mov	r30, r28
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	ea 5d       	subi	r30, 0xDA	; 218
    15c6:	fe 4f       	sbci	r31, 0xFE	; 254
    15c8:	a5 91       	lpm	r26, Z+
    15ca:	b4 91       	lpm	r27, Z
    15cc:	ec 91       	ld	r30, X
    15ce:	ed 23       	and	r30, r29
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <digitalRead+0x46>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
	return LOW;
}
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	08 95       	ret
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	fa cf       	rjmp	.-12     	; 0x15d8 <digitalRead+0x46>

000015e4 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    15e4:	8e 30       	cpi	r24, 0x0E	; 14
    15e6:	08 f0       	brcs	.+2      	; 0x15ea <analogRead+0x6>
    15e8:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    15ea:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <analog_reference>
    15ee:	90 e4       	ldi	r25, 0x40	; 64
    15f0:	29 9f       	mul	r18, r25
    15f2:	90 01       	movw	r18, r0
    15f4:	11 24       	eor	r1, r1
    15f6:	87 70       	andi	r24, 0x07	; 7
    15f8:	82 2b       	or	r24, r18
    15fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    15fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1602:	80 64       	ori	r24, 0x40	; 64
    1604:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1608:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    160c:	86 fd       	sbrc	r24, 6
    160e:	fc cf       	rjmp	.-8      	; 0x1608 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1610:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    1614:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    1618:	08 95       	ret

0000161a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    161a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    161c:	91 8d       	ldd	r25, Z+25	; 0x19
    161e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1620:	89 2f       	mov	r24, r25
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	80 5c       	subi	r24, 0xC0	; 192
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	82 1b       	sub	r24, r18
    162a:	91 09       	sbc	r25, r1
}
    162c:	8f 73       	andi	r24, 0x3F	; 63
    162e:	99 27       	eor	r25, r25
    1630:	08 95       	ret

00001632 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1632:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1634:	91 8d       	ldd	r25, Z+25	; 0x19
    1636:	82 8d       	ldd	r24, Z+26	; 0x1a
    1638:	98 17       	cp	r25, r24
    163a:	31 f0       	breq	.+12     	; 0x1648 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    163c:	82 8d       	ldd	r24, Z+26	; 0x1a
    163e:	e8 0f       	add	r30, r24
    1640:	f1 1d       	adc	r31, r1
    1642:	85 8d       	ldd	r24, Z+29	; 0x1d
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    164c:	08 95       	ret

0000164e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    164e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1650:	91 8d       	ldd	r25, Z+25	; 0x19
    1652:	82 8d       	ldd	r24, Z+26	; 0x1a
    1654:	98 17       	cp	r25, r24
    1656:	61 f0       	breq	.+24     	; 0x1670 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1658:	a2 8d       	ldd	r26, Z+26	; 0x1a
    165a:	ae 0f       	add	r26, r30
    165c:	bf 2f       	mov	r27, r31
    165e:	b1 1d       	adc	r27, r1
    1660:	5d 96       	adiw	r26, 0x1d	; 29
    1662:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1664:	92 8d       	ldd	r25, Z+26	; 0x1a
    1666:	9f 5f       	subi	r25, 0xFF	; 255
    1668:	9f 73       	andi	r25, 0x3F	; 63
    166a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1674:	08 95       	ret

00001676 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1676:	fc 01       	movw	r30, r24
    1678:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    167a:	44 8d       	ldd	r20, Z+28	; 0x1c
    167c:	25 2f       	mov	r18, r21
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	84 2f       	mov	r24, r20
    1682:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1684:	82 1b       	sub	r24, r18
    1686:	93 0b       	sbc	r25, r19
    1688:	54 17       	cp	r21, r20
    168a:	10 f0       	brcs	.+4      	; 0x1690 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    168c:	cf 96       	adiw	r24, 0x3f	; 63
    168e:	08 95       	ret
  return tail - head - 1;
    1690:	01 97       	sbiw	r24, 0x01	; 1
}
    1692:	08 95       	ret

00001694 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1694:	81 ea       	ldi	r24, 0xA1	; 161
    1696:	9c e0       	ldi	r25, 0x0C	; 12
    1698:	89 2b       	or	r24, r25
    169a:	49 f0       	breq	.+18     	; 0x16ae <_Z14serialEventRunv+0x1a>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	89 2b       	or	r24, r25
    16a2:	29 f0       	breq	.+10     	; 0x16ae <_Z14serialEventRunv+0x1a>
    16a4:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_Z17Serial0_availablev>
    16a8:	81 11       	cpse	r24, r1
    16aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    16ae:	08 95       	ret

000016b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    16b0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    16b2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    16b4:	a8 0f       	add	r26, r24
    16b6:	b9 2f       	mov	r27, r25
    16b8:	b1 1d       	adc	r27, r1
    16ba:	a3 5a       	subi	r26, 0xA3	; 163
    16bc:	bf 4f       	sbci	r27, 0xFF	; 255
    16be:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    16c0:	84 8d       	ldd	r24, Z+28	; 0x1c
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	8f 73       	andi	r24, 0x3F	; 63
    16c8:	99 27       	eor	r25, r25
    16ca:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    16cc:	a6 89       	ldd	r26, Z+22	; 0x16
    16ce:	b7 89       	ldd	r27, Z+23	; 0x17
    16d0:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    16d2:	a0 89       	ldd	r26, Z+16	; 0x10
    16d4:	b1 89       	ldd	r27, Z+17	; 0x11
    16d6:	8c 91       	ld	r24, X
    16d8:	83 70       	andi	r24, 0x03	; 3
    16da:	80 64       	ori	r24, 0x40	; 64
    16dc:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    16de:	93 8d       	ldd	r25, Z+27	; 0x1b
    16e0:	84 8d       	ldd	r24, Z+28	; 0x1c
    16e2:	98 13       	cpse	r25, r24
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    16e6:	02 88       	ldd	r0, Z+18	; 0x12
    16e8:	f3 89       	ldd	r31, Z+19	; 0x13
    16ea:	e0 2d       	mov	r30, r0
    16ec:	80 81       	ld	r24, Z
    16ee:	8f 7d       	andi	r24, 0xDF	; 223
    16f0:	80 83       	st	Z, r24
  }
}
    16f2:	08 95       	ret

000016f4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    16fa:	88 8d       	ldd	r24, Y+24	; 0x18
    16fc:	88 23       	and	r24, r24
    16fe:	b9 f0       	breq	.+46     	; 0x172e <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1700:	aa 89       	ldd	r26, Y+18	; 0x12
    1702:	bb 89       	ldd	r27, Y+19	; 0x13
    1704:	e8 89       	ldd	r30, Y+16	; 0x10
    1706:	f9 89       	ldd	r31, Y+17	; 0x11
    1708:	8c 91       	ld	r24, X
    170a:	85 fd       	sbrc	r24, 5
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <_ZN14HardwareSerial5flushEv+0x20>
    170e:	80 81       	ld	r24, Z
    1710:	86 fd       	sbrc	r24, 6
    1712:	0d c0       	rjmp	.+26     	; 0x172e <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	07 fc       	sbrc	r0, 7
    1718:	f7 cf       	rjmp	.-18     	; 0x1708 <_ZN14HardwareSerial5flushEv+0x14>
    171a:	8c 91       	ld	r24, X
    171c:	85 ff       	sbrs	r24, 5
    171e:	f2 cf       	rjmp	.-28     	; 0x1704 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1720:	80 81       	ld	r24, Z
    1722:	85 ff       	sbrs	r24, 5
    1724:	ed cf       	rjmp	.-38     	; 0x1700 <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
    1726:	ce 01       	movw	r24, r28
    1728:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    172c:	e9 cf       	rjmp	.-46     	; 0x1700 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

00001734 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
  _written = true;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1746:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1748:	8c 8d       	ldd	r24, Y+28	; 0x1c
    174a:	98 13       	cpse	r25, r24
    174c:	1a c0       	rjmp	.+52     	; 0x1782 <_ZN14HardwareSerial5writeEh+0x4e>
    174e:	e8 89       	ldd	r30, Y+16	; 0x10
    1750:	f9 89       	ldd	r31, Y+17	; 0x11
    1752:	80 81       	ld	r24, Z
    1754:	85 ff       	sbrs	r24, 5
    1756:	15 c0       	rjmp	.+42     	; 0x1782 <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1758:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    175a:	f8 94       	cli
      *_udr = c;
    175c:	ee 89       	ldd	r30, Y+22	; 0x16
    175e:	ff 89       	ldd	r31, Y+23	; 0x17
    1760:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1762:	e8 89       	ldd	r30, Y+16	; 0x10
    1764:	f9 89       	ldd	r31, Y+17	; 0x11
    1766:	80 81       	ld	r24, Z
    1768:	83 70       	andi	r24, 0x03	; 3
    176a:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
    176c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    176e:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	08 95       	ret
    1782:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1784:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1786:	10 e0       	ldi	r17, 0x00	; 0
    1788:	0f 5f       	subi	r16, 0xFF	; 255
    178a:	1f 4f       	sbci	r17, 0xFF	; 255
    178c:	0f 73       	andi	r16, 0x3F	; 63
    178e:	11 27       	eor	r17, r17
    1790:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1792:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1794:	8e 11       	cpse	r24, r14
    1796:	0c c0       	rjmp	.+24     	; 0x17b0 <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	07 fc       	sbrc	r0, 7
    179c:	fa cf       	rjmp	.-12     	; 0x1792 <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    179e:	e8 89       	ldd	r30, Y+16	; 0x10
    17a0:	f9 89       	ldd	r31, Y+17	; 0x11
    17a2:	80 81       	ld	r24, Z
    17a4:	85 ff       	sbrs	r24, 5
    17a6:	f5 cf       	rjmp	.-22     	; 0x1792 <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
    17a8:	ce 01       	movw	r24, r28
    17aa:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    17ae:	f1 cf       	rjmp	.-30     	; 0x1792 <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    17b0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    17b2:	ec 0f       	add	r30, r28
    17b4:	fd 2f       	mov	r31, r29
    17b6:	f1 1d       	adc	r31, r1
    17b8:	e3 5a       	subi	r30, 0xA3	; 163
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    17be:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17c0:	f8 94       	cli
    _tx_buffer_head = i;
    17c2:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    17c4:	ea 89       	ldd	r30, Y+18	; 0x12
    17c6:	fb 89       	ldd	r31, Y+19	; 0x13
    17c8:	80 81       	ld	r24, Z
    17ca:	80 62       	ori	r24, 0x20	; 32
    17cc:	cf cf       	rjmp	.-98     	; 0x176c <_ZN14HardwareSerial5writeEh+0x38>

000017ce <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	ec 01       	movw	r28, r24
    17de:	6a 01       	movw	r12, r20
    17e0:	7b 01       	movw	r14, r22
    17e2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    17e4:	e8 89       	ldd	r30, Y+16	; 0x10
    17e6:	f9 89       	ldd	r31, Y+17	; 0x11
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    17ec:	c1 14       	cp	r12, r1
    17ee:	81 ee       	ldi	r24, 0xE1	; 225
    17f0:	d8 06       	cpc	r13, r24
    17f2:	e1 04       	cpc	r14, r1
    17f4:	f1 04       	cpc	r15, r1
    17f6:	a1 f0       	breq	.+40     	; 0x1820 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	79 e0       	ldi	r23, 0x09	; 9
    17fc:	8d e3       	ldi	r24, 0x3D	; 61
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a7 01       	movw	r20, r14
    1802:	96 01       	movw	r18, r12
    1804:	0e 94 5f 1b 	call	0x36be	; 0x36be <__udivmodsi4>
    1808:	21 50       	subi	r18, 0x01	; 1
    180a:	31 09       	sbc	r19, r1
    180c:	41 09       	sbc	r20, r1
    180e:	51 09       	sbc	r21, r1
    1810:	56 95       	lsr	r21
    1812:	47 95       	ror	r20
    1814:	37 95       	ror	r19
    1816:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1818:	21 15       	cp	r18, r1
    181a:	80 e1       	ldi	r24, 0x10	; 16
    181c:	38 07       	cpc	r19, r24
    181e:	98 f0       	brcs	.+38     	; 0x1846 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    1820:	e8 89       	ldd	r30, Y+16	; 0x10
    1822:	f9 89       	ldd	r31, Y+17	; 0x11
    1824:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1826:	60 e8       	ldi	r22, 0x80	; 128
    1828:	74 e8       	ldi	r23, 0x84	; 132
    182a:	8e e1       	ldi	r24, 0x1E	; 30
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	a7 01       	movw	r20, r14
    1830:	96 01       	movw	r18, r12
    1832:	0e 94 5f 1b 	call	0x36be	; 0x36be <__udivmodsi4>
    1836:	21 50       	subi	r18, 0x01	; 1
    1838:	31 09       	sbc	r19, r1
    183a:	41 09       	sbc	r20, r1
    183c:	51 09       	sbc	r21, r1
    183e:	56 95       	lsr	r21
    1840:	47 95       	ror	r20
    1842:	37 95       	ror	r19
    1844:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1846:	ec 85       	ldd	r30, Y+12	; 0x0c
    1848:	fd 85       	ldd	r31, Y+13	; 0x0d
    184a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    184c:	ee 85       	ldd	r30, Y+14	; 0x0e
    184e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1850:	20 83       	st	Z, r18

  _written = false;
    1852:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1854:	ec 89       	ldd	r30, Y+20	; 0x14
    1856:	fd 89       	ldd	r31, Y+21	; 0x15
    1858:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    185a:	ea 89       	ldd	r30, Y+18	; 0x12
    185c:	fb 89       	ldd	r31, Y+19	; 0x13
    185e:	80 81       	ld	r24, Z
    1860:	80 61       	ori	r24, 0x10	; 16
    1862:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1864:	ea 89       	ldd	r30, Y+18	; 0x12
    1866:	fb 89       	ldd	r31, Y+19	; 0x13
    1868:	80 81       	ld	r24, Z
    186a:	88 60       	ori	r24, 0x08	; 8
    186c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    186e:	ea 89       	ldd	r30, Y+18	; 0x12
    1870:	fb 89       	ldd	r31, Y+19	; 0x13
    1872:	80 81       	ld	r24, Z
    1874:	80 68       	ori	r24, 0x80	; 128
    1876:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1878:	ea 89       	ldd	r30, Y+18	; 0x12
    187a:	fb 89       	ldd	r31, Y+19	; 0x13
    187c:	80 81       	ld	r24, Z
    187e:	8f 7d       	andi	r24, 0xDF	; 223
    1880:	80 83       	st	Z, r24
}
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	df 90       	pop	r13
    188e:	cf 90       	pop	r12
    1890:	08 95       	ret

00001892 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1892:	1f 92       	push	r1
    1894:	0f 92       	push	r0
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	0f 92       	push	r0
    189a:	11 24       	eor	r1, r1
    189c:	2f 93       	push	r18
    189e:	8f 93       	push	r24
    18a0:	9f 93       	push	r25
    18a2:	ef 93       	push	r30
    18a4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    18a6:	e0 91 35 05 	lds	r30, 0x0535	; 0x800535 <Serial+0x10>
    18aa:	f0 91 36 05 	lds	r31, 0x0536	; 0x800536 <Serial+0x11>
    18ae:	80 81       	ld	r24, Z
    18b0:	e0 91 3b 05 	lds	r30, 0x053B	; 0x80053b <Serial+0x16>
    18b4:	f0 91 3c 05 	lds	r31, 0x053C	; 0x80053c <Serial+0x17>
    18b8:	82 fd       	sbrc	r24, 2
    18ba:	1b c0       	rjmp	.+54     	; 0x18f2 <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    18bc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    18be:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <Serial+0x19>
    18c2:	8f 5f       	subi	r24, 0xFF	; 255
    18c4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    18c6:	20 91 3f 05 	lds	r18, 0x053F	; 0x80053f <Serial+0x1a>
    18ca:	82 17       	cp	r24, r18
    18cc:	41 f0       	breq	.+16     	; 0x18de <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
    18ce:	e0 91 3e 05 	lds	r30, 0x053E	; 0x80053e <Serial+0x19>
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	eb 5d       	subi	r30, 0xDB	; 219
    18d6:	fa 4f       	sbci	r31, 0xFA	; 250
    18d8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    18da:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <Serial+0x19>
    Serial._rx_complete_irq();
  }
    18de:	ff 91       	pop	r31
    18e0:	ef 91       	pop	r30
    18e2:	9f 91       	pop	r25
    18e4:	8f 91       	pop	r24
    18e6:	2f 91       	pop	r18
    18e8:	0f 90       	pop	r0
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	0f 90       	pop	r0
    18ee:	1f 90       	pop	r1
    18f0:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    18f2:	80 81       	ld	r24, Z
    18f4:	f4 cf       	rjmp	.-24     	; 0x18de <__vector_18+0x4c>

000018f6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    18f6:	1f 92       	push	r1
    18f8:	0f 92       	push	r0
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	0f 92       	push	r0
    18fe:	11 24       	eor	r1, r1
    1900:	2f 93       	push	r18
    1902:	3f 93       	push	r19
    1904:	4f 93       	push	r20
    1906:	5f 93       	push	r21
    1908:	6f 93       	push	r22
    190a:	7f 93       	push	r23
    190c:	8f 93       	push	r24
    190e:	9f 93       	push	r25
    1910:	af 93       	push	r26
    1912:	bf 93       	push	r27
    1914:	ef 93       	push	r30
    1916:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1918:	85 e2       	ldi	r24, 0x25	; 37
    191a:	95 e0       	ldi	r25, 0x05	; 5
    191c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1942:	85 e2       	ldi	r24, 0x25	; 37
    1944:	95 e0       	ldi	r25, 0x05	; 5
    1946:	0e 94 0d 0b 	call	0x161a	; 0x161a <_ZN14HardwareSerial9availableEv>
    194a:	21 e0       	ldi	r18, 0x01	; 1
    194c:	89 2b       	or	r24, r25
    194e:	09 f4       	brne	.+2      	; 0x1952 <_Z17Serial0_availablev+0x10>
    1950:	20 e0       	ldi	r18, 0x00	; 0
}
    1952:	82 2f       	mov	r24, r18
    1954:	08 95       	ret

00001956 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1956:	e5 e2       	ldi	r30, 0x25	; 37
    1958:	f5 e0       	ldi	r31, 0x05	; 5
    195a:	13 82       	std	Z+3, r1	; 0x03
    195c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    195e:	88 ee       	ldi	r24, 0xE8	; 232
    1960:	93 e0       	ldi	r25, 0x03	; 3
    1962:	a0 e0       	ldi	r26, 0x00	; 0
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	84 83       	std	Z+4, r24	; 0x04
    1968:	95 83       	std	Z+5, r25	; 0x05
    196a:	a6 83       	std	Z+6, r26	; 0x06
    196c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    196e:	80 ea       	ldi	r24, 0xA0	; 160
    1970:	94 e0       	ldi	r25, 0x04	; 4
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	85 ec       	ldi	r24, 0xC5	; 197
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	95 87       	std	Z+13, r25	; 0x0d
    197c:	84 87       	std	Z+12, r24	; 0x0c
    197e:	84 ec       	ldi	r24, 0xC4	; 196
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	97 87       	std	Z+15, r25	; 0x0f
    1984:	86 87       	std	Z+14, r24	; 0x0e
    1986:	80 ec       	ldi	r24, 0xC0	; 192
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	91 8b       	std	Z+17, r25	; 0x11
    198c:	80 8b       	std	Z+16, r24	; 0x10
    198e:	81 ec       	ldi	r24, 0xC1	; 193
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	93 8b       	std	Z+19, r25	; 0x13
    1994:	82 8b       	std	Z+18, r24	; 0x12
    1996:	82 ec       	ldi	r24, 0xC2	; 194
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	95 8b       	std	Z+21, r25	; 0x15
    199c:	84 8b       	std	Z+20, r24	; 0x14
    199e:	86 ec       	ldi	r24, 0xC6	; 198
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	97 8b       	std	Z+23, r25	; 0x17
    19a4:	86 8b       	std	Z+22, r24	; 0x16
    19a6:	11 8e       	std	Z+25, r1	; 0x19
    19a8:	12 8e       	std	Z+26, r1	; 0x1a
    19aa:	13 8e       	std	Z+27, r1	; 0x1b
    19ac:	14 8e       	std	Z+28, r1	; 0x1c
    19ae:	08 95       	ret

000019b0 <_ZN5Print5writeEPKhj>:
    19b0:	af 92       	push	r10
    19b2:	bf 92       	push	r11
    19b4:	cf 92       	push	r12
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	6c 01       	movw	r12, r24
    19c6:	7b 01       	movw	r14, r22
    19c8:	8b 01       	movw	r16, r22
    19ca:	04 0f       	add	r16, r20
    19cc:	15 1f       	adc	r17, r21
    19ce:	eb 01       	movw	r28, r22
    19d0:	5e 01       	movw	r10, r28
    19d2:	ae 18       	sub	r10, r14
    19d4:	bf 08       	sbc	r11, r15
    19d6:	c0 17       	cp	r28, r16
    19d8:	d1 07       	cpc	r29, r17
    19da:	59 f0       	breq	.+22     	; 0x19f2 <_ZN5Print5writeEPKhj+0x42>
    19dc:	69 91       	ld	r22, Y+
    19de:	d6 01       	movw	r26, r12
    19e0:	ed 91       	ld	r30, X+
    19e2:	fc 91       	ld	r31, X
    19e4:	01 90       	ld	r0, Z+
    19e6:	f0 81       	ld	r31, Z
    19e8:	e0 2d       	mov	r30, r0
    19ea:	c6 01       	movw	r24, r12
    19ec:	09 95       	icall
    19ee:	89 2b       	or	r24, r25
    19f0:	79 f7       	brne	.-34     	; 0x19d0 <_ZN5Print5writeEPKhj+0x20>
    19f2:	c5 01       	movw	r24, r10
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	bf 90       	pop	r11
    1a06:	af 90       	pop	r10
    1a08:	08 95       	ret

00001a0a <_ZN5Print5writeEPKc.part.2>:
    1a0a:	fb 01       	movw	r30, r22
    1a0c:	01 90       	ld	r0, Z+
    1a0e:	00 20       	and	r0, r0
    1a10:	e9 f7       	brne	.-6      	; 0x1a0c <_ZN5Print5writeEPKc.part.2+0x2>
    1a12:	31 97       	sbiw	r30, 0x01	; 1
    1a14:	af 01       	movw	r20, r30
    1a16:	46 1b       	sub	r20, r22
    1a18:	57 0b       	sbc	r21, r23
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	ed 91       	ld	r30, X+
    1a1e:	fc 91       	ld	r31, X
    1a20:	02 80       	ldd	r0, Z+2	; 0x02
    1a22:	f3 81       	ldd	r31, Z+3	; 0x03
    1a24:	e0 2d       	mov	r30, r0
    1a26:	09 94       	ijmp

00001a28 <_ZN5Print5printEPKc>:
    1a28:	61 15       	cp	r22, r1
    1a2a:	71 05       	cpc	r23, r1
    1a2c:	11 f0       	breq	.+4      	; 0x1a32 <_ZN5Print5printEPKc+0xa>
    1a2e:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <_ZN5Print5writeEPKc.part.2>
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	08 95       	ret

00001a38 <_ZN5Print5printEc>:
    1a38:	dc 01       	movw	r26, r24
    1a3a:	ed 91       	ld	r30, X+
    1a3c:	fc 91       	ld	r31, X
    1a3e:	01 90       	ld	r0, Z+
    1a40:	f0 81       	ld	r31, Z
    1a42:	e0 2d       	mov	r30, r0
    1a44:	09 94       	ijmp

00001a46 <_ZN5Print7printlnEv>:
    1a46:	69 ee       	ldi	r22, 0xE9	; 233
    1a48:	71 e0       	ldi	r23, 0x01	; 1
    1a4a:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <_ZN5Print5writeEPKc.part.2>

00001a4e <_ZN5Print7printlnEPKc>:
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	8c 01       	movw	r16, r24
    1a58:	d0 e0       	ldi	r29, 0x00	; 0
    1a5a:	c0 e0       	ldi	r28, 0x00	; 0
    1a5c:	61 15       	cp	r22, r1
    1a5e:	71 05       	cpc	r23, r1
    1a60:	19 f0       	breq	.+6      	; 0x1a68 <_ZN5Print7printlnEPKc+0x1a>
    1a62:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN5Print5writeEPKc.part.2>
    1a66:	ec 01       	movw	r28, r24
    1a68:	c8 01       	movw	r24, r16
    1a6a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print7printlnEv>
    1a6e:	8c 0f       	add	r24, r28
    1a70:	9d 1f       	adc	r25, r29
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	08 95       	ret

00001a7c <_ZN5Print11printNumberEmh>:
    1a7c:	8f 92       	push	r8
    1a7e:	9f 92       	push	r9
    1a80:	af 92       	push	r10
    1a82:	bf 92       	push	r11
    1a84:	ef 92       	push	r14
    1a86:	ff 92       	push	r15
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	a1 97       	sbiw	r28, 0x21	; 33
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	7c 01       	movw	r14, r24
    1aa2:	fa 01       	movw	r30, r20
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	19 a2       	std	Y+33, r1	; 0x21
    1aa8:	22 30       	cpi	r18, 0x02	; 2
    1aaa:	08 f4       	brcc	.+2      	; 0x1aae <_ZN5Print11printNumberEmh+0x32>
    1aac:	2a e0       	ldi	r18, 0x0A	; 10
    1aae:	8e 01       	movw	r16, r28
    1ab0:	0f 5d       	subi	r16, 0xDF	; 223
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	82 2e       	mov	r8, r18
    1ab6:	91 2c       	mov	r9, r1
    1ab8:	b1 2c       	mov	r11, r1
    1aba:	a1 2c       	mov	r10, r1
    1abc:	bf 01       	movw	r22, r30
    1abe:	a5 01       	movw	r20, r10
    1ac0:	94 01       	movw	r18, r8
    1ac2:	0e 94 5f 1b 	call	0x36be	; 0x36be <__udivmodsi4>
    1ac6:	f9 01       	movw	r30, r18
    1ac8:	ca 01       	movw	r24, r20
    1aca:	6a 30       	cpi	r22, 0x0A	; 10
    1acc:	0c f5       	brge	.+66     	; 0x1b10 <_ZN5Print11printNumberEmh+0x94>
    1ace:	60 5d       	subi	r22, 0xD0	; 208
    1ad0:	d8 01       	movw	r26, r16
    1ad2:	6e 93       	st	-X, r22
    1ad4:	8d 01       	movw	r16, r26
    1ad6:	23 2b       	or	r18, r19
    1ad8:	24 2b       	or	r18, r20
    1ada:	25 2b       	or	r18, r21
    1adc:	79 f7       	brne	.-34     	; 0x1abc <_ZN5Print11printNumberEmh+0x40>
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	10 97       	sbiw	r26, 0x00	; 0
    1ae4:	21 f0       	breq	.+8      	; 0x1aee <_ZN5Print11printNumberEmh+0x72>
    1ae6:	bd 01       	movw	r22, r26
    1ae8:	c7 01       	movw	r24, r14
    1aea:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN5Print5writeEPKc.part.2>
    1aee:	a1 96       	adiw	r28, 0x21	; 33
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	ff 90       	pop	r15
    1b04:	ef 90       	pop	r14
    1b06:	bf 90       	pop	r11
    1b08:	af 90       	pop	r10
    1b0a:	9f 90       	pop	r9
    1b0c:	8f 90       	pop	r8
    1b0e:	08 95       	ret
    1b10:	69 5c       	subi	r22, 0xC9	; 201
    1b12:	de cf       	rjmp	.-68     	; 0x1ad0 <_ZN5Print11printNumberEmh+0x54>

00001b14 <_ZN5Print5printEli>:
    1b14:	cf 92       	push	r12
    1b16:	df 92       	push	r13
    1b18:	ef 92       	push	r14
    1b1a:	ff 92       	push	r15
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	21 15       	cp	r18, r1
    1b26:	31 05       	cpc	r19, r1
    1b28:	81 f4       	brne	.+32     	; 0x1b4a <_ZN5Print5printEli+0x36>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	ed 91       	ld	r30, X+
    1b2e:	fc 91       	ld	r31, X
    1b30:	01 90       	ld	r0, Z+
    1b32:	f0 81       	ld	r31, Z
    1b34:	e0 2d       	mov	r30, r0
    1b36:	64 2f       	mov	r22, r20
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	ff 90       	pop	r15
    1b42:	ef 90       	pop	r14
    1b44:	df 90       	pop	r13
    1b46:	cf 90       	pop	r12
    1b48:	09 94       	ijmp
    1b4a:	2a 30       	cpi	r18, 0x0A	; 10
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	01 f5       	brne	.+64     	; 0x1b90 <_ZN5Print5printEli+0x7c>
    1b50:	2a e0       	ldi	r18, 0x0A	; 10
    1b52:	77 ff       	sbrs	r23, 7
    1b54:	1d c0       	rjmp	.+58     	; 0x1b90 <_ZN5Print5printEli+0x7c>
    1b56:	6a 01       	movw	r12, r20
    1b58:	7b 01       	movw	r14, r22
    1b5a:	ec 01       	movw	r28, r24
    1b5c:	6d e2       	ldi	r22, 0x2D	; 45
    1b5e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN5Print5printEc>
    1b62:	8c 01       	movw	r16, r24
    1b64:	44 27       	eor	r20, r20
    1b66:	55 27       	eor	r21, r21
    1b68:	ba 01       	movw	r22, r20
    1b6a:	4c 19       	sub	r20, r12
    1b6c:	5d 09       	sbc	r21, r13
    1b6e:	6e 09       	sbc	r22, r14
    1b70:	7f 09       	sbc	r23, r15
    1b72:	2a e0       	ldi	r18, 0x0A	; 10
    1b74:	ce 01       	movw	r24, r28
    1b76:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_ZN5Print11printNumberEmh>
    1b7a:	80 0f       	add	r24, r16
    1b7c:	91 1f       	adc	r25, r17
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	ff 90       	pop	r15
    1b88:	ef 90       	pop	r14
    1b8a:	df 90       	pop	r13
    1b8c:	cf 90       	pop	r12
    1b8e:	08 95       	ret
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	ff 90       	pop	r15
    1b9a:	ef 90       	pop	r14
    1b9c:	df 90       	pop	r13
    1b9e:	cf 90       	pop	r12
    1ba0:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <_ZN5Print11printNumberEmh>

00001ba4 <_ZN5Print5printEii>:
    1ba4:	9a 01       	movw	r18, r20
    1ba6:	ab 01       	movw	r20, r22
    1ba8:	77 0f       	add	r23, r23
    1baa:	66 0b       	sbc	r22, r22
    1bac:	77 0b       	sbc	r23, r23
    1bae:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <_ZN5Print5printEli>

00001bb2 <_ZN5Print7printlnEii>:
    1bb2:	0f 93       	push	r16
    1bb4:	1f 93       	push	r17
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	ec 01       	movw	r28, r24
    1bbc:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <_ZN5Print5printEii>
    1bc0:	8c 01       	movw	r16, r24
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print7printlnEv>
    1bc8:	80 0f       	add	r24, r16
    1bca:	91 1f       	adc	r25, r17
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	08 95       	ret

00001bd6 <_ZN5Print5printEmi>:
    1bd6:	21 15       	cp	r18, r1
    1bd8:	31 05       	cpc	r19, r1
    1bda:	41 f4       	brne	.+16     	; 0x1bec <_ZN5Print5printEmi+0x16>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	ed 91       	ld	r30, X+
    1be0:	fc 91       	ld	r31, X
    1be2:	01 90       	ld	r0, Z+
    1be4:	f0 81       	ld	r31, Z
    1be6:	e0 2d       	mov	r30, r0
    1be8:	64 2f       	mov	r22, r20
    1bea:	09 94       	ijmp
    1bec:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <_ZN5Print11printNumberEmh>

00001bf0 <_ZN5Print5printEji>:
    1bf0:	9a 01       	movw	r18, r20
    1bf2:	ab 01       	movw	r20, r22
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <_ZN5Print5printEmi>

00001bfc <_ZN5Print10printFloatEdh>:
    1bfc:	2f 92       	push	r2
    1bfe:	3f 92       	push	r3
    1c00:	4f 92       	push	r4
    1c02:	5f 92       	push	r5
    1c04:	6f 92       	push	r6
    1c06:	7f 92       	push	r7
    1c08:	8f 92       	push	r8
    1c0a:	9f 92       	push	r9
    1c0c:	af 92       	push	r10
    1c0e:	bf 92       	push	r11
    1c10:	cf 92       	push	r12
    1c12:	df 92       	push	r13
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	ec 01       	movw	r28, r24
    1c20:	6a 01       	movw	r12, r20
    1c22:	7b 01       	movw	r14, r22
    1c24:	72 2e       	mov	r7, r18
    1c26:	ab 01       	movw	r20, r22
    1c28:	96 01       	movw	r18, r12
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	b6 01       	movw	r22, r12
    1c2e:	0e 94 25 1a 	call	0x344a	; 0x344a <__unordsf2>
    1c32:	6e ea       	ldi	r22, 0xAE	; 174
    1c34:	74 e0       	ldi	r23, 0x04	; 4
    1c36:	81 11       	cpse	r24, r1
    1c38:	26 c0       	rjmp	.+76     	; 0x1c86 <_ZN5Print10printFloatEdh+0x8a>
    1c3a:	46 01       	movw	r8, r12
    1c3c:	57 01       	movw	r10, r14
    1c3e:	e8 94       	clt
    1c40:	b7 f8       	bld	r11, 7
    1c42:	2f ef       	ldi	r18, 0xFF	; 255
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	4f e7       	ldi	r20, 0x7F	; 127
    1c48:	5f e7       	ldi	r21, 0x7F	; 127
    1c4a:	c5 01       	movw	r24, r10
    1c4c:	b4 01       	movw	r22, r8
    1c4e:	0e 94 25 1a 	call	0x344a	; 0x344a <__unordsf2>
    1c52:	81 11       	cpse	r24, r1
    1c54:	0c c0       	rjmp	.+24     	; 0x1c6e <_ZN5Print10printFloatEdh+0x72>
    1c56:	2f ef       	ldi	r18, 0xFF	; 255
    1c58:	3f ef       	ldi	r19, 0xFF	; 255
    1c5a:	4f e7       	ldi	r20, 0x7F	; 127
    1c5c:	5f e7       	ldi	r21, 0x7F	; 127
    1c5e:	c5 01       	movw	r24, r10
    1c60:	b4 01       	movw	r22, r8
    1c62:	0e 94 04 18 	call	0x3008	; 0x3008 <__cmpsf2>
    1c66:	62 eb       	ldi	r22, 0xB2	; 178
    1c68:	74 e0       	ldi	r23, 0x04	; 4
    1c6a:	18 16       	cp	r1, r24
    1c6c:	64 f0       	brlt	.+24     	; 0x1c86 <_ZN5Print10printFloatEdh+0x8a>
    1c6e:	2f ef       	ldi	r18, 0xFF	; 255
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	4f e7       	ldi	r20, 0x7F	; 127
    1c74:	5f e4       	ldi	r21, 0x4F	; 79
    1c76:	c7 01       	movw	r24, r14
    1c78:	b6 01       	movw	r22, r12
    1c7a:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__gesf2>
    1c7e:	18 16       	cp	r1, r24
    1c80:	b4 f4       	brge	.+44     	; 0x1cae <_ZN5Print10printFloatEdh+0xb2>
    1c82:	66 eb       	ldi	r22, 0xB6	; 182
    1c84:	74 e0       	ldi	r23, 0x04	; 4
    1c86:	ce 01       	movw	r24, r28
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	ff 90       	pop	r15
    1c90:	ef 90       	pop	r14
    1c92:	df 90       	pop	r13
    1c94:	cf 90       	pop	r12
    1c96:	bf 90       	pop	r11
    1c98:	af 90       	pop	r10
    1c9a:	9f 90       	pop	r9
    1c9c:	8f 90       	pop	r8
    1c9e:	7f 90       	pop	r7
    1ca0:	6f 90       	pop	r6
    1ca2:	5f 90       	pop	r5
    1ca4:	4f 90       	pop	r4
    1ca6:	3f 90       	pop	r3
    1ca8:	2f 90       	pop	r2
    1caa:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <_ZN5Print5writeEPKc.part.2>
    1cae:	2f ef       	ldi	r18, 0xFF	; 255
    1cb0:	3f ef       	ldi	r19, 0xFF	; 255
    1cb2:	4f e7       	ldi	r20, 0x7F	; 127
    1cb4:	5f ec       	ldi	r21, 0xCF	; 207
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	b6 01       	movw	r22, r12
    1cba:	0e 94 04 18 	call	0x3008	; 0x3008 <__cmpsf2>
    1cbe:	87 fd       	sbrc	r24, 7
    1cc0:	e0 cf       	rjmp	.-64     	; 0x1c82 <_ZN5Print10printFloatEdh+0x86>
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	a9 01       	movw	r20, r18
    1cc8:	c7 01       	movw	r24, r14
    1cca:	b6 01       	movw	r22, r12
    1ccc:	0e 94 04 18 	call	0x3008	; 0x3008 <__cmpsf2>
    1cd0:	31 2c       	mov	r3, r1
    1cd2:	21 2c       	mov	r2, r1
    1cd4:	87 ff       	sbrs	r24, 7
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <_ZN5Print10printFloatEdh+0xee>
    1cd8:	6d e2       	ldi	r22, 0x2D	; 45
    1cda:	ce 01       	movw	r24, r28
    1cdc:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN5Print5printEc>
    1ce0:	1c 01       	movw	r2, r24
    1ce2:	f7 fa       	bst	r15, 7
    1ce4:	f0 94       	com	r15
    1ce6:	f7 f8       	bld	r15, 7
    1ce8:	f0 94       	com	r15
    1cea:	10 e0       	ldi	r17, 0x00	; 0
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	9f e3       	ldi	r25, 0x3F	; 63
    1cf4:	71 16       	cp	r7, r17
    1cf6:	41 f0       	breq	.+16     	; 0x1d08 <_ZN5Print10printFloatEdh+0x10c>
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e2       	ldi	r20, 0x20	; 32
    1cfe:	51 e4       	ldi	r21, 0x41	; 65
    1d00:	0e 94 09 18 	call	0x3012	; 0x3012 <__divsf3>
    1d04:	1f 5f       	subi	r17, 0xFF	; 255
    1d06:	f6 cf       	rjmp	.-20     	; 0x1cf4 <_ZN5Print10printFloatEdh+0xf8>
    1d08:	a7 01       	movw	r20, r14
    1d0a:	96 01       	movw	r18, r12
    1d0c:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1d10:	2b 01       	movw	r4, r22
    1d12:	3c 01       	movw	r6, r24
    1d14:	0e 94 82 18 	call	0x3104	; 0x3104 <__fixunssfsi>
    1d18:	4b 01       	movw	r8, r22
    1d1a:	5c 01       	movw	r10, r24
    1d1c:	2a e0       	ldi	r18, 0x0A	; 10
    1d1e:	bc 01       	movw	r22, r24
    1d20:	a4 01       	movw	r20, r8
    1d22:	ce 01       	movw	r24, r28
    1d24:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_ZN5Print11printNumberEmh>
    1d28:	7c 01       	movw	r14, r24
    1d2a:	e2 0c       	add	r14, r2
    1d2c:	f3 1c       	adc	r15, r3
    1d2e:	11 23       	and	r17, r17
    1d30:	b1 f1       	breq	.+108    	; 0x1d9e <_ZN5Print10printFloatEdh+0x1a2>
    1d32:	c5 01       	movw	r24, r10
    1d34:	b4 01       	movw	r22, r8
    1d36:	0e 94 b1 18 	call	0x3162	; 0x3162 <__floatunsisf>
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	ac 01       	movw	r20, r24
    1d3e:	c3 01       	movw	r24, r6
    1d40:	b2 01       	movw	r22, r4
    1d42:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    1d46:	4b 01       	movw	r8, r22
    1d48:	5c 01       	movw	r10, r24
    1d4a:	6e e2       	ldi	r22, 0x2E	; 46
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN5Print5printEc>
    1d52:	e8 0e       	add	r14, r24
    1d54:	f9 1e       	adc	r15, r25
    1d56:	11 50       	subi	r17, 0x01	; 1
    1d58:	10 f1       	brcs	.+68     	; 0x1d9e <_ZN5Print10printFloatEdh+0x1a2>
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e2       	ldi	r20, 0x20	; 32
    1d60:	51 e4       	ldi	r21, 0x41	; 65
    1d62:	c5 01       	movw	r24, r10
    1d64:	b4 01       	movw	r22, r8
    1d66:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    1d6a:	2b 01       	movw	r4, r22
    1d6c:	3c 01       	movw	r6, r24
    1d6e:	0e 94 82 18 	call	0x3104	; 0x3104 <__fixunssfsi>
    1d72:	4b 01       	movw	r8, r22
    1d74:	4a e0       	ldi	r20, 0x0A	; 10
    1d76:	50 e0       	ldi	r21, 0x00	; 0
    1d78:	ce 01       	movw	r24, r28
    1d7a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN5Print5printEji>
    1d7e:	e8 0e       	add	r14, r24
    1d80:	f9 1e       	adc	r15, r25
    1d82:	b4 01       	movw	r22, r8
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	0e 94 b1 18 	call	0x3162	; 0x3162 <__floatunsisf>
    1d8c:	9b 01       	movw	r18, r22
    1d8e:	ac 01       	movw	r20, r24
    1d90:	c3 01       	movw	r24, r6
    1d92:	b2 01       	movw	r22, r4
    1d94:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    1d98:	4b 01       	movw	r8, r22
    1d9a:	5c 01       	movw	r10, r24
    1d9c:	dc cf       	rjmp	.-72     	; 0x1d56 <_ZN5Print10printFloatEdh+0x15a>
    1d9e:	c7 01       	movw	r24, r14
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	ff 90       	pop	r15
    1da8:	ef 90       	pop	r14
    1daa:	df 90       	pop	r13
    1dac:	cf 90       	pop	r12
    1dae:	bf 90       	pop	r11
    1db0:	af 90       	pop	r10
    1db2:	9f 90       	pop	r9
    1db4:	8f 90       	pop	r8
    1db6:	7f 90       	pop	r7
    1db8:	6f 90       	pop	r6
    1dba:	5f 90       	pop	r5
    1dbc:	4f 90       	pop	r4
    1dbe:	3f 90       	pop	r3
    1dc0:	2f 90       	pop	r2
    1dc2:	08 95       	ret

00001dc4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1dce:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN5Print10printFloatEdh>
    1dd2:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print7printlnEv>
  return n;
}
    1dda:	80 0f       	add	r24, r16
    1ddc:	91 1f       	adc	r25, r17
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	08 95       	ret

00001de8 <osEE_check_disableint>:

  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
  } else
  if (Info == NULL) {
    ev = E_OS_PARAM_POINTER;
    1de8:	fc 01       	movw	r30, r24
    1dea:	81 8d       	ldd	r24, Z+25	; 0x19
    1dec:	81 11       	cpse	r24, r1
    1dee:	0b c0       	rjmp	.+22     	; 0x1e06 <osEE_check_disableint+0x1e>
    1df0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1df2:	81 11       	cpse	r24, r1
    1df4:	08 c0       	rjmp	.+16     	; 0x1e06 <osEE_check_disableint+0x1e>
    1df6:	21 e0       	ldi	r18, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	83 8d       	ldd	r24, Z+27	; 0x1b
    1dfc:	81 11       	cpse	r24, r1
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <osEE_check_disableint+0x1a>
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	82 2f       	mov	r24, r18
    1e04:	08 95       	ret
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	08 95       	ret

00001e0c <osEE_call_error_hook>:
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	ec 01       	movw	r28, r24
    1e16:	0d 89       	ldd	r16, Y+21	; 0x15
    1e18:	1e 89       	ldd	r17, Y+22	; 0x16
    1e1a:	03 30       	cpi	r16, 0x03	; 3
    1e1c:	11 05       	cpc	r17, r1
    1e1e:	59 f0       	breq	.+22     	; 0x1e36 <osEE_call_error_hook+0x2a>
    1e20:	cb 01       	movw	r24, r22
    1e22:	23 e0       	ldi	r18, 0x03	; 3
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	3e 8b       	std	Y+22, r19	; 0x16
    1e28:	2d 8b       	std	Y+21, r18	; 0x15
    1e2a:	7c 87       	std	Y+12, r23	; 0x0c
    1e2c:	6b 87       	std	Y+11, r22	; 0x0b
    1e2e:	0e 94 a6 04 	call	0x94c	; 0x94c <ErrorHook>
    1e32:	1e 8b       	std	Y+22, r17	; 0x16
    1e34:	0d 8b       	std	Y+21, r16	; 0x15
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	08 95       	ret

00001e40 <StartOS>:
    1e40:	4f 92       	push	r4
    1e42:	5f 92       	push	r5
    1e44:	6f 92       	push	r6
    1e46:	7f 92       	push	r7
    1e48:	8f 92       	push	r8
    1e4a:	9f 92       	push	r9
    1e4c:	af 92       	push	r10
    1e4e:	bf 92       	push	r11
    1e50:	cf 92       	push	r12
    1e52:	df 92       	push	r13
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <StartOS+0x22>
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	88 2e       	mov	r8, r24
    1e68:	00 91 63 02 	lds	r16, 0x0263	; 0x800263 <CDB>
    1e6c:	10 91 64 02 	lds	r17, 0x0264	; 0x800264 <CDB+0x1>
    1e70:	ff b6       	in	r15, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	d8 01       	movw	r26, r16
    1e76:	18 96       	adiw	r26, 0x08	; 8
    1e78:	8d 91       	ld	r24, X+
    1e7a:	9c 91       	ld	r25, X
    1e7c:	19 97       	sbiw	r26, 0x09	; 9
    1e7e:	89 2b       	or	r24, r25
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <StartOS+0x44>
    1e82:	b0 c0       	rjmp	.+352    	; 0x1fe4 <StartOS+0x1a4>
    1e84:	8d ef       	ldi	r24, 0xFD	; 253
    1e86:	94 e1       	ldi	r25, 0x14	; 20
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <osEE_avr8_system_timer_init>
    1e90:	a0 90 67 02 	lds	r10, 0x0267	; 0x800267 <CDB+0x4>
    1e94:	b0 90 68 02 	lds	r11, 0x0268	; 0x800268 <CDB+0x5>
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	91 87       	std	Z+9, r25	; 0x09
    1ea0:	80 87       	std	Z+8, r24	; 0x08
    1ea2:	82 86       	std	Z+10, r8	; 0x0a
    1ea4:	e5 88       	ldd	r14, Z+21	; 0x15
    1ea6:	f6 88       	ldd	r15, Z+22	; 0x16
    1ea8:	87 e0       	ldi	r24, 0x07	; 7
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	96 8b       	std	Z+22, r25	; 0x16
    1eae:	85 8b       	std	Z+21, r24	; 0x15
    1eb0:	0e 94 13 04 	call	0x826	; 0x826 <StartupHook>
    1eb4:	d8 01       	movw	r26, r16
    1eb6:	56 96       	adiw	r26, 0x16	; 22
    1eb8:	fc 92       	st	X, r15
    1eba:	ee 92       	st	-X, r14
    1ebc:	55 97       	sbiw	r26, 0x15	; 21
    1ebe:	e0 90 6f 02 	lds	r14, 0x026F	; 0x80026f <CDB+0xc>
    1ec2:	f0 90 70 02 	lds	r15, 0x0270	; 0x800270 <CDB+0xd>
    1ec6:	d1 2c       	mov	r13, r1
    1ec8:	c1 2c       	mov	r12, r1
    1eca:	b4 e0       	ldi	r27, 0x04	; 4
    1ecc:	8b 9e       	mul	r8, r27
    1ece:	40 01       	movw	r8, r0
    1ed0:	11 24       	eor	r1, r1
    1ed2:	e8 0c       	add	r14, r8
    1ed4:	f9 1c       	adc	r15, r9
    1ed6:	37 01       	movw	r6, r14
    1ed8:	e2 e0       	ldi	r30, 0x02	; 2
    1eda:	6e 0e       	add	r6, r30
    1edc:	71 1c       	adc	r7, r1
    1ede:	46 e0       	ldi	r20, 0x06	; 6
    1ee0:	54 2e       	mov	r5, r20
    1ee2:	f3 01       	movw	r30, r6
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	c8 16       	cp	r12, r24
    1eea:	d9 06       	cpc	r13, r25
    1eec:	e0 f1       	brcs	.+120    	; 0x1f66 <StartOS+0x126>
    1eee:	e0 90 6b 02 	lds	r14, 0x026B	; 0x80026b <CDB+0x8>
    1ef2:	f0 90 6c 02 	lds	r15, 0x026C	; 0x80026c <CDB+0x9>
    1ef6:	38 01       	movw	r6, r16
    1ef8:	f2 e0       	ldi	r31, 0x02	; 2
    1efa:	6f 0e       	add	r6, r31
    1efc:	71 1c       	adc	r7, r1
    1efe:	d1 2c       	mov	r13, r1
    1f00:	c1 2c       	mov	r12, r1
    1f02:	e8 0c       	add	r14, r8
    1f04:	f9 1c       	adc	r15, r9
    1f06:	27 01       	movw	r4, r14
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	48 0e       	add	r4, r24
    1f0c:	51 1c       	adc	r5, r1
    1f0e:	88 24       	eor	r8, r8
    1f10:	83 94       	inc	r8
    1f12:	91 2c       	mov	r9, r1
    1f14:	f2 01       	movw	r30, r4
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	c8 16       	cp	r12, r24
    1f1c:	d9 06       	cpc	r13, r25
    1f1e:	e8 f1       	brcs	.+122    	; 0x1f9a <StartOS+0x15a>
    1f20:	d8 01       	movw	r26, r16
    1f22:	18 96       	adiw	r26, 0x08	; 8
    1f24:	8d 91       	ld	r24, X+
    1f26:	9c 91       	ld	r25, X
    1f28:	19 97       	sbiw	r26, 0x09	; 9
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	31 f4       	brne	.+12     	; 0x1f3a <StartOS+0xfa>
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	19 96       	adiw	r26, 0x09	; 9
    1f34:	9c 93       	st	X, r25
    1f36:	8e 93       	st	-X, r24
    1f38:	18 97       	sbiw	r26, 0x08	; 8
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	80 85       	ldd	r24, Z+8	; 0x08
    1f3e:	91 85       	ldd	r25, Z+9	; 0x09
    1f40:	02 97       	sbiw	r24, 0x02	; 2
    1f42:	41 f4       	brne	.+16     	; 0x1f54 <StartOS+0x114>
    1f44:	d5 01       	movw	r26, r10
    1f46:	12 96       	adiw	r26, 0x02	; 2
    1f48:	6d 91       	ld	r22, X+
    1f4a:	7c 91       	ld	r23, X
    1f4c:	ab 01       	movw	r20, r22
    1f4e:	c5 01       	movw	r24, r10
    1f50:	0e 94 16 01 	call	0x22c	; 0x22c <osEE_hal_save_ctx_and_ready2stacked>
    1f54:	f8 01       	movw	r30, r16
    1f56:	80 85       	ldd	r24, Z+8	; 0x08
    1f58:	91 85       	ldd	r25, Z+9	; 0x09
    1f5a:	02 97       	sbiw	r24, 0x02	; 2
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <StartOS+0x120>
    1f5e:	78 94       	sei
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	4d c0       	rjmp	.+154    	; 0x2000 <StartOS+0x1c0>
    1f66:	d7 01       	movw	r26, r14
    1f68:	ed 91       	ld	r30, X+
    1f6a:	fc 91       	ld	r31, X
    1f6c:	5c 9c       	mul	r5, r12
    1f6e:	c0 01       	movw	r24, r0
    1f70:	5d 9c       	mul	r5, r13
    1f72:	90 0d       	add	r25, r0
    1f74:	11 24       	eor	r1, r1
    1f76:	e8 0f       	add	r30, r24
    1f78:	f9 1f       	adc	r31, r25
    1f7a:	a0 81       	ld	r26, Z
    1f7c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f7e:	24 81       	ldd	r18, Z+4	; 0x04
    1f80:	35 81       	ldd	r19, Z+5	; 0x05
    1f82:	42 81       	ldd	r20, Z+2	; 0x02
    1f84:	53 81       	ldd	r21, Z+3	; 0x03
    1f86:	bd 01       	movw	r22, r26
    1f88:	12 96       	adiw	r26, 0x02	; 2
    1f8a:	8d 91       	ld	r24, X+
    1f8c:	9c 91       	ld	r25, X
    1f8e:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <osEE_alarm_set_rel>
    1f92:	bf ef       	ldi	r27, 0xFF	; 255
    1f94:	cb 1a       	sub	r12, r27
    1f96:	db 0a       	sbc	r13, r27
    1f98:	a4 cf       	rjmp	.-184    	; 0x1ee2 <StartOS+0xa2>
    1f9a:	d7 01       	movw	r26, r14
    1f9c:	ed 91       	ld	r30, X+
    1f9e:	fc 91       	ld	r31, X
    1fa0:	c6 01       	movw	r24, r12
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	e8 0f       	add	r30, r24
    1fa8:	f9 1f       	adc	r31, r25
    1faa:	40 81       	ld	r20, Z
    1fac:	51 81       	ldd	r21, Z+1	; 0x01
    1fae:	da 01       	movw	r26, r20
    1fb0:	14 96       	adiw	r26, 0x04	; 4
    1fb2:	ed 91       	ld	r30, X+
    1fb4:	fc 91       	ld	r31, X
    1fb6:	80 81       	ld	r24, Z
    1fb8:	8f 5f       	subi	r24, 0xFF	; 255
    1fba:	80 83       	st	Z, r24
    1fbc:	93 82       	std	Z+3, r9	; 0x03
    1fbe:	82 82       	std	Z+2, r8	; 0x02
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	64 81       	ldd	r22, Z+4	; 0x04
    1fc4:	75 81       	ldd	r23, Z+5	; 0x05
    1fc6:	db 01       	movw	r26, r22
    1fc8:	8d 91       	ld	r24, X+
    1fca:	9c 91       	ld	r25, X
    1fcc:	11 97       	sbiw	r26, 0x01	; 1
    1fce:	95 83       	std	Z+5, r25	; 0x05
    1fd0:	84 83       	std	Z+4, r24	; 0x04
    1fd2:	1d 92       	st	X+, r1
    1fd4:	1c 92       	st	X, r1
    1fd6:	c3 01       	movw	r24, r6
    1fd8:	0e 94 3a 13 	call	0x2674	; 0x2674 <osEE_scheduler_rq_insert>
    1fdc:	bf ef       	ldi	r27, 0xFF	; 255
    1fde:	cb 1a       	sub	r12, r27
    1fe0:	db 0a       	sbc	r13, r27
    1fe2:	98 cf       	rjmp	.-208    	; 0x1f14 <StartOS+0xd4>
    1fe4:	88 e3       	ldi	r24, 0x38	; 56
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	1e 96       	adiw	r26, 0x0e	; 14
    1fea:	9c 93       	st	X, r25
    1fec:	8e 93       	st	-X, r24
    1fee:	1d 97       	sbiw	r26, 0x0d	; 13
    1ff0:	61 e0       	ldi	r22, 0x01	; 1
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	c8 01       	movw	r24, r16
    1ff6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <osEE_call_error_hook>
    1ffa:	ff be       	out	0x3f, r15	; 63
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	ff 90       	pop	r15
    200e:	ef 90       	pop	r14
    2010:	df 90       	pop	r13
    2012:	cf 90       	pop	r12
    2014:	bf 90       	pop	r11
    2016:	af 90       	pop	r10
    2018:	9f 90       	pop	r9
    201a:	8f 90       	pop	r8
    201c:	7f 90       	pop	r7
    201e:	6f 90       	pop	r6
    2020:	5f 90       	pop	r5
    2022:	4f 90       	pop	r4
    2024:	08 95       	ret

00002026 <TerminateTask>:
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <CDB>
    2030:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <CDB+0x1>
    2034:	dc 01       	movw	r26, r24
    2036:	ed 91       	ld	r30, X+
    2038:	fc 91       	ld	r31, X
    203a:	27 81       	ldd	r18, Z+7	; 0x07
    203c:	30 85       	ldd	r19, Z+8	; 0x08
    203e:	22 30       	cpi	r18, 0x02	; 2
    2040:	31 05       	cpc	r19, r1
    2042:	88 f4       	brcc	.+34     	; 0x2066 <TerminateTask+0x40>
    2044:	a4 81       	ldd	r26, Z+4	; 0x04
    2046:	b5 81       	ldd	r27, Z+5	; 0x05
    2048:	14 96       	adiw	r26, 0x04	; 4
    204a:	2d 91       	ld	r18, X+
    204c:	3c 91       	ld	r19, X
    204e:	c6 e0       	ldi	r28, 0x06	; 6
    2050:	d0 e0       	ldi	r29, 0x00	; 0
    2052:	23 2b       	or	r18, r19
    2054:	51 f4       	brne	.+20     	; 0x206a <TerminateTask+0x44>
    2056:	8f b7       	in	r24, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	62 e2       	ldi	r22, 0x22	; 34
    205c:	72 e1       	ldi	r23, 0x12	; 18
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	0e 94 36 01 	call	0x26c	; 0x26c <osEE_hal_terminate_ctx>
    2066:	c2 e0       	ldi	r28, 0x02	; 2
    2068:	d0 e0       	ldi	r29, 0x00	; 0
    206a:	1f b7       	in	r17, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	22 e0       	ldi	r18, 0x02	; 2
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	fc 01       	movw	r30, r24
    2074:	36 87       	std	Z+14, r19	; 0x0e
    2076:	25 87       	std	Z+13, r18	; 0x0d
    2078:	be 01       	movw	r22, r28
    207a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <osEE_call_error_hook>
    207e:	1f bf       	out	0x3f, r17	; 63
    2080:	ce 01       	movw	r24, r28
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	08 95       	ret

0000208a <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    208a:	9f 92       	push	r9
    208c:	af 92       	push	r10
    208e:	bf 92       	push	r11
    2090:	cf 92       	push	r12
    2092:	df 92       	push	r13
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <WaitEvent+0x18>
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	6c 01       	movw	r12, r24
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    20a8:	e0 90 63 02 	lds	r14, 0x0263	; 0x800263 <CDB>
    20ac:	f0 90 64 02 	lds	r15, 0x0264	; 0x800264 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    20b0:	c7 01       	movw	r24, r14
    20b2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <osEE_check_disableint>
    20b6:	89 2b       	or	r24, r25
    20b8:	09 f0       	breq	.+2      	; 0x20bc <WaitEvent+0x32>
    20ba:	45 c0       	rjmp	.+138    	; 0x2146 <WaitEvent+0xbc>
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    20bc:	d7 01       	movw	r26, r14
    20be:	ad 90       	ld	r10, X+
    20c0:	bc 90       	ld	r11, X
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    20c2:	f5 01       	movw	r30, r10
    20c4:	87 81       	ldd	r24, Z+7	; 0x07
    20c6:	90 85       	ldd	r25, Z+8	; 0x08
#else
    || (p_ccb->os_context > OSEE_TASK_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    20c8:	02 e0       	ldi	r16, 0x02	; 2
    20ca:	10 e0       	ldi	r17, 0x00	; 0
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    20cc:	82 30       	cpi	r24, 0x02	; 2
    20ce:	91 05       	cpc	r25, r1
    20d0:	e0 f5       	brcc	.+120    	; 0x214a <WaitEvent+0xc0>
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    20d2:	04 81       	ldd	r16, Z+4	; 0x04
    20d4:	15 81       	ldd	r17, Z+5	; 0x05
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
#if (defined(OSEE_HAS_MUTEX))
  if (p_curr_tcb->p_first_mtx != NULL) {
    20d6:	d8 01       	movw	r26, r16
    20d8:	14 96       	adiw	r26, 0x04	; 4
    20da:	2d 91       	ld	r18, X+
    20dc:	3c 91       	ld	r19, X
    20de:	15 97       	sbiw	r26, 0x05	; 5
    20e0:	23 2b       	or	r18, r19
    20e2:	09 f0       	breq	.+2      	; 0x20e6 <WaitEvent+0x5c>
    20e4:	53 c0       	rjmp	.+166    	; 0x218c <WaitEvent+0x102>
#endif /* !OSEE_SINGLECORE */
    {
      ev = E_OS_RESOURCE;
    }
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	09 f0       	breq	.+2      	; 0x20ec <WaitEvent+0x62>
    20ea:	53 c0       	rjmp	.+166    	; 0x2192 <WaitEvent+0x108>
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_MUTEX */
#endif /* OSEE_HAS_CHECKS */
  /* Check if we have to wait */
  if ((p_curr_tcb->event_mask & Mask) == 0U) {
    20ec:	18 96       	adiw	r26, 0x08	; 8
    20ee:	8d 91       	ld	r24, X+
    20f0:	9c 91       	ld	r25, X
    20f2:	8c 21       	and	r24, r12
    20f4:	9d 21       	and	r25, r13
    20f6:	89 2b       	or	r24, r25
    20f8:	19 f5       	brne	.+70     	; 0x2140 <WaitEvent+0xb6>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    20fa:	9f b6       	in	r9, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    20fc:	f8 94       	cli
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();

    /* Set the waiting mask */
    p_curr_tcb->wait_mask = Mask;
    20fe:	f8 01       	movw	r30, r16
    2100:	d7 82       	std	Z+7, r13	; 0x07
    2102:	c6 82       	std	Z+6, r12	; 0x06

    /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
    osEE_lock_core(p_cdb);

    p_to =  osEE_scheduler_task_block_current(osEE_get_kernel(),
    2104:	ae 01       	movw	r20, r28
    2106:	4f 5f       	subi	r20, 0xFF	; 255
    2108:	5f 4f       	sbci	r21, 0xFF	; 255
    210a:	63 e6       	ldi	r22, 0x63	; 99
    210c:	72 e0       	ldi	r23, 0x02	; 2
    210e:	8d e4       	ldi	r24, 0x4D	; 77
    2110:	92 e0       	ldi	r25, 0x02	; 2
    2112:	0e 94 d5 13 	call	0x27aa	; 0x27aa <osEE_scheduler_task_block_current>
              p_cdb, &p_blocked_sn);

    /* Release the SN, I will allocate a new one when the TASK will be
     * reinserted into be reinserted in RQ */
    osEE_sn_release(&p_ccb->p_free_sn, p_blocked_sn);
    2116:	e9 81       	ldd	r30, Y+1	; 0x01
    2118:	fa 81       	ldd	r31, Y+2	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    211a:	d7 01       	movw	r26, r14
    211c:	14 96       	adiw	r26, 0x04	; 4
    211e:	2d 91       	ld	r18, X+
    2120:	3c 91       	ld	r19, X
    2122:	15 97       	sbiw	r26, 0x05	; 5
    2124:	31 83       	std	Z+1, r19	; 0x01
    2126:	20 83       	st	Z, r18
  (*pp_first)       = p_to_free;
    2128:	15 96       	adiw	r26, 0x05	; 5
    212a:	fc 93       	st	X, r31
    212c:	ee 93       	st	-X, r30
    212e:	14 97       	sbiw	r26, 0x04	; 4

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_to);
    2130:	bc 01       	movw	r22, r24
    2132:	c5 01       	movw	r24, r10
    2134:	0e 94 49 15 	call	0x2a92	; 0x2a92 <osEE_change_context_from_running>

    /* Reset the waiting mask */
    p_curr_tcb->wait_mask = 0U;
    2138:	f8 01       	movw	r30, r16
    213a:	17 82       	std	Z+7, r1	; 0x07
    213c:	16 82       	std	Z+6, r1	; 0x06
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    213e:	9f be       	out	0x3f, r9	; 63

    osEE_end_primitive(flags);

    ev = E_OK;
  } else {
    ev = E_OK;
    2140:	10 e0       	ldi	r17, 0x00	; 0
    2142:	00 e0       	ldi	r16, 0x00	; 0
  }
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
    2144:	14 c0       	rjmp	.+40     	; 0x216e <WaitEvent+0xe4>
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    2146:	0c e0       	ldi	r16, 0x0C	; 12
    2148:	10 e0       	ldi	r17, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    214a:	bf b6       	in	r11, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    214c:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    214e:	82 e2       	ldi	r24, 0x22	; 34
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	d7 01       	movw	r26, r14
    2154:	1e 96       	adiw	r26, 0x0e	; 14
    2156:	9c 93       	st	X, r25
    2158:	8e 93       	st	-X, r24
    215a:	1d 97       	sbiw	r26, 0x0d	; 13
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    215c:	50 96       	adiw	r26, 0x10	; 16
    215e:	dc 92       	st	X, r13
    2160:	ce 92       	st	-X, r12
    2162:	1f 97       	sbiw	r26, 0x0f	; 15
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_set_service_id(p_ccb, OSServiceId_WaitEvent);
    param.num_param = Mask;
    osEE_set_api_param1(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    2164:	b8 01       	movw	r22, r16
    2166:	c7 01       	movw	r24, r14
    2168:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    216c:	bf be       	out	0x3f, r11	; 63
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
    216e:	c8 01       	movw	r24, r16
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	1f 91       	pop	r17
    217a:	0f 91       	pop	r16
    217c:	ff 90       	pop	r15
    217e:	ef 90       	pop	r14
    2180:	df 90       	pop	r13
    2182:	cf 90       	pop	r12
    2184:	bf 90       	pop	r11
    2186:	af 90       	pop	r10
    2188:	9f 90       	pop	r9
    218a:	08 95       	ret
    if (p_curr_tcb->p_first_mtx->mtx_type == OSEE_MUTEX_SPINLOCK) {
      ev = E_OS_SPINLOCK
    } else
#endif /* !OSEE_SINGLECORE */
    {
      ev = E_OS_RESOURCE;
    218c:	06 e0       	ldi	r16, 0x06	; 6
    218e:	10 e0       	ldi	r17, 0x00	; 0
    2190:	dc cf       	rjmp	.-72     	; 0x214a <WaitEvent+0xc0>
    }
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    ev = E_OS_ACCESS;
    2192:	01 e0       	ldi	r16, 0x01	; 1
    2194:	10 e0       	ldi	r17, 0x00	; 0
    2196:	d9 cf       	rjmp	.-78     	; 0x214a <WaitEvent+0xc0>

00002198 <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    2198:	df 92       	push	r13
    219a:	ef 92       	push	r14
    219c:	ff 92       	push	r15
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	18 2f       	mov	r17, r24
    21a8:	7b 01       	movw	r14, r22
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_curr_cdb  = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_ccb  = p_curr_cdb->p_ccb;
    21aa:	c0 91 63 02 	lds	r28, 0x0263	; 0x800263 <CDB>
    21ae:	d0 91 64 02 	lds	r29, 0x0264	; 0x800264 <CDB+0x1>
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
/* SetEvent is callable by Task and ISR2 */
  if (osEE_check_disableint(p_curr_ccb)) {
    21b2:	ce 01       	movw	r24, r28
    21b4:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <osEE_check_disableint>
    21b8:	21 2f       	mov	r18, r17
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	89 2b       	or	r24, r25
    21be:	09 f0       	breq	.+2      	; 0x21c2 <SetEvent+0x2a>
    21c0:	76 c0       	rjmp	.+236    	; 0x22ae <SetEvent+0x116>
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type > OSEE_TASK_TYPE_ISR2)
    21c2:	e8 81       	ld	r30, Y
    21c4:	f9 81       	ldd	r31, Y+1	; 0x01
    21c6:	87 81       	ldd	r24, Z+7	; 0x07
    21c8:	90 85       	ldd	r25, Z+8	; 0x08
    21ca:	03 97       	sbiw	r24, 0x03	; 3
    21cc:	08 f0       	brcs	.+2      	; 0x21d0 <SetEvent+0x38>
    21ce:	72 c0       	rjmp	.+228    	; 0x22b4 <SetEvent+0x11c>
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    21d0:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <KDB+0x6>
    21d4:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <KDB+0x7>
    21d8:	28 17       	cp	r18, r24
    21da:	39 07       	cpc	r19, r25
    21dc:	08 f0       	brcs	.+2      	; 0x21e0 <SetEvent+0x48>
    21de:	6d c0       	rjmp	.+218    	; 0x22ba <SetEvent+0x122>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
    21e0:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <KDB+0x2>
    21e4:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <KDB+0x3>
    21e8:	c9 01       	movw	r24, r18
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	e8 0f       	add	r30, r24
    21f0:	f9 1f       	adc	r31, r25
    21f2:	a0 81       	ld	r26, Z
    21f4:	b1 81       	ldd	r27, Z+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_waking_up = p_tdb_waking_up->p_tcb;
    21f6:	14 96       	adiw	r26, 0x04	; 4
    21f8:	ed 91       	ld	r30, X+
    21fa:	fc 91       	ld	r31, X
    21fc:	15 97       	sbiw	r26, 0x05	; 5
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    21fe:	1f b7       	in	r17, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    2200:	f8 94       	cli

    /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
    osEE_lock_core(p_cdb_waking_up);

#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
    2202:	17 96       	adiw	r26, 0x07	; 7
    2204:	8d 91       	ld	r24, X+
    2206:	9c 91       	ld	r25, X
    2208:	18 97       	sbiw	r26, 0x08	; 8
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	99 f0       	breq	.+38     	; 0x2234 <SetEvent+0x9c>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    220e:	1f bf       	out	0x3f, r17	; 63
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_ACCESS;
    2210:	01 e0       	ldi	r16, 0x01	; 1
    2212:	10 e0       	ldi	r17, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    2214:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    2216:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    2218:	8c e1       	ldi	r24, 0x1C	; 28
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9e 87       	std	Y+14, r25	; 0x0e
    221e:	8d 87       	std	Y+13, r24	; 0x0d
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    2220:	38 8b       	std	Y+16, r19	; 0x10
    2222:	2f 87       	std	Y+15, r18	; 0x0f
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param2 = api_param;
    2224:	fa 8a       	std	Y+18, r15	; 0x12
    2226:	e9 8a       	std	Y+17, r14	; 0x11
    osEE_set_service_id(p_curr_ccb, OSServiceId_SetEvent);
    param.num_param = TaskID;
    osEE_set_api_param1(p_curr_ccb, param);
    param.num_param = Mask;
    osEE_set_api_param2(p_curr_ccb, param);
    osEE_call_error_hook(p_curr_ccb, ev);
    2228:	b8 01       	movw	r22, r16
    222a:	ce 01       	movw	r24, r28
    222c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    2230:	df be       	out	0x3f, r13	; 63
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
    2232:	34 c0       	rjmp	.+104    	; 0x229c <SetEvent+0x104>
    if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_waking_up->status == OSEE_TASK_SUSPENDED) {
    2234:	42 81       	ldd	r20, Z+2	; 0x02
    2236:	53 81       	ldd	r21, Z+3	; 0x03
    2238:	41 15       	cp	r20, r1
    223a:	51 05       	cpc	r21, r1
    223c:	21 f4       	brne	.+8      	; 0x2246 <SetEvent+0xae>
    223e:	1f bf       	out	0x3f, r17	; 63
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_STATE;
    2240:	07 e0       	ldi	r16, 0x07	; 7
    2242:	10 e0       	ldi	r17, 0x00	; 0
    2244:	e7 cf       	rjmp	.-50     	; 0x2214 <SetEvent+0x7c>
    } else
#endif /* OSEE_HAS_CHECKS */
    {
      /* Set the event mask only if the task is not suspended */
      p_tcb_waking_up->event_mask |= Mask;
    2246:	80 85       	ldd	r24, Z+8	; 0x08
    2248:	91 85       	ldd	r25, Z+9	; 0x09
    224a:	8e 29       	or	r24, r14
    224c:	9f 29       	or	r25, r15
    224e:	91 87       	std	Z+9, r25	; 0x09
    2250:	80 87       	std	Z+8, r24	; 0x08

      if (((p_tcb_waking_up->wait_mask & Mask) != 0U) &&
    2252:	86 81       	ldd	r24, Z+6	; 0x06
    2254:	97 81       	ldd	r25, Z+7	; 0x07
    2256:	e8 22       	and	r14, r24
    2258:	f9 22       	and	r15, r25
    225a:	ef 28       	or	r14, r15
    225c:	e1 f0       	breq	.+56     	; 0x2296 <SetEvent+0xfe>
    225e:	43 30       	cpi	r20, 0x03	; 3
    2260:	51 05       	cpc	r21, r1
    2262:	c9 f4       	brne	.+50     	; 0x2296 <SetEvent+0xfe>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    2264:	ec 81       	ldd	r30, Y+4	; 0x04
    2266:	fd 81       	ldd	r31, Y+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    2268:	80 81       	ld	r24, Z
    226a:	91 81       	ldd	r25, Z+1	; 0x01
    226c:	9d 83       	std	Y+5, r25	; 0x05
    226e:	8c 83       	std	Y+4, r24	; 0x04
  p_sn_allocated->p_next  = NULL;
    2270:	11 82       	std	Z+1, r1	; 0x01
    2272:	10 82       	st	Z, r1
          (p_tcb_waking_up->status == OSEE_TASK_WAITING))
      {
        CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
          p_sn = osEE_sn_alloc(&p_cdb_waking_up->p_ccb->p_free_sn);

        p_sn->p_tdb = p_tdb_waking_up;
    2274:	b3 83       	std	Z+3, r27	; 0x03
    2276:	a2 83       	std	Z+2, r26	; 0x02

        /* Release the TASK (and the SN) */
        if (osEE_scheduler_task_unblocked(p_kdb, p_cdb_waking_up, p_sn))
    2278:	af 01       	movw	r20, r30
    227a:	63 e6       	ldi	r22, 0x63	; 99
    227c:	72 e0       	ldi	r23, 0x02	; 2
    227e:	8d e4       	ldi	r24, 0x4D	; 77
    2280:	92 e0       	ldi	r25, 0x02	; 2
    2282:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <osEE_scheduler_task_unblocked>
    2286:	89 2b       	or	r24, r25
    2288:	31 f0       	breq	.+12     	; 0x2296 <SetEvent+0xfe>
        {
          (void)osEE_scheduler_task_preemption_point(p_kdb, p_cdb_waking_up);
    228a:	63 e6       	ldi	r22, 0x63	; 99
    228c:	72 e0       	ldi	r23, 0x02	; 2
    228e:	8d e4       	ldi	r24, 0x4D	; 77
    2290:	92 e0       	ldi	r25, 0x02	; 2
    2292:	0e 94 a9 14 	call	0x2952	; 0x2952 <osEE_scheduler_task_preemption_point>
    2296:	1f bf       	out	0x3f, r17	; 63
      }

      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);

      ev = E_OK;
    2298:	10 e0       	ldi	r17, 0x00	; 0
    229a:	00 e0       	ldi	r16, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    229c:	c8 01       	movw	r24, r16
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	ff 90       	pop	r15
    22a8:	ef 90       	pop	r14
    22aa:	df 90       	pop	r13
    22ac:	08 95       	ret
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
/* SetEvent is callable by Task and ISR2 */
  if (osEE_check_disableint(p_curr_ccb)) {
    ev = E_OS_DISABLEDINT;
    22ae:	0c e0       	ldi	r16, 0x0C	; 12
    22b0:	10 e0       	ldi	r17, 0x00	; 0
    22b2:	b0 cf       	rjmp	.-160    	; 0x2214 <SetEvent+0x7c>
#else
    || (p_curr_ccb->os_context > OSEE_TASK_ISR2_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    22b4:	02 e0       	ldi	r16, 0x02	; 2
    22b6:	10 e0       	ldi	r17, 0x00	; 0
    22b8:	ad cf       	rjmp	.-166    	; 0x2214 <SetEvent+0x7c>
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    22ba:	03 e0       	ldi	r16, 0x03	; 3
    22bc:	10 e0       	ldi	r17, 0x00	; 0
    22be:	aa cf       	rjmp	.-172    	; 0x2214 <SetEvent+0x7c>

000022c0 <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
    22c0:	df 92       	push	r13
    22c2:	ef 92       	push	r14
    22c4:	ff 92       	push	r15
    22c6:	0f 93       	push	r16
    22c8:	1f 93       	push	r17
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	c8 2f       	mov	r28, r24
    22d0:	7b 01       	movw	r14, r22
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    22d2:	00 91 63 02 	lds	r16, 0x0263	; 0x800263 <CDB>
    22d6:	10 91 64 02 	lds	r17, 0x0264	; 0x800264 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    22da:	c8 01       	movw	r24, r16
    22dc:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <osEE_check_disableint>
    22e0:	2c 2f       	mov	r18, r28
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	89 2b       	or	r24, r25
    22e6:	e1 f5       	brne	.+120    	; 0x2360 <GetEvent+0xa0>
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type > OSEE_TASK_TYPE_ISR2)
    22e8:	d8 01       	movw	r26, r16
    22ea:	ed 91       	ld	r30, X+
    22ec:	fc 91       	ld	r31, X
    22ee:	87 81       	ldd	r24, Z+7	; 0x07
    22f0:	90 85       	ldd	r25, Z+8	; 0x08
    22f2:	03 97       	sbiw	r24, 0x03	; 3
    22f4:	08 f0       	brcs	.+2      	; 0x22f8 <GetEvent+0x38>
    22f6:	4d c0       	rjmp	.+154    	; 0x2392 <GetEvent+0xd2>
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    22f8:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <KDB+0x6>
    22fc:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <KDB+0x7>
    2300:	28 17       	cp	r18, r24
    2302:	39 07       	cpc	r19, r25
    2304:	08 f0       	brcs	.+2      	; 0x2308 <GetEvent+0x48>
    2306:	48 c0       	rjmp	.+144    	; 0x2398 <GetEvent+0xd8>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
    2308:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <KDB+0x2>
    230c:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <KDB+0x3>
    2310:	c9 01       	movw	r24, r18
    2312:	88 0f       	add	r24, r24
    2314:	99 1f       	adc	r25, r25
    2316:	e8 0f       	add	r30, r24
    2318:	f9 1f       	adc	r31, r25
    231a:	01 90       	ld	r0, Z+
    231c:	f0 81       	ld	r31, Z
    231e:	e0 2d       	mov	r30, r0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    /* XXX: We will accept an harmless race condition here for TASKs that want
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
    2320:	87 81       	ldd	r24, Z+7	; 0x07
    2322:	90 85       	ldd	r25, Z+8	; 0x08
      ev = E_OS_ACCESS;
    2324:	c1 e0       	ldi	r28, 0x01	; 1
    2326:	d0 e0       	ldi	r29, 0x00	; 0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    /* XXX: We will accept an harmless race condition here for TASKs that want
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	e1 f4       	brne	.+56     	; 0x2364 <GetEvent+0xa4>
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    232c:	04 80       	ldd	r0, Z+4	; 0x04
    232e:	f5 81       	ldd	r31, Z+5	; 0x05
    2330:	e0 2d       	mov	r30, r0
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
    2332:	82 81       	ldd	r24, Z+2	; 0x02
    2334:	93 81       	ldd	r25, Z+3	; 0x03
    2336:	89 2b       	or	r24, r25
    2338:	91 f1       	breq	.+100    	; 0x239e <GetEvent+0xde>
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
    233a:	e1 14       	cp	r14, r1
    233c:	f1 04       	cpc	r15, r1
    233e:	91 f1       	breq	.+100    	; 0x23a4 <GetEvent+0xe4>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      (*Event) = p_tcb_event->event_mask;
    2340:	80 85       	ldd	r24, Z+8	; 0x08
    2342:	91 85       	ldd	r25, Z+9	; 0x09
    2344:	f7 01       	movw	r30, r14
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24

      ev = E_OK;
    234a:	d0 e0       	ldi	r29, 0x00	; 0
    234c:	c0 e0       	ldi	r28, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    234e:	ce 01       	movw	r24, r28
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	df 90       	pop	r13
    235e:	08 95       	ret
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    2360:	cc e0       	ldi	r28, 0x0C	; 12
    2362:	d0 e0       	ldi	r29, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    2364:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    2366:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    2368:	80 e2       	ldi	r24, 0x20	; 32
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	d8 01       	movw	r26, r16
    236e:	1e 96       	adiw	r26, 0x0e	; 14
    2370:	9c 93       	st	X, r25
    2372:	8e 93       	st	-X, r24
    2374:	1d 97       	sbiw	r26, 0x0d	; 13
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    2376:	50 96       	adiw	r26, 0x10	; 16
    2378:	3c 93       	st	X, r19
    237a:	2e 93       	st	-X, r18
    237c:	1f 97       	sbiw	r26, 0x0f	; 15
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param2 = api_param;
    237e:	52 96       	adiw	r26, 0x12	; 18
    2380:	fc 92       	st	X, r15
    2382:	ee 92       	st	-X, r14
    2384:	51 97       	sbiw	r26, 0x11	; 17
    osEE_set_service_id(p_ccb, OSServiceId_GetEvent);
    param.num_param = TaskID;
    osEE_set_api_param1(p_ccb, param);
    param.p_param   = Event;
    osEE_set_api_param2(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    2386:	be 01       	movw	r22, r28
    2388:	c8 01       	movw	r24, r16
    238a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    238e:	df be       	out	0x3f, r13	; 63
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
    2390:	de cf       	rjmp	.-68     	; 0x234e <GetEvent+0x8e>
        (os_context != OSEE_PRETASKHOOK_CTX) &&
        (os_context != OSEE_POSTTASKHOOK_CTX))
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    2392:	c2 e0       	ldi	r28, 0x02	; 2
    2394:	d0 e0       	ldi	r29, 0x00	; 0
    2396:	e6 cf       	rjmp	.-52     	; 0x2364 <GetEvent+0xa4>
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    2398:	c3 e0       	ldi	r28, 0x03	; 3
    239a:	d0 e0       	ldi	r29, 0x00	; 0
    239c:	e3 cf       	rjmp	.-58     	; 0x2364 <GetEvent+0xa4>
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    239e:	c7 e0       	ldi	r28, 0x07	; 7
    23a0:	d0 e0       	ldi	r29, 0x00	; 0
    23a2:	e0 cf       	rjmp	.-64     	; 0x2364 <GetEvent+0xa4>
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
    23a4:	ce e0       	ldi	r28, 0x0E	; 14
    23a6:	d0 e0       	ldi	r29, 0x00	; 0
    23a8:	dd cf       	rjmp	.-70     	; 0x2364 <GetEvent+0xa4>

000023aa <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    23aa:	df 92       	push	r13
    23ac:	ef 92       	push	r14
    23ae:	ff 92       	push	r15
    23b0:	0f 93       	push	r16
    23b2:	1f 93       	push	r17
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	7c 01       	movw	r14, r24
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    23ba:	00 91 63 02 	lds	r16, 0x0263	; 0x800263 <CDB>
    23be:	10 91 64 02 	lds	r17, 0x0264	; 0x800264 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    23c2:	c8 01       	movw	r24, r16
    23c4:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <osEE_check_disableint>
    23c8:	89 2b       	or	r24, r25
    23ca:	21 f5       	brne	.+72     	; 0x2414 <ClearEvent+0x6a>
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    23cc:	d8 01       	movw	r26, r16
    23ce:	ed 91       	ld	r30, X+
    23d0:	fc 91       	ld	r31, X
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    23d2:	87 81       	ldd	r24, Z+7	; 0x07
    23d4:	90 85       	ldd	r25, Z+8	; 0x08
#else
    || (p_ccb->os_context > OSEE_TASK_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    23d6:	c2 e0       	ldi	r28, 0x02	; 2
    23d8:	d0 e0       	ldi	r29, 0x00	; 0
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    23da:	82 30       	cpi	r24, 0x02	; 2
    23dc:	91 05       	cpc	r25, r1
    23de:	e0 f4       	brcc	.+56     	; 0x2418 <ClearEvent+0x6e>
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    ev = E_OS_ACCESS;
    23e0:	c1 e0       	ldi	r28, 0x01	; 1
    23e2:	d0 e0       	ldi	r29, 0x00	; 0
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	c1 f4       	brne	.+48     	; 0x2418 <ClearEvent+0x6e>
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    23e8:	04 80       	ldd	r0, Z+4	; 0x04
    23ea:	f5 81       	ldd	r31, Z+5	; 0x05
    23ec:	e0 2d       	mov	r30, r0
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* clear the event */
    p_curr_tcb->event_mask &= ~Mask;
    23ee:	e0 94       	com	r14
    23f0:	f0 94       	com	r15
    23f2:	80 85       	ldd	r24, Z+8	; 0x08
    23f4:	91 85       	ldd	r25, Z+9	; 0x09
    23f6:	e8 22       	and	r14, r24
    23f8:	f9 22       	and	r15, r25
    23fa:	f1 86       	std	Z+9, r15	; 0x09
    23fc:	e0 86       	std	Z+8, r14	; 0x08

    ev = E_OK;
    23fe:	d0 e0       	ldi	r29, 0x00	; 0
    2400:	c0 e0       	ldi	r28, 0x00	; 0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
    2402:	ce 01       	movw	r24, r28
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	08 95       	ret
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    2414:	cc e0       	ldi	r28, 0x0C	; 12
    2416:	d0 e0       	ldi	r29, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    2418:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    241a:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    241c:	8e e1       	ldi	r24, 0x1E	; 30
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	f8 01       	movw	r30, r16
    2422:	96 87       	std	Z+14, r25	; 0x0e
    2424:	85 87       	std	Z+13, r24	; 0x0d
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    2426:	f0 8a       	std	Z+16, r15	; 0x10
    2428:	e7 86       	std	Z+15, r14	; 0x0f
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_set_service_id(p_ccb, OSServiceId_ClearEvent);
    param.num_param = Mask;
    osEE_set_api_param1(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    242a:	be 01       	movw	r22, r28
    242c:	c8 01       	movw	r24, r16
    242e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    2432:	df be       	out	0x3f, r13	; 63
  }
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
    2434:	e6 cf       	rjmp	.-52     	; 0x2402 <ClearEvent+0x58>

00002436 <osEE_get_service_id>:
#if (defined(OSEE_HAS_ORTI))
  return (OSServiceIdType)(
    ((OsEE_reg)osEE_get_curr_core()->p_ccb->service_id) & (~((OsEE_reg)0x1U))
  );
#else
  return osEE_get_curr_core()->p_ccb->service_id;
    2436:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <CDB>
    243a:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <CDB+0x1>
#endif /* OSEE_HAS_ORTI */
}
    243e:	85 85       	ldd	r24, Z+13	; 0x0d
    2440:	96 85       	ldd	r25, Z+14	; 0x0e
    2442:	08 95       	ret

00002444 <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    2444:	cf 93       	push	r28
    2446:	df 93       	push	r29
    2448:	00 d0       	rcall	.+0      	; 0x244a <osEE_scheduler_task_end+0x6>
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
    244e:	ae 01       	movw	r20, r28
    2450:	4f 5f       	subi	r20, 0xFF	; 255
    2452:	5f 4f       	sbci	r21, 0xFF	; 255
    2454:	63 e6       	ldi	r22, 0x63	; 99
    2456:	72 e0       	ldi	r23, 0x02	; 2
    2458:	8d e4       	ldi	r24, 0x4D	; 77
    245a:	92 e0       	ldi	r25, 0x02	; 2
    245c:	0e 94 2c 14 	call	0x2858	; 0x2858 <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    2460:	bc 01       	movw	r22, r24
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	08 95       	ret

00002474 <osEE_scheduler_task_wrapper_restore>:
)
{
#if (defined(OSEE_HAS_PRETASKHOOK)) || (defined(OSEE_SCHEDULER_GLOBAL)) ||\
    (defined(OSEE_HAS_CONTEXT)) || (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    2474:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <CDB>
    2478:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <CDB+0x1>

#endif /* OSEE_HAS_ORTI */
  /* Call PreTaskHook only if I'm scheduling a real TASK not an ISR2 or the
   * Idle TASK */
#if (defined(OSEE_HAS_PRETASKHOOK)) || (defined(OSEE_HAS_CONTEXT))
  if (p_tdb_to->task_type <= OSEE_TASK_TYPE_EXTENDED) {
    247c:	dc 01       	movw	r26, r24
    247e:	17 96       	adiw	r26, 0x07	; 7
    2480:	8d 91       	ld	r24, X+
    2482:	9c 91       	ld	r25, X
    2484:	82 30       	cpi	r24, 0x02	; 2
    2486:	91 05       	cpc	r25, r1
    2488:	28 f4       	brcc	.+10     	; 0x2494 <osEE_scheduler_task_wrapper_restore+0x20>
      p_ccb->p_last_tdb_hook = p_tdb_to;
      osEE_call_pre_task_hook(p_ccb);
    }
#endif /* OSEE_HAS_PRETASKHOOK */
#if (defined(OSEE_HAS_CONTEXT))
    p_ccb->os_context = OSEE_TASK_CTX;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (defined(OSEE_HAS_CONTEXT))
  else if (p_tdb_to->task_type == OSEE_TASK_TYPE_ISR2) {
    p_ccb->os_context = OSEE_TASK_ISR2_CTX;
  } else {
    p_ccb->os_context = OSEE_IDLE_CTX;
    248e:	96 8b       	std	Z+22, r25	; 0x16
    2490:	85 8b       	std	Z+21, r24	; 0x15
    p_ccb->p_lock_to_be_released = NULL;
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
    2492:	08 95       	ret
#if (defined(OSEE_HAS_CONTEXT))
    p_ccb->os_context = OSEE_TASK_CTX;
#endif /* OSEE_HAS_CONTEXT */
  }
#if (defined(OSEE_HAS_CONTEXT))
  else if (p_tdb_to->task_type == OSEE_TASK_TYPE_ISR2) {
    2494:	82 30       	cpi	r24, 0x02	; 2
    2496:	91 05       	cpc	r25, r1
    2498:	d1 f3       	breq	.-12     	; 0x248e <osEE_scheduler_task_wrapper_restore+0x1a>
    p_ccb->os_context = OSEE_TASK_ISR2_CTX;
  } else {
    p_ccb->os_context = OSEE_IDLE_CTX;
    249a:	8a e0       	ldi	r24, 0x0A	; 10
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	f7 cf       	rjmp	.-18     	; 0x248e <osEE_scheduler_task_wrapper_restore+0x1a>

000024a0 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    24a0:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
    24a2:	ec 81       	ldd	r30, Y+4	; 0x04
    24a4:	fd 81       	ldd	r31, Y+5	; 0x05
    24a6:	11 81       	ldd	r17, Z+1	; 0x01
  osEE_scheduler_task_wrapper_restore(p_tdb_to);
    24a8:	0e 94 3a 12 	call	0x2474	; 0x2474 <osEE_scheduler_task_wrapper_restore>

  if (task_prio < OSEE_ISR_ALL_PRIO) {
    24ac:	1f 3f       	cpi	r17, 0xFF	; 255
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <osEE_scheduler_task_wrapper_run+0x12>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
    24b0:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
    24b2:	e9 85       	ldd	r30, Y+9	; 0x09
    24b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    24b6:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    24b8:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    24ba:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
    24bc:	62 e2       	ldi	r22, 0x22	; 34
    24be:	72 e1       	ldi	r23, 0x12	; 18
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	9b 81       	ldd	r25, Y+3	; 0x03
    24c4:	0e 94 36 01 	call	0x26c	; 0x26c <osEE_hal_terminate_ctx>

000024c8 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    24d0:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    24d2:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
    24d4:	63 e6       	ldi	r22, 0x63	; 99
    24d6:	72 e0       	ldi	r23, 0x02	; 2
    24d8:	8d e4       	ldi	r24, 0x4D	; 77
    24da:	92 e0       	ldi	r25, 0x02	; 2
    24dc:	0e 94 a9 14 	call	0x2952	; 0x2952 <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    24e0:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    24e2:	00 91 63 02 	lds	r16, 0x0263	; 0x800263 <CDB>
    24e6:	10 91 64 02 	lds	r17, 0x0264	; 0x800264 <CDB+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    24ea:	c0 91 65 02 	lds	r28, 0x0265	; 0x800265 <CDB+0x2>
    24ee:	d0 91 66 02 	lds	r29, 0x0266	; 0x800266 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    24f2:	f8 01       	movw	r30, r16
    24f4:	80 85       	ldd	r24, Z+8	; 0x08
    24f6:	91 85       	ldd	r25, Z+9	; 0x09
    24f8:	82 30       	cpi	r24, 0x02	; 2
    24fa:	91 05       	cpc	r25, r1
    24fc:	51 f0       	breq	.+20     	; 0x2512 <osEE_idle_hook_wrapper+0x4a>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    24fe:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <CDB+0x4>
    2502:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <CDB+0x5>
}
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    250e:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    2512:	20 97       	sbiw	r28, 0x00	; 0
    2514:	89 f3       	breq	.-30     	; 0x24f8 <osEE_idle_hook_wrapper+0x30>
      p_idle_hook();
    2516:	fe 01       	movw	r30, r28
    2518:	09 95       	icall
    251a:	eb cf       	rjmp	.-42     	; 0x24f2 <osEE_idle_hook_wrapper+0x2a>

0000251c <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    2524:	ec 01       	movw	r28, r24
    2526:	a8 81       	ld	r26, Y
    2528:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    252a:	eb 01       	movw	r28, r22
    252c:	e8 81       	ld	r30, Y
    252e:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    2530:	16 96       	adiw	r26, 0x06	; 6
    2532:	cd 91       	ld	r28, X+
    2534:	dc 91       	ld	r29, X
    2536:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    2538:	20 97       	sbiw	r28, 0x00	; 0
    253a:	c1 f1       	breq	.+112    	; 0x25ac <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    2540:	30 97       	sbiw	r30, 0x00	; 0
    2542:	09 f4       	brne	.+2      	; 0x2546 <osEE_scheduler_core_rq_preempt_stk+0x2a>
    2544:	3f c0       	rjmp	.+126    	; 0x25c4 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    2546:	ec 01       	movw	r28, r24
    2548:	0c 81       	ldd	r16, Y+4	; 0x04
    254a:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    254c:	22 81       	ldd	r18, Z+2	; 0x02
    254e:	33 81       	ldd	r19, Z+3	; 0x03
    2550:	e9 01       	movw	r28, r18
    2552:	4c 81       	ldd	r20, Y+4	; 0x04
    2554:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    2556:	e8 01       	movw	r28, r16
    2558:	39 81       	ldd	r19, Y+1	; 0x01
    255a:	ea 01       	movw	r28, r20
    255c:	29 81       	ldd	r18, Y+1	; 0x01
    255e:	32 17       	cp	r19, r18
    2560:	88 f5       	brcc	.+98     	; 0x25c4 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    2562:	22 e0       	ldi	r18, 0x02	; 2
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	e8 01       	movw	r28, r16
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    2568:	3b 83       	std	Y+3, r19	; 0x03
    256a:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    256c:	20 81       	ld	r18, Z
    256e:	31 81       	ldd	r19, Z+1	; 0x01
    2570:	eb 01       	movw	r28, r22
    2572:	39 83       	std	Y+1, r19	; 0x01
    2574:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    2576:	c2 81       	ldd	r28, Z+2	; 0x02
    2578:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    257a:	2c 81       	ldd	r18, Y+4	; 0x04
    257c:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    257e:	16 96       	adiw	r26, 0x06	; 6
    2580:	4d 91       	ld	r20, X+
    2582:	5c 91       	ld	r21, X
    2584:	17 97       	sbiw	r26, 0x07	; 7
    2586:	51 83       	std	Z+1, r21	; 0x01
    2588:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    258a:	17 96       	adiw	r26, 0x07	; 7
    258c:	fc 93       	st	X, r31
    258e:	ee 93       	st	-X, r30
    2590:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    2592:	cd 93       	st	X+, r28
    2594:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    2596:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    2598:	f9 01       	movw	r30, r18
    259a:	51 81       	ldd	r21, Z+1	; 0x01
    259c:	54 17       	cp	r21, r20
    259e:	08 f4       	brcc	.+2      	; 0x25a2 <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
    25a0:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    25ac:	30 97       	sbiw	r30, 0x00	; 0
    25ae:	51 f0       	breq	.+20     	; 0x25c4 <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    25b0:	ec 01       	movw	r28, r24
    25b2:	8c 81       	ldd	r24, Y+4	; 0x04
    25b4:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    25b6:	ec 01       	movw	r28, r24
    25b8:	4c 81       	ldd	r20, Y+4	; 0x04
    25ba:	5d 81       	ldd	r21, Y+5	; 0x05
    25bc:	22 e0       	ldi	r18, 0x02	; 2
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	ea 01       	movw	r28, r20
    25c2:	d2 cf       	rjmp	.-92     	; 0x2568 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    p_ret_sn  = NULL;
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
    25c8:	ec cf       	rjmp	.-40     	; 0x25a2 <osEE_scheduler_core_rq_preempt_stk+0x86>

000025ca <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    25ca:	cf 92       	push	r12
    25cc:	df 92       	push	r13
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    25da:	eb 01       	movw	r28, r22
    25dc:	aa 81       	ldd	r26, Y+2	; 0x02
    25de:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    25e0:	14 96       	adiw	r26, 0x04	; 4
    25e2:	ed 91       	ld	r30, X+
    25e4:	fc 91       	ld	r31, X
    25e6:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    25e8:	41 15       	cp	r20, r1
    25ea:	51 05       	cpc	r21, r1
    25ec:	01 f1       	breq	.+64     	; 0x262e <osEE_sn_priority_insert+0x64>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    25ee:	22 81       	ldd	r18, Z+2	; 0x02
    25f0:	33 81       	ldd	r19, Z+3	; 0x03
    25f2:	22 30       	cpi	r18, 0x02	; 2
    25f4:	31 05       	cpc	r19, r1
    25f6:	d8 f0       	brcs	.+54     	; 0x262e <osEE_sn_priority_insert+0x64>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    25f8:	1b 96       	adiw	r26, 0x0b	; 11
    25fa:	2c 91       	ld	r18, X
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    25fc:	dc 01       	movw	r26, r24
    25fe:	ed 91       	ld	r30, X+
    2600:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    2606:	30 97       	sbiw	r30, 0x00	; 0
    2608:	a1 f4       	brne	.+40     	; 0x2632 <osEE_sn_priority_insert+0x68>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    260a:	10 97       	sbiw	r26, 0x00	; 0
    260c:	69 f1       	breq	.+90     	; 0x2668 <osEE_sn_priority_insert+0x9e>
    p_prev->p_next = p_sn_new;
    260e:	6d 93       	st	X+, r22
    2610:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
    2616:	eb 01       	movw	r28, r22
    2618:	f9 83       	std	Y+1, r31	; 0x01
    261a:	e8 83       	st	Y, r30

  return head_changed;
}
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	ff 90       	pop	r15
    2626:	ef 90       	pop	r14
    2628:	df 90       	pop	r13
    262a:	cf 90       	pop	r12
    262c:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    262e:	21 81       	ldd	r18, Z+1	; 0x01
    2630:	e5 cf       	rjmp	.-54     	; 0x25fc <osEE_sn_priority_insert+0x32>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    2632:	02 81       	ldd	r16, Z+2	; 0x02
    2634:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    2636:	e8 01       	movw	r28, r16
    2638:	cc 80       	ldd	r12, Y+4	; 0x04
    263a:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    263c:	41 15       	cp	r20, r1
    263e:	51 05       	cpc	r21, r1
    2640:	81 f0       	breq	.+32     	; 0x2662 <osEE_sn_priority_insert+0x98>
    2642:	e6 01       	movw	r28, r12
    2644:	ea 80       	ldd	r14, Y+2	; 0x02
    2646:	fb 80       	ldd	r15, Y+3	; 0x03
    2648:	d2 e0       	ldi	r29, 0x02	; 2
    264a:	ed 16       	cp	r14, r29
    264c:	f1 04       	cpc	r15, r1
    264e:	48 f0       	brcs	.+18     	; 0x2662 <osEE_sn_priority_insert+0x98>
      prio_to_check = p_cur_tdb->ready_prio;
    2650:	e8 01       	movw	r28, r16
    2652:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
    2654:	32 17       	cp	r19, r18
    2656:	c8 f2       	brcs	.-78     	; 0x260a <osEE_sn_priority_insert+0x40>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    2658:	df 01       	movw	r26, r30
    265a:	01 90       	ld	r0, Z+
    265c:	f0 81       	ld	r31, Z
    265e:	e0 2d       	mov	r30, r0
    2660:	d2 cf       	rjmp	.-92     	; 0x2606 <osEE_sn_priority_insert+0x3c>
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    2662:	e6 01       	movw	r28, r12
    2664:	39 81       	ldd	r19, Y+1	; 0x01
    2666:	f6 cf       	rjmp	.-20     	; 0x2654 <osEE_sn_priority_insert+0x8a>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    2668:	dc 01       	movw	r26, r24
    266a:	6d 93       	st	X+, r22
    266c:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	d1 cf       	rjmp	.-94     	; 0x2616 <osEE_sn_priority_insert+0x4c>

00002674 <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    2674:	fb 01       	movw	r30, r22
    2676:	53 83       	std	Z+3, r21	; 0x03
    2678:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <osEE_sn_priority_insert>

00002682 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    2682:	ef 92       	push	r14
    2684:	ff 92       	push	r15
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    2690:	fc 01       	movw	r30, r24
    2692:	c0 81       	ld	r28, Z
    2694:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    2696:	ee 80       	ldd	r14, Y+6	; 0x06
    2698:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    269a:	f7 01       	movw	r30, r14
    269c:	80 81       	ld	r24, Z
    269e:	91 81       	ldd	r25, Z+1	; 0x01
    26a0:	9f 83       	std	Y+7, r25	; 0x07
    26a2:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    26a4:	c8 01       	movw	r24, r16
    26a6:	0e 94 8e 12 	call	0x251c	; 0x251c <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    26aa:	89 2b       	or	r24, r25
    26ac:	41 f4       	brne	.+16     	; 0x26be <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    26ae:	ee 81       	ldd	r30, Y+6	; 0x06
    26b0:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    26b2:	30 97       	sbiw	r30, 0x00	; 0
    26b4:	61 f0       	breq	.+24     	; 0x26ce <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    26b6:	82 81       	ldd	r24, Z+2	; 0x02
    26b8:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
    26ba:	99 83       	std	Y+1, r25	; 0x01
    26bc:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    26be:	c7 01       	movw	r24, r14
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	ff 90       	pop	r15
    26ca:	ef 90       	pop	r14
    26cc:	08 95       	ret
      if ( p_curr_stk_sn != NULL ) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    26ce:	f8 01       	movw	r30, r16
    26d0:	84 81       	ldd	r24, Z+4	; 0x04
    26d2:	95 81       	ldd	r25, Z+5	; 0x05
    26d4:	f2 cf       	rjmp	.-28     	; 0x26ba <osEE_scheduler_core_pop_running+0x38>

000026d6 <osEE_scheduler_task_activated>:
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act,
  CONST(OsEE_bool, AUTOMATIC)               is_preemption_point
)
{
    26d6:	cf 92       	push	r12
    26d8:	df 92       	push	r13
    26da:	ef 92       	push	r14
    26dc:	ff 92       	push	r15
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act  = p_tdb_act->p_tcb;
    26e6:	da 01       	movw	r26, r20
    26e8:	14 96       	adiw	r26, 0x04	; 4
    26ea:	cd 91       	ld	r28, X+
    26ec:	dc 91       	ld	r29, X
    26ee:	15 97       	sbiw	r26, 0x05	; 5

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act)
    26f0:	98 81       	ld	r25, Y
    26f2:	1d 96       	adiw	r26, 0x0d	; 13
    26f4:	8c 91       	ld	r24, X
    26f6:	98 17       	cp	r25, r24
    26f8:	08 f0       	brcs	.+2      	; 0x26fc <osEE_scheduler_task_activated+0x26>
    26fa:	54 c0       	rjmp	.+168    	; 0x27a4 <osEE_scheduler_task_activated+0xce>
  {
    CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
    26fc:	db 01       	movw	r26, r22
    26fe:	ed 91       	ld	r30, X+
    2700:	fc 91       	ld	r31, X
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
    2702:	00 81       	ld	r16, Z
    2704:	11 81       	ldd	r17, Z+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
    2706:	d8 01       	movw	r26, r16
    2708:	14 96       	adiw	r26, 0x04	; 4
    270a:	ed 90       	ld	r14, X+
    270c:	fc 90       	ld	r15, X

    ++p_tcb_act->current_num_of_act;
    270e:	9f 5f       	subi	r25, 0xFF	; 255
    2710:	98 83       	st	Y, r25
    2712:	c4 80       	ldd	r12, Z+4	; 0x04
    2714:	d5 80       	ldd	r13, Z+5	; 0x05
    2716:	d6 01       	movw	r26, r12
    2718:	6d 91       	ld	r22, X+
    271a:	7c 91       	ld	r23, X
        osEE_hal_signal_core(p_tdb_act->orig_core_id);
      }
    } else
#endif /* !OSEE_SINGLECORE */
    /* Preemption Check */
    if ((is_preemption_point) &&
    271c:	23 2b       	or	r18, r19
    271e:	69 f1       	breq	.+90     	; 0x277a <osEE_scheduler_task_activated+0xa4>
    2720:	d7 01       	movw	r26, r14
    2722:	11 96       	adiw	r26, 0x01	; 1
    2724:	9c 91       	ld	r25, X
    2726:	11 97       	sbiw	r26, 0x01	; 1
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	98 17       	cp	r25, r24
    272c:	30 f5       	brcc	.+76     	; 0x277a <osEE_scheduler_task_activated+0xa4>
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
  (*pp_fist)              = p_sn_allocated->p_next;
    272e:	75 83       	std	Z+5, r23	; 0x05
    2730:	64 83       	std	Z+4, r22	; 0x04

      /* Call PostTaskHook before switching active TASK */
      osEE_call_post_task_hook(p_ccb);

      /* Set Previous TASK status as Ready but stacked */
      p_curr_tcb->status = OSEE_TASK_READY_STACKED;
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	13 96       	adiw	r26, 0x03	; 3
    2738:	9c 93       	st	X, r25
    273a:	8e 93       	st	-X, r24
    273c:	12 97       	sbiw	r26, 0x02	; 2

      /* Set the activated TASK as current */
      p_new_stk->p_tdb            = p_tdb_act;
    273e:	d6 01       	movw	r26, r12
    2740:	13 96       	adiw	r26, 0x03	; 3
    2742:	5c 93       	st	X, r21
    2744:	4e 93       	st	-X, r20
    2746:	12 97       	sbiw	r26, 0x02	; 2
      p_new_stk->p_next           = p_ccb->p_stk_sn;
    2748:	86 81       	ldd	r24, Z+6	; 0x06
    274a:	97 81       	ldd	r25, Z+7	; 0x07
    274c:	8d 93       	st	X+, r24
    274e:	9c 93       	st	X, r25
      p_ccb->p_stk_sn             = p_new_stk;
    2750:	d7 82       	std	Z+7, r13	; 0x07
    2752:	c6 82       	std	Z+6, r12	; 0x06
      p_ccb->p_curr               = p_tdb_act;
    2754:	51 83       	std	Z+1, r21	; 0x01
    2756:	40 83       	st	Z, r20
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    2758:	19 86       	std	Y+9, r1	; 0x09
    275a:	18 86       	std	Y+8, r1	; 0x08
      osEE_unlock_core(p_cdb);

#if (defined(OSEE_HAS_EVENTS))
      osEE_event_reset_mask(p_tdb_act->p_tcb);
#endif /* OSEE_HAS_EVENTS */
      osEE_change_context_from_running(p_curr, p_tdb_act);
    275c:	ba 01       	movw	r22, r20
    275e:	c8 01       	movw	r24, r16
    2760:	0e 94 49 15 	call	0x2a92	; 0x2a92 <osEE_change_context_from_running>
    } else {
      /* Actually Insert the activated in READY Queue */
      osEE_scheduler_task_activated_insert_rq(p_cdb, p_ccb, p_tdb_act,
        p_tcb_act);
    }
    ev = E_OK;
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
  }
  return ev;
}
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	df 90       	pop	r13
    2776:	cf 90       	pop	r12
    2778:	08 95       	ret
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	89 2b       	or	r24, r25
    2780:	31 f4       	brne	.+12     	; 0x278e <osEE_scheduler_task_activated+0xb8>
    p_tcb_act->status = OSEE_TASK_READY;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9b 83       	std	Y+3, r25	; 0x03
    2788:	8a 83       	std	Y+2, r24	; 0x02
    278a:	19 86       	std	Y+9, r1	; 0x09
    278c:	18 86       	std	Y+8, r1	; 0x08
    278e:	75 83       	std	Z+5, r23	; 0x05
    2790:	64 83       	std	Z+4, r22	; 0x04
  p_sn_allocated->p_next  = NULL;
    2792:	d6 01       	movw	r26, r12
    2794:	1d 92       	st	X+, r1
    2796:	1c 92       	st	X, r1
    osEE_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    2798:	b6 01       	movw	r22, r12
    279a:	cf 01       	movw	r24, r30
    279c:	02 96       	adiw	r24, 0x02	; 2
    279e:	0e 94 3a 13 	call	0x2674	; 0x2674 <osEE_scheduler_rq_insert>
    27a2:	e0 cf       	rjmp	.-64     	; 0x2764 <osEE_scheduler_task_activated+0x8e>
        p_tcb_act);
    }
    ev = E_OK;
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
    27a4:	84 e0       	ldi	r24, 0x04	; 4
    27a6:	90 e0       	ldi	r25, 0x00	; 0
  }
  return ev;
    27a8:	df cf       	rjmp	.-66     	; 0x2768 <osEE_scheduler_task_activated+0x92>

000027aa <osEE_scheduler_task_block_current>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_SN *,  AUTOMATIC, OS_APPL_DATA)  p_sn_blocked
)
{
    27aa:	ef 92       	push	r14
    27ac:	ff 92       	push	r15
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	cb 01       	movw	r24, r22
    27b8:	7a 01       	movw	r14, r20
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    27ba:	db 01       	movw	r26, r22
    27bc:	cd 91       	ld	r28, X+
    27be:	dc 91       	ld	r29, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_blocked = p_ccb->p_curr;
    27c0:	fe 01       	movw	r30, r28
    27c2:	01 91       	ld	r16, Z+
    27c4:	11 91       	ld	r17, Z+
    27c6:	bf 01       	movw	r22, r30

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  (*p_sn_blocked) = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    27c8:	0e 94 41 13 	call	0x2682	; 0x2682 <osEE_scheduler_core_pop_running>
    27cc:	d7 01       	movw	r26, r14
    27ce:	8d 93       	st	X+, r24
    27d0:	9c 93       	st	X, r25

  p_tdb_blocked->p_tcb->status = OSEE_TASK_WAITING;
    27d2:	d8 01       	movw	r26, r16
    27d4:	14 96       	adiw	r26, 0x04	; 4
    27d6:	ed 91       	ld	r30, X+
    27d8:	fc 91       	ld	r31, X
    27da:	83 e0       	ldi	r24, 0x03	; 3
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	93 83       	std	Z+3, r25	; 0x03
    27e0:	82 83       	std	Z+2, r24	; 0x02

  osEE_unlock_core(p_cdb);

  return p_ccb->p_curr;
}
    27e2:	88 81       	ld	r24, Y
    27e4:	99 81       	ldd	r25, Y+1	; 0x01
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	ff 90       	pop	r15
    27f0:	ef 90       	pop	r14
    27f2:	08 95       	ret

000027f4 <osEE_scheduler_task_unblocked>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	fa 01       	movw	r30, r20
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
    27fe:	db 01       	movw	r26, r22
    2800:	0d 91       	ld	r16, X+
    2802:	1c 91       	ld	r17, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
    2804:	42 81       	ldd	r20, Z+2	; 0x02
    2806:	53 81       	ldd	r21, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
    2808:	da 01       	movw	r26, r20
    280a:	14 96       	adiw	r26, 0x04	; 4
    280c:	cd 91       	ld	r28, X+
    280e:	dc 91       	ld	r29, X
    2810:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
    2812:	82 e0       	ldi	r24, 0x02	; 2
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9b 83       	std	Y+3, r25	; 0x03
    2818:	8a 83       	std	Y+2, r24	; 0x02
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
    281a:	1b 96       	adiw	r26, 0x0b	; 11
    281c:	8c 91       	ld	r24, X
    281e:	89 83       	std	Y+1, r24	; 0x01

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    2820:	bf 01       	movw	r22, r30
    2822:	c8 01       	movw	r24, r16
    2824:	02 96       	adiw	r24, 0x02	; 2
    2826:	0e 94 3a 13 	call	0x2674	; 0x2674 <osEE_scheduler_rq_insert>
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	91 f4       	brne	.+36     	; 0x2852 <osEE_scheduler_task_unblocked+0x5e>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
    282e:	d8 01       	movw	r26, r16
    2830:	ed 91       	ld	r30, X+
    2832:	fc 91       	ld	r31, X
    2834:	04 80       	ldd	r0, Z+4	; 0x04
    2836:	f5 81       	ldd	r31, Z+5	; 0x05
    2838:	e0 2d       	mov	r30, r0

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    is_preemption = (p_tcb_released->current_prio >
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	39 81       	ldd	r19, Y+1	; 0x01
    2840:	21 81       	ldd	r18, Z+1	; 0x01
    2842:	23 17       	cp	r18, r19
    2844:	08 f0       	brcs	.+2      	; 0x2848 <osEE_scheduler_task_unblocked+0x54>
    2846:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	08 95       	ret
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
    2856:	f8 cf       	rjmp	.-16     	; 0x2848 <osEE_scheduler_task_unblocked+0x54>

00002858 <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    2858:	af 92       	push	r10
    285a:	bf 92       	push	r11
    285c:	cf 92       	push	r12
    285e:	df 92       	push	r13
    2860:	ef 92       	push	r14
    2862:	ff 92       	push	r15
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    286e:	db 01       	movw	r26, r22
    2870:	cd 91       	ld	r28, X+
    2872:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    2874:	fe 01       	movw	r30, r28
    2876:	01 91       	ld	r16, Z+
    2878:	11 91       	ld	r17, Z+
    287a:	6f 01       	movw	r12, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    287c:	d8 01       	movw	r26, r16
    287e:	14 96       	adiw	r26, 0x04	; 4
    2880:	ed 90       	ld	r14, X+
    2882:	fc 90       	ld	r15, X

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    2884:	fa 01       	movw	r30, r20
    2886:	11 83       	std	Z+1, r17	; 0x01
    2888:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    288a:	d7 01       	movw	r26, r14
    288c:	12 96       	adiw	r26, 0x02	; 2
    288e:	8d 91       	ld	r24, X+
    2890:	9c 91       	ld	r25, X
    2892:	04 97       	sbiw	r24, 0x04	; 4
    2894:	a9 f5       	brne	.+106    	; 0x2900 <osEE_scheduler_task_terminated+0xa8>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    2896:	b6 01       	movw	r22, r12
    2898:	c5 01       	movw	r24, r10
    289a:	0e 94 41 13 	call	0x2682	; 0x2682 <osEE_scheduler_core_pop_running>
    289e:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    28a0:	88 81       	ld	r24, Y
    28a2:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    28a4:	08 17       	cp	r16, r24
    28a6:	19 07       	cpc	r17, r25
    28a8:	31 f1       	breq	.+76     	; 0x28f6 <osEE_scheduler_task_terminated+0x9e>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    28aa:	d8 01       	movw	r26, r16
    28ac:	14 96       	adiw	r26, 0x04	; 4
    28ae:	ed 91       	ld	r30, X+
    28b0:	fc 91       	ld	r31, X
    28b2:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    28b4:	1b 96       	adiw	r26, 0x0b	; 11
    28b6:	2c 91       	ld	r18, X
    28b8:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    28ba:	20 81       	ld	r18, Z
    28bc:	21 50       	subi	r18, 0x01	; 1
    28be:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    28c0:	21 11       	cpse	r18, r1
    28c2:	14 c0       	rjmp	.+40     	; 0x28ec <osEE_scheduler_task_terminated+0x94>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    28c4:	13 82       	std	Z+3, r1	; 0x03
    28c6:	12 82       	std	Z+2, r1	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    28c8:	2c 81       	ldd	r18, Y+4	; 0x04
    28ca:	3d 81       	ldd	r19, Y+5	; 0x05
    28cc:	da 01       	movw	r26, r20
    28ce:	2d 93       	st	X+, r18
    28d0:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    28d2:	5d 83       	std	Y+5, r21	; 0x05
    28d4:	4c 83       	std	Y+4, r20	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	ff 90       	pop	r15
    28e0:	ef 90       	pop	r14
    28e2:	df 90       	pop	r13
    28e4:	cf 90       	pop	r12
    28e6:	bf 90       	pop	r11
    28e8:	af 90       	pop	r10
    28ea:	08 95       	ret
  } else {
    p_tcb->status = OSEE_TASK_READY;
    28ec:	21 e0       	ldi	r18, 0x01	; 1
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	33 83       	std	Z+3, r19	; 0x03
    28f2:	22 83       	std	Z+2, r18	; 0x02
    28f4:	e9 cf       	rjmp	.-46     	; 0x28c8 <osEE_scheduler_task_terminated+0x70>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    28f6:	f7 01       	movw	r30, r14
    28f8:	20 81       	ld	r18, Z
    28fa:	21 50       	subi	r18, 0x01	; 1
    28fc:	20 83       	st	Z, r18
    28fe:	e4 cf       	rjmp	.-56     	; 0x28c8 <osEE_scheduler_task_terminated+0x70>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    2900:	6e 81       	ldd	r22, Y+6	; 0x06
    2902:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    2904:	fb 01       	movw	r30, r22
    2906:	80 81       	ld	r24, Z
    2908:	91 81       	ldd	r25, Z+1	; 0x01
    290a:	9f 83       	std	Y+7, r25	; 0x07
    290c:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    290e:	d8 01       	movw	r26, r16
    2910:	1b 96       	adiw	r26, 0x0b	; 11
    2912:	8c 91       	ld	r24, X
    2914:	f7 01       	movw	r30, r14
    2916:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	93 83       	std	Z+3, r25	; 0x03
    291e:	82 83       	std	Z+2, r24	; 0x02
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transiction from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
    2920:	80 81       	ld	r24, Z
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	11 f4       	brne	.+4      	; 0x292a <osEE_scheduler_task_terminated+0xd2>
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    2926:	11 86       	std	Z+9, r1	; 0x09
    2928:	10 86       	std	Z+8, r1	; 0x08
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    292a:	a8 01       	movw	r20, r16
    292c:	c6 01       	movw	r24, r12
    292e:	0e 94 3a 13 	call	0x2674	; 0x2674 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    2932:	b6 01       	movw	r22, r12
    2934:	c5 01       	movw	r24, r10
    2936:	0e 94 8e 12 	call	0x251c	; 0x251c <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    293a:	89 2b       	or	r24, r25
    293c:	39 f4       	brne	.+14     	; 0x294c <osEE_scheduler_task_terminated+0xf4>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    293e:	ee 81       	ldd	r30, Y+6	; 0x06
    2940:	ff 81       	ldd	r31, Y+7	; 0x07
    2942:	82 81       	ldd	r24, Z+2	; 0x02
    2944:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    2946:	99 83       	std	Y+1, r25	; 0x01
    2948:	88 83       	st	Y, r24
    294a:	c5 cf       	rjmp	.-118    	; 0x28d6 <osEE_scheduler_task_terminated+0x7e>
        } else {
          p_tdb_to = p_ccb->p_curr;
    294c:	88 81       	ld	r24, Y
    294e:	99 81       	ldd	r25, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    2950:	c2 cf       	rjmp	.-124    	; 0x28d6 <osEE_scheduler_task_terminated+0x7e>

00002952 <osEE_scheduler_task_preemption_point>:
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb
)
{
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	cb 01       	movw	r24, r22
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    2958:	fb 01       	movw	r30, r22
    295a:	c0 81       	ld	r28, Z
    295c:	d1 81       	ldd	r29, Z+1	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    295e:	be 01       	movw	r22, r28
    2960:	6e 5f       	subi	r22, 0xFE	; 254
    2962:	7f 4f       	sbci	r23, 0xFF	; 255
    2964:	0e 94 8e 12 	call	0x251c	; 0x251c <osEE_scheduler_core_rq_preempt_stk>

  if (p_prev != NULL) {
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	49 f0       	breq	.+18     	; 0x297e <osEE_scheduler_task_preemption_point+0x2c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_prev, p_curr);
    296c:	68 81       	ld	r22, Y
    296e:	79 81       	ldd	r23, Y+1	; 0x01
    2970:	0e 94 49 15 	call	0x2a92	; 0x2a92 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
  }
  return is_preemption;
}
    2978:	df 91       	pop	r29
    297a:	cf 91       	pop	r28
    297c:	08 95       	ret
    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	80 e0       	ldi	r24, 0x00	; 0
  }
  return is_preemption;
    2982:	fa cf       	rjmp	.-12     	; 0x2978 <osEE_scheduler_task_preemption_point+0x26>

00002984 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb
)
{
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb  = p_cdb->p_ccb;
    2988:	db 01       	movw	r26, r22
    298a:	ed 91       	ld	r30, X+
    298c:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
    2992:	26 81       	ldd	r18, Z+6	; 0x06
    2994:	37 81       	ldd	r19, Z+7	; 0x07

  p_preempted->p_tcb->status    = OSEE_TASK_READY_STACKED;
    2996:	ec 01       	movw	r28, r24
    2998:	ac 81       	ldd	r26, Y+4	; 0x04
    299a:	bd 81       	ldd	r27, Y+5	; 0x05
    299c:	62 e0       	ldi	r22, 0x02	; 2
    299e:	70 e0       	ldi	r23, 0x00	; 0
    29a0:	13 96       	adiw	r26, 0x03	; 3
    29a2:	7c 93       	st	X, r23
    29a4:	6e 93       	st	-X, r22
    29a6:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_curr                 = p_tdb;
    29a8:	51 83       	std	Z+1, r21	; 0x01
    29aa:	40 83       	st	Z, r20
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    29ac:	a4 81       	ldd	r26, Z+4	; 0x04
    29ae:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    29b0:	6d 91       	ld	r22, X+
    29b2:	7c 91       	ld	r23, X
    29b4:	11 97       	sbiw	r26, 0x01	; 1
    29b6:	75 83       	std	Z+5, r23	; 0x05
    29b8:	64 83       	std	Z+4, r22	; 0x04

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  /* Alloc the SN for the new Running TASK */
  p_ccb->p_stk_sn               = osEE_sn_alloc(&p_ccb->p_free_sn);
    29ba:	b7 83       	std	Z+7, r27	; 0x07
    29bc:	a6 83       	std	Z+6, r26	; 0x06
  osEE_unlock_core(p_cdb);

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
    29be:	13 96       	adiw	r26, 0x03	; 3
    29c0:	5c 93       	st	X, r21
    29c2:	4e 93       	st	-X, r20
    29c4:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
    29c6:	2d 93       	st	X+, r18
    29c8:	3c 93       	st	X, r19

  osEE_change_context_from_running(p_preempted, p_tdb);
    29ca:	ba 01       	movw	r22, r20
}
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;

  osEE_change_context_from_running(p_preempted, p_tdb);
    29d0:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <osEE_change_context_from_running>

000029d4 <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
    29d4:	db 01       	movw	r26, r22
    29d6:	ed 91       	ld	r30, X+
    29d8:	fc 91       	ld	r31, X
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    29da:	a4 81       	ldd	r26, Z+4	; 0x04
    29dc:	b5 81       	ldd	r27, Z+5	; 0x05
    29de:	ab 2b       	or	r26, r27
    29e0:	39 f4       	brne	.+14     	; 0x29f0 <osEE_alarm_set_rel+0x1c>
    ev = E_OS_STATE;
  } else {
    p_alarm_cb->cycle = cycle;
    29e2:	37 83       	std	Z+7, r19	; 0x07
    29e4:	26 83       	std	Z+6, r18	; 0x06

    osEE_counter_insert_rel_trigger(
    29e6:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <osEE_counter_insert_rel_trigger>
      p_counter_db, p_trigger_db, increment
    );
    ev = E_OK;
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	08 95       	ret
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    ev = E_OS_STATE;
    29f0:	87 e0       	ldi	r24, 0x07	; 7
    29f2:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
    29f4:	08 95       	ret

000029f6 <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    29f6:	f8 94       	cli
    29f8:	ff cf       	rjmp	.-2      	; 0x29f8 <__vector_default+0x2>

000029fa <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    29fa:	e6 ef       	ldi	r30, 0xF6	; 246
}
    29fc:	08 95       	ret

000029fe <__vector_11>:
OSEE_AVR8_ISR_NOT_DEFINED(TIMER1_CAPT_vect)
#endif /* OSEE_AVR8_TIMER1_CAPT_ISR */

/* TIMER1_COMPA interrupt vector */
#if (defined(OSEE_AVR8_TIMER1_COMPA_ISR_TID)) && (OSEE_AVR8_TIMER1_COMPA_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(TIMER1_COMPA_vect, OSEE_AVR8_TIMER1_COMPA_ISR_TID)
    29fe:	8f 93       	push	r24
    2a00:	9f 93       	push	r25
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <osEE_avr8_isr2_stub>
    2a08:	9f 91       	pop	r25
    2a0a:	8f 91       	pop	r24
    2a0c:	18 95       	reti

00002a0e <osEE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void OSEE_COMPILER_KEEP OSEE_NAKED osEE_avr8_isr2_stub(TaskType t)
{

  OSEE_AVR8_ISR_PREINSTUB();
    2a0e:	1f 92       	push	r1
    2a10:	0f 92       	push	r0
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	0f 92       	push	r0
    2a16:	11 24       	eor	r1, r1
    2a18:	2f 93       	push	r18
    2a1a:	3f 93       	push	r19
    2a1c:	4f 93       	push	r20
    2a1e:	5f 93       	push	r21
    2a20:	6f 93       	push	r22
    2a22:	7f 93       	push	r23
    2a24:	af 93       	push	r26
    2a26:	bf 93       	push	r27
    2a28:	ef 93       	push	r30
    2a2a:	ff 93       	push	r31
{
  VAR(StatusType, AUTOMATIC) ret_val  = E_OK;
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
    2a2c:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <KDB+0x2>
    2a30:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <KDB+0x3>
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	e8 0f       	add	r30, r24
    2a3c:	f9 1f       	adc	r31, r25
    2a3e:	40 81       	ld	r20, Z
    2a40:	51 81       	ldd	r21, Z+1	; 0x01

  /* Mark the TASK as Activated */
  ++p_act_tdb->p_tcb->current_num_of_act;
    2a42:	da 01       	movw	r26, r20
    2a44:	14 96       	adiw	r26, 0x04	; 4
    2a46:	ed 91       	ld	r30, X+
    2a48:	fc 91       	ld	r31, X
    2a4a:	80 81       	ld	r24, Z
    2a4c:	8f 5f       	subi	r24, 0xFF	; 255
    2a4e:	80 83       	st	Z, r24

  osEE_scheduler_task_set_running(p_kdb, p_cdb, p_act_tdb);
    2a50:	63 e6       	ldi	r22, 0x63	; 99
    2a52:	72 e0       	ldi	r23, 0x02	; 2
    2a54:	8d e4       	ldi	r24, 0x4D	; 77
    2a56:	92 e0       	ldi	r25, 0x02	; 2
    2a58:	0e 94 c2 14 	call	0x2984	; 0x2984 <osEE_scheduler_task_set_running>
#endif /* __ATXMEGA__ */

  /* Activate ISR2 */
  osEE_activate_isr2(t);

  OSEE_AVR8_ISR_POSTINSTUB();
    2a5c:	ff 91       	pop	r31
    2a5e:	ef 91       	pop	r30
    2a60:	bf 91       	pop	r27
    2a62:	af 91       	pop	r26
    2a64:	7f 91       	pop	r23
    2a66:	6f 91       	pop	r22
    2a68:	5f 91       	pop	r21
    2a6a:	4f 91       	pop	r20
    2a6c:	3f 91       	pop	r19
    2a6e:	2f 91       	pop	r18
    2a70:	0f 90       	pop	r0
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	0f 90       	pop	r0
    2a76:	1f 90       	pop	r1

  OSEE_RETURN();
    2a78:	08 95       	ret

00002a7a <osEE_avr8_system_timer_init>:

#if (defined(OSEE_SYSTEM_TIMER_DEVICE))
#if (OSEE_SYSTEM_TIMER_DEVICE == OSEE_AVR8_TIMER1_COMPA)

void osEE_avr8_system_timer_init(void) {
  OsEE_atmega_startTimer1(OSTICKDURATION / OSEE_KILO);
    2a7a:	68 ee       	ldi	r22, 0xE8	; 232
    2a7c:	73 e0       	ldi	r23, 0x03	; 3
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <OsEE_atmega_startTimer1>

00002a86 <osEE_avr8_system_timer_handler>:
}

ISR2(osEE_avr8_system_timer_handler) {
  OsEE_CDB * p_cdb = osEE_get_curr_core();
  osEE_counter_increment(p_cdb->p_sys_counter_db);
    2a86:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <CDB+0x6>
    2a8a:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <CDB+0x7>
    2a8e:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <osEE_counter_increment>

00002a92 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    2a92:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    2a94:	a4 81       	ldd	r26, Z+4	; 0x04
    2a96:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    2a98:	12 96       	adiw	r26, 0x02	; 2
    2a9a:	2d 91       	ld	r18, X+
    2a9c:	3c 91       	ld	r19, X
    2a9e:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    2aa0:	44 e0       	ldi	r20, 0x04	; 4
    2aa2:	50 e0       	ldi	r21, 0x00	; 0
    2aa4:	13 96       	adiw	r26, 0x03	; 3
    2aa6:	5c 93       	st	X, r21
    2aa8:	4e 93       	st	-X, r20
    2aaa:	12 97       	sbiw	r26, 0x02	; 2
    2aac:	dc 01       	movw	r26, r24
    2aae:	12 96       	adiw	r26, 0x02	; 2
    2ab0:	4d 91       	ld	r20, X+
    2ab2:	5c 91       	ld	r21, X
    2ab4:	62 81       	ldd	r22, Z+2	; 0x02
    2ab6:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    2ab8:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    2aba:	22 30       	cpi	r18, 0x02	; 2
    2abc:	31 05       	cpc	r19, r1
    2abe:	11 f4       	brne	.+4      	; 0x2ac4 <osEE_change_context_from_running+0x32>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    2ac0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    2ac4:	0c 94 16 01 	jmp	0x22c	; 0x22c <osEE_hal_save_ctx_and_ready2stacked>

00002ac8 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    2ac8:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    2aca:	db 01       	movw	r26, r22
    2acc:	14 96       	adiw	r26, 0x04	; 4
    2ace:	ed 91       	ld	r30, X+
    2ad0:	fc 91       	ld	r31, X
    2ad2:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    2ad4:	22 81       	ldd	r18, Z+2	; 0x02
    2ad6:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    2ad8:	44 e0       	ldi	r20, 0x04	; 4
    2ada:	50 e0       	ldi	r21, 0x00	; 0
    2adc:	53 83       	std	Z+3, r21	; 0x03
    2ade:	42 83       	std	Z+2, r20	; 0x02
    2ae0:	12 96       	adiw	r26, 0x02	; 2
    2ae2:	6d 91       	ld	r22, X+
    2ae4:	7c 91       	ld	r23, X

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    2ae6:	22 30       	cpi	r18, 0x02	; 2
    2ae8:	31 05       	cpc	r19, r1
    2aea:	11 f4       	brne	.+4      	; 0x2af0 <osEE_change_context_from_task_end+0x28>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    2aec:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    2af0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <osEE_hal_ready2stacked>

00002af4 <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    2af4:	dc 01       	movw	r26, r24
    2af6:	12 96       	adiw	r26, 0x02	; 2
    2af8:	6d 91       	ld	r22, X+
    2afa:	7c 91       	ld	r23, X
    2afc:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    2afe:	ed 91       	ld	r30, X+
    2b00:	fc 91       	ld	r31, X
    2b02:	40 81       	ld	r20, Z
    2b04:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    2b06:	db 01       	movw	r26, r22
    2b08:	ed 91       	ld	r30, X+
    2b0a:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    2b0c:	22 89       	ldd	r18, Z+18	; 0x12
    2b0e:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    2b10:	21 15       	cp	r18, r1
    2b12:	31 05       	cpc	r19, r1
    2b14:	19 f0       	breq	.+6      	; 0x2b1c <osEE_idle_task_terminate+0x28>
    2b16:	42 17       	cp	r20, r18
    2b18:	53 07       	cpc	r21, r19
    2b1a:	29 f4       	brne	.+10     	; 0x2b26 <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    2b1c:	db 01       	movw	r26, r22
    2b1e:	ed 93       	st	X+, r30
    2b20:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    2b22:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>
    2b26:	f9 01       	movw	r30, r18
    2b28:	f1 cf       	rjmp	.-30     	; 0x2b0c <osEE_idle_task_terminate+0x18>

00002b2a <osEE_counter_insert_abs_trigger>:
    }
  }

  /* Turn Off the Trigger */
  p_trigger_cb->active = OSEE_FALSE;
}
    2b2a:	ef 92       	push	r14
    2b2c:	ff 92       	push	r15
    2b2e:	0f 93       	push	r16
    2b30:	1f 93       	push	r17
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	dc 01       	movw	r26, r24
    2b38:	8d 91       	ld	r24, X+
    2b3a:	9c 91       	ld	r25, X
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	ed 91       	ld	r30, X+
    2b40:	fc 91       	ld	r31, X
    2b42:	11 97       	sbiw	r26, 0x01	; 1
    2b44:	12 96       	adiw	r26, 0x02	; 2
    2b46:	0d 91       	ld	r16, X+
    2b48:	1c 91       	ld	r17, X
    2b4a:	db 01       	movw	r26, r22
    2b4c:	cd 91       	ld	r28, X+
    2b4e:	dc 91       	ld	r29, X
    2b50:	21 e0       	ldi	r18, 0x01	; 1
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	3d 83       	std	Y+5, r19	; 0x05
    2b56:	2c 83       	std	Y+4, r18	; 0x04
    2b58:	5b 83       	std	Y+3, r21	; 0x03
    2b5a:	4a 83       	std	Y+2, r20	; 0x02
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 97       	sbiw	r30, 0x00	; 0
    2b62:	e1 f0       	breq	.+56     	; 0x2b9c <osEE_counter_insert_abs_trigger+0x72>
    2b64:	a0 81       	ld	r26, Z
    2b66:	b1 81       	ldd	r27, Z+1	; 0x01
    2b68:	12 96       	adiw	r26, 0x02	; 2
    2b6a:	ed 90       	ld	r14, X+
    2b6c:	fc 90       	ld	r15, X
    2b6e:	13 97       	sbiw	r26, 0x03	; 3
    2b70:	0e 15       	cp	r16, r14
    2b72:	1f 05       	cpc	r17, r15
    2b74:	68 f4       	brcc	.+26     	; 0x2b90 <osEE_counter_insert_abs_trigger+0x66>
    2b76:	4e 15       	cp	r20, r14
    2b78:	5f 05       	cpc	r21, r15
    2b7a:	18 f4       	brcc	.+6      	; 0x2b82 <osEE_counter_insert_abs_trigger+0x58>
    2b7c:	04 17       	cp	r16, r20
    2b7e:	15 07       	cpc	r17, r21
    2b80:	68 f0       	brcs	.+26     	; 0x2b9c <osEE_counter_insert_abs_trigger+0x72>
    2b82:	fc 90       	ld	r15, X
    2b84:	11 96       	adiw	r26, 0x01	; 1
    2b86:	ac 91       	ld	r26, X
    2b88:	9f 01       	movw	r18, r30
    2b8a:	ef 2d       	mov	r30, r15
    2b8c:	fa 2f       	mov	r31, r26
    2b8e:	e8 cf       	rjmp	.-48     	; 0x2b60 <osEE_counter_insert_abs_trigger+0x36>
    2b90:	04 17       	cp	r16, r20
    2b92:	15 07       	cpc	r17, r21
    2b94:	18 f0       	brcs	.+6      	; 0x2b9c <osEE_counter_insert_abs_trigger+0x72>
    2b96:	4e 15       	cp	r20, r14
    2b98:	5f 05       	cpc	r21, r15
    2b9a:	98 f7       	brcc	.-26     	; 0x2b82 <osEE_counter_insert_abs_trigger+0x58>
    2b9c:	21 15       	cp	r18, r1
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	19 f0       	breq	.+6      	; 0x2ba8 <osEE_counter_insert_abs_trigger+0x7e>
    2ba2:	d9 01       	movw	r26, r18
    2ba4:	8d 91       	ld	r24, X+
    2ba6:	9c 91       	ld	r25, X
    2ba8:	dc 01       	movw	r26, r24
    2baa:	6d 93       	st	X+, r22
    2bac:	7c 93       	st	X, r23
    2bae:	f9 83       	std	Y+1, r31	; 0x01
    2bb0:	e8 83       	st	Y, r30
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	ff 90       	pop	r15
    2bbc:	ef 90       	pop	r14
    2bbe:	08 95       	ret

00002bc0 <osEE_counter_insert_rel_trigger>:
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	12 96       	adiw	r26, 0x02	; 2
    2bc8:	ed 91       	ld	r30, X+
    2bca:	fc 91       	ld	r31, X
    2bcc:	13 97       	sbiw	r26, 0x03	; 3
    2bce:	0d 90       	ld	r0, X+
    2bd0:	bc 91       	ld	r27, X
    2bd2:	a0 2d       	mov	r26, r0
    2bd4:	12 96       	adiw	r26, 0x02	; 2
    2bd6:	2d 91       	ld	r18, X+
    2bd8:	3c 91       	ld	r19, X
    2bda:	df 01       	movw	r26, r30
    2bdc:	a4 1b       	sub	r26, r20
    2bde:	b5 0b       	sbc	r27, r21
    2be0:	a2 17       	cp	r26, r18
    2be2:	b3 07       	cpc	r27, r19
    2be4:	30 f0       	brcs	.+12     	; 0x2bf2 <osEE_counter_insert_rel_trigger+0x32>
    2be6:	42 0f       	add	r20, r18
    2be8:	53 1f       	adc	r21, r19
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <osEE_counter_insert_abs_trigger>
    2bf2:	41 50       	subi	r20, 0x01	; 1
    2bf4:	51 09       	sbc	r21, r1
    2bf6:	42 0f       	add	r20, r18
    2bf8:	53 1f       	adc	r21, r19
    2bfa:	4e 1b       	sub	r20, r30
    2bfc:	5f 0b       	sbc	r21, r31
    2bfe:	f5 cf       	rjmp	.-22     	; 0x2bea <osEE_counter_insert_rel_trigger+0x2a>

00002c00 <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
    2c00:	2f 92       	push	r2
    2c02:	3f 92       	push	r3
    2c04:	4f 92       	push	r4
    2c06:	5f 92       	push	r5
    2c08:	6f 92       	push	r6
    2c0a:	7f 92       	push	r7
    2c0c:	8f 92       	push	r8
    2c0e:	9f 92       	push	r9
    2c10:	af 92       	push	r10
    2c12:	bf 92       	push	r11
    2c14:	cf 92       	push	r12
    2c16:	df 92       	push	r13
    2c18:	ef 92       	push	r14
    2c1a:	ff 92       	push	r15
    2c1c:	0f 93       	push	r16
    2c1e:	1f 93       	push	r17
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	00 d0       	rcall	.+0      	; 0x2c26 <osEE_counter_increment+0x26>
    2c26:	00 d0       	rcall	.+0      	; 0x2c28 <osEE_counter_increment+0x28>
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	0d 91       	ld	r16, X+
    2c30:	1c 91       	ld	r17, X
    2c32:	11 97       	sbiw	r26, 0x01	; 1
       This because is more efficient to read SFR than mamory. */
    CONST(CoreIdType, AUTOMATIC) counter_core_id = osEE_get_curr_core_id();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
    2c34:	f8 01       	movw	r30, r16
    2c36:	22 81       	ldd	r18, Z+2	; 0x02
    2c38:	33 81       	ldd	r19, Z+3	; 0x03
    2c3a:	12 96       	adiw	r26, 0x02	; 2
    2c3c:	4d 91       	ld	r20, X+
    2c3e:	5c 91       	ld	r21, X
    2c40:	24 17       	cp	r18, r20
    2c42:	35 07       	cpc	r19, r21
    2c44:	08 f4       	brcc	.+2      	; 0x2c48 <osEE_counter_increment+0x48>
    2c46:	5a c0       	rjmp	.+180    	; 0x2cfc <osEE_counter_increment+0xfc>
      counter_value = (p_counter_cb->value = 0U);
    2c48:	13 82       	std	Z+3, r1	; 0x03
    2c4a:	12 82       	std	Z+2, r1	; 0x02
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
            the counters, whenever the locks are not limited resources for the
            HW and falling back to use core locks only for those architectures
            where this is not true. TBD. */
    osEE_lock_core_id(counter_core_id);

    p_triggered_db = p_counter_cb->trigger_queue;
    2c50:	f8 01       	movw	r30, r16
    2c52:	01 90       	ld	r0, Z+
    2c54:	f0 81       	ld	r31, Z
    2c56:	e0 2d       	mov	r30, r0
    2c58:	fc 83       	std	Y+4, r31	; 0x04
    2c5a:	eb 83       	std	Y+3, r30	; 0x03

    if (p_triggered_db != NULL) {
    2c5c:	30 97       	sbiw	r30, 0x00	; 0
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <osEE_counter_increment+0x62>
    2c60:	91 c0       	rjmp	.+290    	; 0x2d84 <osEE_counter_increment+0x184>
      P2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
    2c62:	01 90       	ld	r0, Z+
    2c64:	f0 81       	ld	r31, Z
    2c66:	e0 2d       	mov	r30, r0
    2c68:	42 81       	ldd	r20, Z+2	; 0x02
    2c6a:	53 81       	ldd	r21, Z+3	; 0x03
    2c6c:	42 17       	cp	r20, r18
    2c6e:	53 07       	cpc	r21, r19
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <osEE_counter_increment+0x74>
    2c72:	88 c0       	rjmp	.+272    	; 0x2d84 <osEE_counter_increment+0x184>
    2c74:	ab 81       	ldd	r26, Y+3	; 0x03
    2c76:	bc 81       	ldd	r27, Y+4	; 0x04
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
    2c78:	2d 91       	ld	r18, X+
    2c7a:	3c 91       	ld	r19, X
    2c7c:	f9 01       	movw	r30, r18
    2c7e:	a0 81       	ld	r26, Z
    2c80:	b1 81       	ldd	r27, Z+1	; 0x01
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
    2c82:	10 97       	sbiw	r26, 0x00	; 0
    2c84:	49 f0       	breq	.+18     	; 0x2c98 <osEE_counter_increment+0x98>
    2c86:	6d 91       	ld	r22, X+
    2c88:	7c 91       	ld	r23, X
    2c8a:	11 97       	sbiw	r26, 0x01	; 1

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
        } while ((p_current != NULL) &&
    2c8c:	fb 01       	movw	r30, r22
    2c8e:	62 81       	ldd	r22, Z+2	; 0x02
    2c90:	73 81       	ldd	r23, Z+3	; 0x03
    2c92:	46 17       	cp	r20, r22
    2c94:	57 07       	cpc	r21, r23
    2c96:	81 f3       	breq	.-32     	; 0x2c78 <osEE_counter_increment+0x78>
    2c98:	2c 01       	movw	r4, r24
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
    2c9a:	f9 01       	movw	r30, r18
    2c9c:	11 82       	std	Z+1, r1	; 0x01
    2c9e:	10 82       	st	Z, r1
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
    2ca0:	f8 01       	movw	r30, r16
    2ca2:	b1 83       	std	Z+1, r27	; 0x01
    2ca4:	a0 83       	st	Z, r26

        if (((p_tcb->wait_mask & mask) != 0U) &&
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);
    2ca6:	e0 90 63 02 	lds	r14, 0x0263	; 0x800263 <CDB>
    2caa:	f0 90 64 02 	lds	r15, 0x0264	; 0x800264 <CDB+0x1>
    break;
    case OSEE_ACTION_CALLBACK:
    {
#if (defined(OSEE_HAS_CONTEXT))
      CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
        p_ccb = osEE_get_curr_core()->p_ccb;
    2cae:	37 01       	movw	r6, r14
#endif
#if (defined(OSEE_HAS_ERRORHOOK))
          if (ev != E_OK) {
            CONST(OsEE_reg, AUTOMATIC)
              flags = osEE_begin_primitive();
            osEE_call_error_hook(osEE_get_curr_core()->p_ccb, ev);
    2cb0:	67 01       	movw	r12, r14
)
{
#if (defined(OSEE_HAS_ERRORHOOK))
  VAR(OsEE_os_context, AUTOMATIC) prev_os_ctx = p_ccb->os_context;
  if (prev_os_ctx != OSEE_ERRORHOOK_CTX) {
    p_ccb->os_context = OSEE_ERRORHOOK_CTX;
    2cb2:	83 e0       	ldi	r24, 0x03	; 3
    2cb4:	28 2e       	mov	r2, r24
    2cb6:	31 2c       	mov	r3, r1
            p_trigger_to_be_handled = p_triggered_db;

          /* Prepare next trigger to be handled here, before actually handle the
           * current one, otherwise cycling triggers will mess with the list of
           * triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
    2cb8:	ab 81       	ldd	r26, Y+3	; 0x03
    2cba:	bc 81       	ldd	r27, Y+4	; 0x04
    2cbc:	ad 90       	ld	r10, X+
    2cbe:	bc 90       	ld	r11, X
    2cc0:	f5 01       	movw	r30, r10
    2cc2:	f0 81       	ld	r31, Z
    2cc4:	f9 83       	std	Y+1, r31	; 0x01
    2cc6:	d5 01       	movw	r26, r10
    2cc8:	11 96       	adiw	r26, 0x01	; 1
    2cca:	bc 91       	ld	r27, X
    2ccc:	ba 83       	std	Y+2, r27	; 0x02
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
  CONST(TickType, AUTOMATIC)
    cycle = p_trigger_cb->cycle;
    2cce:	f5 01       	movw	r30, r10
    2cd0:	86 80       	ldd	r8, Z+6	; 0x06
    2cd2:	97 80       	ldd	r9, Z+7	; 0x07
(
  P2CONST(OsEE_action, AUTOMATIC, OS_APPL_DATA) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev;
  switch (p_action->type) {
    2cd4:	ab 81       	ldd	r26, Y+3	; 0x03
    2cd6:	bc 81       	ldd	r27, Y+4	; 0x04
    2cd8:	1c 96       	adiw	r26, 0x0c	; 12
    2cda:	8d 91       	ld	r24, X+
    2cdc:	9c 91       	ld	r25, X
    2cde:	81 30       	cpi	r24, 0x01	; 1
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <osEE_counter_increment+0xe6>
    2ce4:	66 c0       	rjmp	.+204    	; 0x2db2 <osEE_counter_increment+0x1b2>
    2ce6:	78 f0       	brcs	.+30     	; 0x2d06 <osEE_counter_increment+0x106>
    2ce8:	82 30       	cpi	r24, 0x02	; 2
    2cea:	91 05       	cpc	r25, r1
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <osEE_counter_increment+0xf0>
    2cee:	9f c0       	rjmp	.+318    	; 0x2e2e <osEE_counter_increment+0x22e>
    2cf0:	03 97       	sbiw	r24, 0x03	; 3
    2cf2:	09 f4       	brne	.+2      	; 0x2cf6 <osEE_counter_increment+0xf6>
    2cf4:	a3 c0       	rjmp	.+326    	; 0x2e3c <osEE_counter_increment+0x23c>
                  osEE_get_kernel(), p_cdb_rel, p_sn);
        }

        osEE_unlock_core(p_cdb_rel);

        ev = E_OK;
    2cf6:	10 e0       	ldi	r17, 0x00	; 0
    2cf8:	00 e0       	ldi	r16, 0x00	; 0
    2cfa:	12 c0       	rjmp	.+36     	; 0x2d20 <osEE_counter_increment+0x120>
    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value = (p_counter_cb->value = 0U);
    } else {
      counter_value = ++p_counter_cb->value;
    2cfc:	2f 5f       	subi	r18, 0xFF	; 255
    2cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2d00:	33 83       	std	Z+3, r19	; 0x03
    2d02:	22 83       	std	Z+2, r18	; 0x02
    2d04:	a5 cf       	rjmp	.-182    	; 0x2c50 <osEE_counter_increment+0x50>
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;

      ev = osEE_scheduler_task_activated(
    2d06:	eb 81       	ldd	r30, Y+3	; 0x03
    2d08:	fc 81       	ldd	r31, Y+4	; 0x04
    2d0a:	46 81       	ldd	r20, Z+6	; 0x06
    2d0c:	57 81       	ldd	r21, Z+7	; 0x07
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	63 e6       	ldi	r22, 0x63	; 99
    2d14:	72 e0       	ldi	r23, 0x02	; 2
    2d16:	8d e4       	ldi	r24, 0x4D	; 77
    2d18:	92 e0       	ldi	r25, 0x02	; 2
    2d1a:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <osEE_scheduler_task_activated>
    2d1e:	8c 01       	movw	r16, r24
    cycle = p_trigger_cb->cycle;

  ev = osEE_handle_action(&p_alarm_db->action);

  /* TODO: Add active check to let call CancelAlarm from callback... */
  if (cycle > 0U) {
    2d20:	81 14       	cp	r8, r1
    2d22:	91 04       	cpc	r9, r1
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <osEE_counter_increment+0x128>
    2d26:	9f c0       	rjmp	.+318    	; 0x2e66 <osEE_counter_increment+0x266>
    osEE_counter_insert_rel_trigger(
    2d28:	a4 01       	movw	r20, r8
    2d2a:	6b 81       	ldd	r22, Y+3	; 0x03
    2d2c:	7c 81       	ldd	r23, Y+4	; 0x04
    2d2e:	c2 01       	movw	r24, r4
    2d30:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <osEE_counter_insert_rel_trigger>
                p_trigger_to_be_handled);
#elif (defined(OSEE_HAS_SCHEDULE_TABLES))
          /* TODO */
#endif
#if (defined(OSEE_HAS_ERRORHOOK))
          if (ev != E_OK) {
    2d34:	01 15       	cp	r16, r1
    2d36:	11 05       	cpc	r17, r1
    2d38:	e1 f0       	breq	.+56     	; 0x2d72 <osEE_counter_increment+0x172>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    2d3a:	bf b6       	in	r11, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    2d3c:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
#if (defined(OSEE_HAS_ERRORHOOK))
  VAR(OsEE_os_context, AUTOMATIC) prev_os_ctx = p_ccb->os_context;
    2d3e:	f6 01       	movw	r30, r12
    2d40:	05 88       	ldd	r0, Z+21	; 0x15
    2d42:	f6 89       	ldd	r31, Z+22	; 0x16
    2d44:	e0 2d       	mov	r30, r0
    2d46:	fc 83       	std	Y+4, r31	; 0x04
    2d48:	eb 83       	std	Y+3, r30	; 0x03
  if (prev_os_ctx != OSEE_ERRORHOOK_CTX) {
    2d4a:	33 97       	sbiw	r30, 0x03	; 3
    2d4c:	89 f0       	breq	.+34     	; 0x2d70 <osEE_counter_increment+0x170>
    p_ccb->os_context = OSEE_ERRORHOOK_CTX;
    2d4e:	d6 01       	movw	r26, r12
    2d50:	56 96       	adiw	r26, 0x16	; 22
    2d52:	3c 92       	st	X, r3
    2d54:	2e 92       	st	-X, r2
    2d56:	55 97       	sbiw	r26, 0x15	; 21
    p_ccb->last_error = Error;
    2d58:	1c 96       	adiw	r26, 0x0c	; 12
    2d5a:	1c 93       	st	X, r17
    2d5c:	0e 93       	st	-X, r16
    2d5e:	1b 97       	sbiw	r26, 0x0b	; 11
    ErrorHook(Error);
    2d60:	c8 01       	movw	r24, r16
    2d62:	0e 94 a6 04 	call	0x94c	; 0x94c <ErrorHook>
    p_ccb->os_context = prev_os_ctx;
    2d66:	4b 81       	ldd	r20, Y+3	; 0x03
    2d68:	5c 81       	ldd	r21, Y+4	; 0x04
    2d6a:	f6 01       	movw	r30, r12
    2d6c:	56 8b       	std	Z+22, r21	; 0x16
    2d6e:	45 8b       	std	Z+21, r20	; 0x15
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    2d70:	bf be       	out	0x3f, r11	; 63
    2d72:	59 81       	ldd	r21, Y+1	; 0x01
    2d74:	5b 83       	std	Y+3, r21	; 0x03
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	8c 83       	std	Y+4, r24	; 0x04
            osEE_end_primitive(flags);
          }
#else
          (void)ev; /* TODO: Handle ErrorHook */
#endif /* OSEE_HAS_ERRORHOOK */
        } while (p_triggered_db != NULL);
    2d7a:	ab 81       	ldd	r26, Y+3	; 0x03
    2d7c:	bc 81       	ldd	r27, Y+4	; 0x04
    2d7e:	ab 2b       	or	r26, r27
    2d80:	09 f0       	breq	.+2      	; 0x2d84 <osEE_counter_increment+0x184>
    2d82:	9a cf       	rjmp	.-204    	; 0x2cb8 <osEE_counter_increment+0xb8>
    }
    /* XXX: Unlock the core only at the End of The Service, to not incur in
            races when handling cycling triggers. */
    osEE_unlock_core_id(counter_core_id);
  }
}
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	ff 90       	pop	r15
    2d96:	ef 90       	pop	r14
    2d98:	df 90       	pop	r13
    2d9a:	cf 90       	pop	r12
    2d9c:	bf 90       	pop	r11
    2d9e:	af 90       	pop	r10
    2da0:	9f 90       	pop	r9
    2da2:	8f 90       	pop	r8
    2da4:	7f 90       	pop	r7
    2da6:	6f 90       	pop	r6
    2da8:	5f 90       	pop	r5
    2daa:	4f 90       	pop	r4
    2dac:	3f 90       	pop	r3
    2dae:	2f 90       	pop	r2
    2db0:	08 95       	ret
    break;
#if (defined(OSEE_HAS_EVENTS))
    case OSEE_ACTION_EVENT:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
    2db2:	ab 81       	ldd	r26, Y+3	; 0x03
    2db4:	bc 81       	ldd	r27, Y+4	; 0x04
    2db6:	16 96       	adiw	r26, 0x06	; 6
    2db8:	6d 91       	ld	r22, X+
    2dba:	7c 91       	ld	r23, X
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_tcb = p_tdb->p_tcb;
    2dbc:	db 01       	movw	r26, r22
    2dbe:	14 96       	adiw	r26, 0x04	; 4
    2dc0:	ed 91       	ld	r30, X+
    2dc2:	fc 91       	ld	r31, X
      CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
        p_cdb_rel = osEE_get_task_curr_core(p_tdb);

      osEE_lock_core(p_cdb_rel);
#if (defined(OSEE_HAS_CHECKS))
      if (p_tcb->status == OSEE_TASK_SUSPENDED) {
    2dc4:	42 81       	ldd	r20, Z+2	; 0x02
    2dc6:	53 81       	ldd	r21, Z+3	; 0x03
        osEE_unlock_core(p_cdb_rel);
        ev = E_OS_STATE;
    2dc8:	07 e0       	ldi	r16, 0x07	; 7
    2dca:	10 e0       	ldi	r17, 0x00	; 0
      CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
        p_cdb_rel = osEE_get_task_curr_core(p_tdb);

      osEE_lock_core(p_cdb_rel);
#if (defined(OSEE_HAS_CHECKS))
      if (p_tcb->status == OSEE_TASK_SUSPENDED) {
    2dcc:	41 15       	cp	r20, r1
    2dce:	51 05       	cpc	r21, r1
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <osEE_counter_increment+0x1d4>
    2dd2:	a6 cf       	rjmp	.-180    	; 0x2d20 <osEE_counter_increment+0x120>
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_tcb = p_tdb->p_tcb;
      CONST(EventMaskType, AUTOMATIC)
        mask = p_action->param.mask;
    2dd4:	ab 81       	ldd	r26, Y+3	; 0x03
    2dd6:	bc 81       	ldd	r27, Y+4	; 0x04
    2dd8:	1a 96       	adiw	r26, 0x0a	; 10
    2dda:	8d 91       	ld	r24, X+
    2ddc:	9c 91       	ld	r25, X
      } else
#endif /* OSEE_HAS_CHECKS */
      {
        /* Set the event mask only if the task is not suspended */

        p_tcb->event_mask |= mask;
    2dde:	20 85       	ldd	r18, Z+8	; 0x08
    2de0:	31 85       	ldd	r19, Z+9	; 0x09
    2de2:	28 2b       	or	r18, r24
    2de4:	39 2b       	or	r19, r25
    2de6:	31 87       	std	Z+9, r19	; 0x09
    2de8:	20 87       	std	Z+8, r18	; 0x08

        if (((p_tcb->wait_mask & mask) != 0U) &&
    2dea:	26 81       	ldd	r18, Z+6	; 0x06
    2dec:	37 81       	ldd	r19, Z+7	; 0x07
    2dee:	82 23       	and	r24, r18
    2df0:	93 23       	and	r25, r19
    2df2:	89 2b       	or	r24, r25
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <osEE_counter_increment+0x1f8>
    2df6:	7f cf       	rjmp	.-258    	; 0x2cf6 <osEE_counter_increment+0xf6>
    2df8:	43 30       	cpi	r20, 0x03	; 3
    2dfa:	51 05       	cpc	r21, r1
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <osEE_counter_increment+0x200>
    2dfe:	7b cf       	rjmp	.-266    	; 0x2cf6 <osEE_counter_increment+0xf6>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    2e00:	d7 01       	movw	r26, r14
    2e02:	14 96       	adiw	r26, 0x04	; 4
    2e04:	ed 91       	ld	r30, X+
    2e06:	fc 91       	ld	r31, X
    2e08:	15 97       	sbiw	r26, 0x05	; 5
  (*pp_fist)              = p_sn_allocated->p_next;
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	15 96       	adiw	r26, 0x05	; 5
    2e10:	9c 93       	st	X, r25
    2e12:	8e 93       	st	-X, r24
    2e14:	14 97       	sbiw	r26, 0x04	; 4
  p_sn_allocated->p_next  = NULL;
    2e16:	11 82       	std	Z+1, r1	; 0x01
    2e18:	10 82       	st	Z, r1
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);

          p_sn->p_tdb = p_tdb;
    2e1a:	73 83       	std	Z+3, r23	; 0x03
    2e1c:	62 83       	std	Z+2, r22	; 0x02

          /* Release the TASK (and the SN) */
          (void)osEE_scheduler_task_unblocked(
    2e1e:	af 01       	movw	r20, r30
    2e20:	63 e6       	ldi	r22, 0x63	; 99
    2e22:	72 e0       	ldi	r23, 0x02	; 2
    2e24:	8d e4       	ldi	r24, 0x4D	; 77
    2e26:	92 e0       	ldi	r25, 0x02	; 2
    2e28:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <osEE_scheduler_task_unblocked>
    2e2c:	64 cf       	rjmp	.-312    	; 0x2cf6 <osEE_counter_increment+0xf6>
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
      osEE_counter_increment(p_action->param.p_counter_db);
    2e2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e30:	fc 81       	ldd	r31, Y+4	; 0x04
    2e32:	80 85       	ldd	r24, Z+8	; 0x08
    2e34:	91 85       	ldd	r25, Z+9	; 0x09
    2e36:	0e 94 00 16 	call	0x2c00	; 0x2c00 <osEE_counter_increment>
    2e3a:	5d cf       	rjmp	.-326    	; 0x2cf6 <osEE_counter_increment+0xf6>
    {
#if (defined(OSEE_HAS_CONTEXT))
      CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
        p_ccb = osEE_get_curr_core()->p_ccb;
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;
    2e3c:	d3 01       	movw	r26, r6
    2e3e:	55 96       	adiw	r26, 0x15	; 21
    2e40:	0d 91       	ld	r16, X+
    2e42:	1c 91       	ld	r17, X
    2e44:	56 97       	sbiw	r26, 0x16	; 22

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
    2e46:	e9 e0       	ldi	r30, 0x09	; 9
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	56 96       	adiw	r26, 0x16	; 22
    2e4c:	fc 93       	st	X, r31
    2e4e:	ee 93       	st	-X, r30
    2e50:	55 97       	sbiw	r26, 0x15	; 21
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
    2e52:	ab 81       	ldd	r26, Y+3	; 0x03
    2e54:	bc 81       	ldd	r27, Y+4	; 0x04
    2e56:	14 96       	adiw	r26, 0x04	; 4
    2e58:	ed 91       	ld	r30, X+
    2e5a:	fc 91       	ld	r31, X
    2e5c:	09 95       	icall
#if (defined(OSEE_HAS_CONTEXT))
      p_ccb->os_context = prev_os_context;
    2e5e:	f3 01       	movw	r30, r6
    2e60:	16 8b       	std	Z+22, r17	; 0x16
    2e62:	05 8b       	std	Z+21, r16	; 0x15
    2e64:	48 cf       	rjmp	.-368    	; 0x2cf6 <osEE_counter_increment+0xf6>
  if (cycle > 0U) {
    osEE_counter_insert_rel_trigger(
      p_counter_db, p_trigger_db, cycle
    );
  } else {
    p_trigger_cb->active = OSEE_FALSE;
    2e66:	d5 01       	movw	r26, r10
    2e68:	15 96       	adiw	r26, 0x05	; 5
    2e6a:	1c 92       	st	X, r1
    2e6c:	1e 92       	st	-X, r1
    2e6e:	14 97       	sbiw	r26, 0x04	; 4
    2e70:	61 cf       	rjmp	.-318    	; 0x2d34 <osEE_counter_increment+0x134>

00002e72 <OsEE_atmega_startTimer1>:
 * - x < TIMER_1_PRESCALER_1024_MAX_TICKS = 4194304:	64     us
 */
void OsEE_atmega_startTimer1(uint32_t microsecondsInterval) {
  uint8_t	timer1Prescaler;
  uint16_t	timer1CompareValue;
  TCCR1B = 0;	/* Pause Timer. */
    2e72:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  TCCR1A = 0;
    2e76:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  TCCR1C = 0;
    2e7a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
  TCNT1  = 0;
    2e7e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    2e82:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
   * 0 1 1 clkIO/64 (From prescaler)
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    2e86:	61 15       	cp	r22, r1
    2e88:	20 e1       	ldi	r18, 0x10	; 16
    2e8a:	72 07       	cpc	r23, r18
    2e8c:	81 05       	cpc	r24, r1
    2e8e:	91 05       	cpc	r25, r1
    2e90:	a0 f4       	brcc	.+40     	; 0x2eba <OsEE_atmega_startTimer1+0x48>
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
    2e92:	e4 e0       	ldi	r30, 0x04	; 4
    2e94:	66 0f       	add	r22, r22
    2e96:	77 1f       	adc	r23, r23
    2e98:	ea 95       	dec	r30
    2e9a:	e1 f7       	brne	.-8      	; 0x2e94 <OsEE_atmega_startTimer1+0x22>
    2e9c:	61 50       	subi	r22, 0x01	; 1
    2e9e:	71 09       	sbc	r23, r1
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
  }
#else
  #error("Unsupported CPU frequency")
#endif
  TIFR1  = (1 << OCIE1A);	/* Clear Output Compare A Match Flag. */
    2ea2:	92 e0       	ldi	r25, 0x02	; 2
    2ea4:	96 bb       	out	0x16, r25	; 22
  TIMSK1 = (1 << OCIE1A);	/* Output Compare A Match Interrupt Enable */
    2ea6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  OCR1A  = timer1CompareValue;	/* Set Compare A Match Value */
    2eaa:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    2eae:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  TCCR1B = (1 << WGM12) | timer1Prescaler;	/* Set CTC Mode and Prescaler. */
    2eb2:	88 60       	ori	r24, 0x08	; 8
    2eb4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
}	/* startTimer1() */
    2eb8:	08 95       	ret
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    2eba:	61 15       	cp	r22, r1
    2ebc:	20 e8       	ldi	r18, 0x80	; 128
    2ebe:	72 07       	cpc	r23, r18
    2ec0:	81 05       	cpc	r24, r1
    2ec2:	91 05       	cpc	r25, r1
    2ec4:	30 f4       	brcc	.+12     	; 0x2ed2 <OsEE_atmega_startTimer1+0x60>
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
    2ec6:	66 0f       	add	r22, r22
    2ec8:	77 1f       	adc	r23, r23
    2eca:	61 50       	subi	r22, 0x01	; 1
    2ecc:	71 09       	sbc	r23, r1
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	e8 cf       	rjmp	.-48     	; 0x2ea2 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    2ed2:	6c 3f       	cpi	r22, 0xFC	; 252
    2ed4:	2f ef       	ldi	r18, 0xFF	; 255
    2ed6:	72 07       	cpc	r23, r18
    2ed8:	23 e0       	ldi	r18, 0x03	; 3
    2eda:	82 07       	cpc	r24, r18
    2edc:	91 05       	cpc	r25, r1
    2ede:	58 f4       	brcc	.+22     	; 0x2ef6 <OsEE_atmega_startTimer1+0x84>
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
    2ee0:	42 e0       	ldi	r20, 0x02	; 2
    2ee2:	96 95       	lsr	r25
    2ee4:	87 95       	ror	r24
    2ee6:	77 95       	ror	r23
    2ee8:	67 95       	ror	r22
    2eea:	4a 95       	dec	r20
    2eec:	d1 f7       	brne	.-12     	; 0x2ee2 <OsEE_atmega_startTimer1+0x70>
    2eee:	61 50       	subi	r22, 0x01	; 1
    2ef0:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    2ef2:	83 e0       	ldi	r24, 0x03	; 3
    2ef4:	d6 cf       	rjmp	.-84     	; 0x2ea2 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    2ef6:	61 15       	cp	r22, r1
    2ef8:	71 05       	cpc	r23, r1
    2efa:	20 e1       	ldi	r18, 0x10	; 16
    2efc:	82 07       	cpc	r24, r18
    2efe:	91 05       	cpc	r25, r1
    2f00:	58 f4       	brcc	.+22     	; 0x2f18 <OsEE_atmega_startTimer1+0xa6>
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
    2f02:	34 e0       	ldi	r19, 0x04	; 4
    2f04:	96 95       	lsr	r25
    2f06:	87 95       	ror	r24
    2f08:	77 95       	ror	r23
    2f0a:	67 95       	ror	r22
    2f0c:	3a 95       	dec	r19
    2f0e:	d1 f7       	brne	.-12     	; 0x2f04 <OsEE_atmega_startTimer1+0x92>
    2f10:	61 50       	subi	r22, 0x01	; 1
    2f12:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    2f14:	84 e0       	ldi	r24, 0x04	; 4
    2f16:	c5 cf       	rjmp	.-118    	; 0x2ea2 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
    2f18:	26 e0       	ldi	r18, 0x06	; 6
    2f1a:	96 95       	lsr	r25
    2f1c:	87 95       	ror	r24
    2f1e:	77 95       	ror	r23
    2f20:	67 95       	ror	r22
    2f22:	2a 95       	dec	r18
    2f24:	d1 f7       	brne	.-12     	; 0x2f1a <OsEE_atmega_startTimer1+0xa8>
    2f26:	61 50       	subi	r22, 0x01	; 1
    2f28:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    2f2a:	85 e0       	ldi	r24, 0x05	; 5
    2f2c:	ba cf       	rjmp	.-140    	; 0x2ea2 <OsEE_atmega_startTimer1+0x30>

00002f2e <__subsf3>:
    2f2e:	50 58       	subi	r21, 0x80	; 128

00002f30 <__addsf3>:
    2f30:	bb 27       	eor	r27, r27
    2f32:	aa 27       	eor	r26, r26
    2f34:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <__addsf3x>
    2f38:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__fp_round>
    2f3c:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fp_pscA>
    2f40:	38 f0       	brcs	.+14     	; 0x2f50 <__addsf3+0x20>
    2f42:	0e 94 22 19 	call	0x3244	; 0x3244 <__fp_pscB>
    2f46:	20 f0       	brcs	.+8      	; 0x2f50 <__addsf3+0x20>
    2f48:	39 f4       	brne	.+14     	; 0x2f58 <__addsf3+0x28>
    2f4a:	9f 3f       	cpi	r25, 0xFF	; 255
    2f4c:	19 f4       	brne	.+6      	; 0x2f54 <__addsf3+0x24>
    2f4e:	26 f4       	brtc	.+8      	; 0x2f58 <__addsf3+0x28>
    2f50:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__fp_nan>
    2f54:	0e f4       	brtc	.+2      	; 0x2f58 <__addsf3+0x28>
    2f56:	e0 95       	com	r30
    2f58:	e7 fb       	bst	r30, 7
    2f5a:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_inf>

00002f5e <__addsf3x>:
    2f5e:	e9 2f       	mov	r30, r25
    2f60:	0e 94 3a 19 	call	0x3274	; 0x3274 <__fp_split3>
    2f64:	58 f3       	brcs	.-42     	; 0x2f3c <__addsf3+0xc>
    2f66:	ba 17       	cp	r27, r26
    2f68:	62 07       	cpc	r22, r18
    2f6a:	73 07       	cpc	r23, r19
    2f6c:	84 07       	cpc	r24, r20
    2f6e:	95 07       	cpc	r25, r21
    2f70:	20 f0       	brcs	.+8      	; 0x2f7a <__addsf3x+0x1c>
    2f72:	79 f4       	brne	.+30     	; 0x2f92 <__addsf3x+0x34>
    2f74:	a6 f5       	brtc	.+104    	; 0x2fde <__addsf3x+0x80>
    2f76:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__fp_zero>
    2f7a:	0e f4       	brtc	.+2      	; 0x2f7e <__addsf3x+0x20>
    2f7c:	e0 95       	com	r30
    2f7e:	0b 2e       	mov	r0, r27
    2f80:	ba 2f       	mov	r27, r26
    2f82:	a0 2d       	mov	r26, r0
    2f84:	0b 01       	movw	r0, r22
    2f86:	b9 01       	movw	r22, r18
    2f88:	90 01       	movw	r18, r0
    2f8a:	0c 01       	movw	r0, r24
    2f8c:	ca 01       	movw	r24, r20
    2f8e:	a0 01       	movw	r20, r0
    2f90:	11 24       	eor	r1, r1
    2f92:	ff 27       	eor	r31, r31
    2f94:	59 1b       	sub	r21, r25
    2f96:	99 f0       	breq	.+38     	; 0x2fbe <__addsf3x+0x60>
    2f98:	59 3f       	cpi	r21, 0xF9	; 249
    2f9a:	50 f4       	brcc	.+20     	; 0x2fb0 <__addsf3x+0x52>
    2f9c:	50 3e       	cpi	r21, 0xE0	; 224
    2f9e:	68 f1       	brcs	.+90     	; 0x2ffa <__addsf3x+0x9c>
    2fa0:	1a 16       	cp	r1, r26
    2fa2:	f0 40       	sbci	r31, 0x00	; 0
    2fa4:	a2 2f       	mov	r26, r18
    2fa6:	23 2f       	mov	r18, r19
    2fa8:	34 2f       	mov	r19, r20
    2faa:	44 27       	eor	r20, r20
    2fac:	58 5f       	subi	r21, 0xF8	; 248
    2fae:	f3 cf       	rjmp	.-26     	; 0x2f96 <__addsf3x+0x38>
    2fb0:	46 95       	lsr	r20
    2fb2:	37 95       	ror	r19
    2fb4:	27 95       	ror	r18
    2fb6:	a7 95       	ror	r26
    2fb8:	f0 40       	sbci	r31, 0x00	; 0
    2fba:	53 95       	inc	r21
    2fbc:	c9 f7       	brne	.-14     	; 0x2fb0 <__addsf3x+0x52>
    2fbe:	7e f4       	brtc	.+30     	; 0x2fde <__addsf3x+0x80>
    2fc0:	1f 16       	cp	r1, r31
    2fc2:	ba 0b       	sbc	r27, r26
    2fc4:	62 0b       	sbc	r22, r18
    2fc6:	73 0b       	sbc	r23, r19
    2fc8:	84 0b       	sbc	r24, r20
    2fca:	ba f0       	brmi	.+46     	; 0x2ffa <__addsf3x+0x9c>
    2fcc:	91 50       	subi	r25, 0x01	; 1
    2fce:	a1 f0       	breq	.+40     	; 0x2ff8 <__addsf3x+0x9a>
    2fd0:	ff 0f       	add	r31, r31
    2fd2:	bb 1f       	adc	r27, r27
    2fd4:	66 1f       	adc	r22, r22
    2fd6:	77 1f       	adc	r23, r23
    2fd8:	88 1f       	adc	r24, r24
    2fda:	c2 f7       	brpl	.-16     	; 0x2fcc <__addsf3x+0x6e>
    2fdc:	0e c0       	rjmp	.+28     	; 0x2ffa <__addsf3x+0x9c>
    2fde:	ba 0f       	add	r27, r26
    2fe0:	62 1f       	adc	r22, r18
    2fe2:	73 1f       	adc	r23, r19
    2fe4:	84 1f       	adc	r24, r20
    2fe6:	48 f4       	brcc	.+18     	; 0x2ffa <__addsf3x+0x9c>
    2fe8:	87 95       	ror	r24
    2fea:	77 95       	ror	r23
    2fec:	67 95       	ror	r22
    2fee:	b7 95       	ror	r27
    2ff0:	f7 95       	ror	r31
    2ff2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ff4:	08 f0       	brcs	.+2      	; 0x2ff8 <__addsf3x+0x9a>
    2ff6:	b0 cf       	rjmp	.-160    	; 0x2f58 <__addsf3+0x28>
    2ff8:	93 95       	inc	r25
    2ffa:	88 0f       	add	r24, r24
    2ffc:	08 f0       	brcs	.+2      	; 0x3000 <__addsf3x+0xa2>
    2ffe:	99 27       	eor	r25, r25
    3000:	ee 0f       	add	r30, r30
    3002:	97 95       	ror	r25
    3004:	87 95       	ror	r24
    3006:	08 95       	ret

00003008 <__cmpsf2>:
    3008:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__fp_cmp>
    300c:	08 f4       	brcc	.+2      	; 0x3010 <__cmpsf2+0x8>
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	08 95       	ret

00003012 <__divsf3>:
    3012:	0e 94 1d 18 	call	0x303a	; 0x303a <__divsf3x>
    3016:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__fp_round>
    301a:	0e 94 22 19 	call	0x3244	; 0x3244 <__fp_pscB>
    301e:	58 f0       	brcs	.+22     	; 0x3036 <__divsf3+0x24>
    3020:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fp_pscA>
    3024:	40 f0       	brcs	.+16     	; 0x3036 <__divsf3+0x24>
    3026:	29 f4       	brne	.+10     	; 0x3032 <__divsf3+0x20>
    3028:	5f 3f       	cpi	r21, 0xFF	; 255
    302a:	29 f0       	breq	.+10     	; 0x3036 <__divsf3+0x24>
    302c:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_inf>
    3030:	51 11       	cpse	r21, r1
    3032:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__fp_szero>
    3036:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__fp_nan>

0000303a <__divsf3x>:
    303a:	0e 94 3a 19 	call	0x3274	; 0x3274 <__fp_split3>
    303e:	68 f3       	brcs	.-38     	; 0x301a <__divsf3+0x8>

00003040 <__divsf3_pse>:
    3040:	99 23       	and	r25, r25
    3042:	b1 f3       	breq	.-20     	; 0x3030 <__divsf3+0x1e>
    3044:	55 23       	and	r21, r21
    3046:	91 f3       	breq	.-28     	; 0x302c <__divsf3+0x1a>
    3048:	95 1b       	sub	r25, r21
    304a:	55 0b       	sbc	r21, r21
    304c:	bb 27       	eor	r27, r27
    304e:	aa 27       	eor	r26, r26
    3050:	62 17       	cp	r22, r18
    3052:	73 07       	cpc	r23, r19
    3054:	84 07       	cpc	r24, r20
    3056:	38 f0       	brcs	.+14     	; 0x3066 <__divsf3_pse+0x26>
    3058:	9f 5f       	subi	r25, 0xFF	; 255
    305a:	5f 4f       	sbci	r21, 0xFF	; 255
    305c:	22 0f       	add	r18, r18
    305e:	33 1f       	adc	r19, r19
    3060:	44 1f       	adc	r20, r20
    3062:	aa 1f       	adc	r26, r26
    3064:	a9 f3       	breq	.-22     	; 0x3050 <__divsf3_pse+0x10>
    3066:	35 d0       	rcall	.+106    	; 0x30d2 <__divsf3_pse+0x92>
    3068:	0e 2e       	mov	r0, r30
    306a:	3a f0       	brmi	.+14     	; 0x307a <__divsf3_pse+0x3a>
    306c:	e0 e8       	ldi	r30, 0x80	; 128
    306e:	32 d0       	rcall	.+100    	; 0x30d4 <__divsf3_pse+0x94>
    3070:	91 50       	subi	r25, 0x01	; 1
    3072:	50 40       	sbci	r21, 0x00	; 0
    3074:	e6 95       	lsr	r30
    3076:	00 1c       	adc	r0, r0
    3078:	ca f7       	brpl	.-14     	; 0x306c <__divsf3_pse+0x2c>
    307a:	2b d0       	rcall	.+86     	; 0x30d2 <__divsf3_pse+0x92>
    307c:	fe 2f       	mov	r31, r30
    307e:	29 d0       	rcall	.+82     	; 0x30d2 <__divsf3_pse+0x92>
    3080:	66 0f       	add	r22, r22
    3082:	77 1f       	adc	r23, r23
    3084:	88 1f       	adc	r24, r24
    3086:	bb 1f       	adc	r27, r27
    3088:	26 17       	cp	r18, r22
    308a:	37 07       	cpc	r19, r23
    308c:	48 07       	cpc	r20, r24
    308e:	ab 07       	cpc	r26, r27
    3090:	b0 e8       	ldi	r27, 0x80	; 128
    3092:	09 f0       	breq	.+2      	; 0x3096 <__divsf3_pse+0x56>
    3094:	bb 0b       	sbc	r27, r27
    3096:	80 2d       	mov	r24, r0
    3098:	bf 01       	movw	r22, r30
    309a:	ff 27       	eor	r31, r31
    309c:	93 58       	subi	r25, 0x83	; 131
    309e:	5f 4f       	sbci	r21, 0xFF	; 255
    30a0:	3a f0       	brmi	.+14     	; 0x30b0 <__divsf3_pse+0x70>
    30a2:	9e 3f       	cpi	r25, 0xFE	; 254
    30a4:	51 05       	cpc	r21, r1
    30a6:	78 f0       	brcs	.+30     	; 0x30c6 <__divsf3_pse+0x86>
    30a8:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_inf>
    30ac:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__fp_szero>
    30b0:	5f 3f       	cpi	r21, 0xFF	; 255
    30b2:	e4 f3       	brlt	.-8      	; 0x30ac <__divsf3_pse+0x6c>
    30b4:	98 3e       	cpi	r25, 0xE8	; 232
    30b6:	d4 f3       	brlt	.-12     	; 0x30ac <__divsf3_pse+0x6c>
    30b8:	86 95       	lsr	r24
    30ba:	77 95       	ror	r23
    30bc:	67 95       	ror	r22
    30be:	b7 95       	ror	r27
    30c0:	f7 95       	ror	r31
    30c2:	9f 5f       	subi	r25, 0xFF	; 255
    30c4:	c9 f7       	brne	.-14     	; 0x30b8 <__divsf3_pse+0x78>
    30c6:	88 0f       	add	r24, r24
    30c8:	91 1d       	adc	r25, r1
    30ca:	96 95       	lsr	r25
    30cc:	87 95       	ror	r24
    30ce:	97 f9       	bld	r25, 7
    30d0:	08 95       	ret
    30d2:	e1 e0       	ldi	r30, 0x01	; 1
    30d4:	66 0f       	add	r22, r22
    30d6:	77 1f       	adc	r23, r23
    30d8:	88 1f       	adc	r24, r24
    30da:	bb 1f       	adc	r27, r27
    30dc:	62 17       	cp	r22, r18
    30de:	73 07       	cpc	r23, r19
    30e0:	84 07       	cpc	r24, r20
    30e2:	ba 07       	cpc	r27, r26
    30e4:	20 f0       	brcs	.+8      	; 0x30ee <__divsf3_pse+0xae>
    30e6:	62 1b       	sub	r22, r18
    30e8:	73 0b       	sbc	r23, r19
    30ea:	84 0b       	sbc	r24, r20
    30ec:	ba 0b       	sbc	r27, r26
    30ee:	ee 1f       	adc	r30, r30
    30f0:	88 f7       	brcc	.-30     	; 0x30d4 <__divsf3_pse+0x94>
    30f2:	e0 95       	com	r30
    30f4:	08 95       	ret

000030f6 <__fixsfsi>:
    30f6:	0e 94 82 18 	call	0x3104	; 0x3104 <__fixunssfsi>
    30fa:	68 94       	set
    30fc:	b1 11       	cpse	r27, r1
    30fe:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__fp_szero>
    3102:	08 95       	ret

00003104 <__fixunssfsi>:
    3104:	0e 94 42 19 	call	0x3284	; 0x3284 <__fp_splitA>
    3108:	88 f0       	brcs	.+34     	; 0x312c <__fixunssfsi+0x28>
    310a:	9f 57       	subi	r25, 0x7F	; 127
    310c:	98 f0       	brcs	.+38     	; 0x3134 <__fixunssfsi+0x30>
    310e:	b9 2f       	mov	r27, r25
    3110:	99 27       	eor	r25, r25
    3112:	b7 51       	subi	r27, 0x17	; 23
    3114:	b0 f0       	brcs	.+44     	; 0x3142 <__fixunssfsi+0x3e>
    3116:	e1 f0       	breq	.+56     	; 0x3150 <__fixunssfsi+0x4c>
    3118:	66 0f       	add	r22, r22
    311a:	77 1f       	adc	r23, r23
    311c:	88 1f       	adc	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	1a f0       	brmi	.+6      	; 0x3128 <__fixunssfsi+0x24>
    3122:	ba 95       	dec	r27
    3124:	c9 f7       	brne	.-14     	; 0x3118 <__fixunssfsi+0x14>
    3126:	14 c0       	rjmp	.+40     	; 0x3150 <__fixunssfsi+0x4c>
    3128:	b1 30       	cpi	r27, 0x01	; 1
    312a:	91 f0       	breq	.+36     	; 0x3150 <__fixunssfsi+0x4c>
    312c:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <__fp_zero>
    3130:	b1 e0       	ldi	r27, 0x01	; 1
    3132:	08 95       	ret
    3134:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__fp_zero>
    3138:	67 2f       	mov	r22, r23
    313a:	78 2f       	mov	r23, r24
    313c:	88 27       	eor	r24, r24
    313e:	b8 5f       	subi	r27, 0xF8	; 248
    3140:	39 f0       	breq	.+14     	; 0x3150 <__fixunssfsi+0x4c>
    3142:	b9 3f       	cpi	r27, 0xF9	; 249
    3144:	cc f3       	brlt	.-14     	; 0x3138 <__fixunssfsi+0x34>
    3146:	86 95       	lsr	r24
    3148:	77 95       	ror	r23
    314a:	67 95       	ror	r22
    314c:	b3 95       	inc	r27
    314e:	d9 f7       	brne	.-10     	; 0x3146 <__fixunssfsi+0x42>
    3150:	3e f4       	brtc	.+14     	; 0x3160 <__fixunssfsi+0x5c>
    3152:	90 95       	com	r25
    3154:	80 95       	com	r24
    3156:	70 95       	com	r23
    3158:	61 95       	neg	r22
    315a:	7f 4f       	sbci	r23, 0xFF	; 255
    315c:	8f 4f       	sbci	r24, 0xFF	; 255
    315e:	9f 4f       	sbci	r25, 0xFF	; 255
    3160:	08 95       	ret

00003162 <__floatunsisf>:
    3162:	e8 94       	clt
    3164:	09 c0       	rjmp	.+18     	; 0x3178 <__floatsisf+0x12>

00003166 <__floatsisf>:
    3166:	97 fb       	bst	r25, 7
    3168:	3e f4       	brtc	.+14     	; 0x3178 <__floatsisf+0x12>
    316a:	90 95       	com	r25
    316c:	80 95       	com	r24
    316e:	70 95       	com	r23
    3170:	61 95       	neg	r22
    3172:	7f 4f       	sbci	r23, 0xFF	; 255
    3174:	8f 4f       	sbci	r24, 0xFF	; 255
    3176:	9f 4f       	sbci	r25, 0xFF	; 255
    3178:	99 23       	and	r25, r25
    317a:	a9 f0       	breq	.+42     	; 0x31a6 <__floatsisf+0x40>
    317c:	f9 2f       	mov	r31, r25
    317e:	96 e9       	ldi	r25, 0x96	; 150
    3180:	bb 27       	eor	r27, r27
    3182:	93 95       	inc	r25
    3184:	f6 95       	lsr	r31
    3186:	87 95       	ror	r24
    3188:	77 95       	ror	r23
    318a:	67 95       	ror	r22
    318c:	b7 95       	ror	r27
    318e:	f1 11       	cpse	r31, r1
    3190:	f8 cf       	rjmp	.-16     	; 0x3182 <__floatsisf+0x1c>
    3192:	fa f4       	brpl	.+62     	; 0x31d2 <__floatsisf+0x6c>
    3194:	bb 0f       	add	r27, r27
    3196:	11 f4       	brne	.+4      	; 0x319c <__floatsisf+0x36>
    3198:	60 ff       	sbrs	r22, 0
    319a:	1b c0       	rjmp	.+54     	; 0x31d2 <__floatsisf+0x6c>
    319c:	6f 5f       	subi	r22, 0xFF	; 255
    319e:	7f 4f       	sbci	r23, 0xFF	; 255
    31a0:	8f 4f       	sbci	r24, 0xFF	; 255
    31a2:	9f 4f       	sbci	r25, 0xFF	; 255
    31a4:	16 c0       	rjmp	.+44     	; 0x31d2 <__floatsisf+0x6c>
    31a6:	88 23       	and	r24, r24
    31a8:	11 f0       	breq	.+4      	; 0x31ae <__floatsisf+0x48>
    31aa:	96 e9       	ldi	r25, 0x96	; 150
    31ac:	11 c0       	rjmp	.+34     	; 0x31d0 <__floatsisf+0x6a>
    31ae:	77 23       	and	r23, r23
    31b0:	21 f0       	breq	.+8      	; 0x31ba <__floatsisf+0x54>
    31b2:	9e e8       	ldi	r25, 0x8E	; 142
    31b4:	87 2f       	mov	r24, r23
    31b6:	76 2f       	mov	r23, r22
    31b8:	05 c0       	rjmp	.+10     	; 0x31c4 <__floatsisf+0x5e>
    31ba:	66 23       	and	r22, r22
    31bc:	71 f0       	breq	.+28     	; 0x31da <__floatsisf+0x74>
    31be:	96 e8       	ldi	r25, 0x86	; 134
    31c0:	86 2f       	mov	r24, r22
    31c2:	70 e0       	ldi	r23, 0x00	; 0
    31c4:	60 e0       	ldi	r22, 0x00	; 0
    31c6:	2a f0       	brmi	.+10     	; 0x31d2 <__floatsisf+0x6c>
    31c8:	9a 95       	dec	r25
    31ca:	66 0f       	add	r22, r22
    31cc:	77 1f       	adc	r23, r23
    31ce:	88 1f       	adc	r24, r24
    31d0:	da f7       	brpl	.-10     	; 0x31c8 <__floatsisf+0x62>
    31d2:	88 0f       	add	r24, r24
    31d4:	96 95       	lsr	r25
    31d6:	87 95       	ror	r24
    31d8:	97 f9       	bld	r25, 7
    31da:	08 95       	ret

000031dc <__fp_cmp>:
    31dc:	99 0f       	add	r25, r25
    31de:	00 08       	sbc	r0, r0
    31e0:	55 0f       	add	r21, r21
    31e2:	aa 0b       	sbc	r26, r26
    31e4:	e0 e8       	ldi	r30, 0x80	; 128
    31e6:	fe ef       	ldi	r31, 0xFE	; 254
    31e8:	16 16       	cp	r1, r22
    31ea:	17 06       	cpc	r1, r23
    31ec:	e8 07       	cpc	r30, r24
    31ee:	f9 07       	cpc	r31, r25
    31f0:	c0 f0       	brcs	.+48     	; 0x3222 <__fp_cmp+0x46>
    31f2:	12 16       	cp	r1, r18
    31f4:	13 06       	cpc	r1, r19
    31f6:	e4 07       	cpc	r30, r20
    31f8:	f5 07       	cpc	r31, r21
    31fa:	98 f0       	brcs	.+38     	; 0x3222 <__fp_cmp+0x46>
    31fc:	62 1b       	sub	r22, r18
    31fe:	73 0b       	sbc	r23, r19
    3200:	84 0b       	sbc	r24, r20
    3202:	95 0b       	sbc	r25, r21
    3204:	39 f4       	brne	.+14     	; 0x3214 <__fp_cmp+0x38>
    3206:	0a 26       	eor	r0, r26
    3208:	61 f0       	breq	.+24     	; 0x3222 <__fp_cmp+0x46>
    320a:	23 2b       	or	r18, r19
    320c:	24 2b       	or	r18, r20
    320e:	25 2b       	or	r18, r21
    3210:	21 f4       	brne	.+8      	; 0x321a <__fp_cmp+0x3e>
    3212:	08 95       	ret
    3214:	0a 26       	eor	r0, r26
    3216:	09 f4       	brne	.+2      	; 0x321a <__fp_cmp+0x3e>
    3218:	a1 40       	sbci	r26, 0x01	; 1
    321a:	a6 95       	lsr	r26
    321c:	8f ef       	ldi	r24, 0xFF	; 255
    321e:	81 1d       	adc	r24, r1
    3220:	81 1d       	adc	r24, r1
    3222:	08 95       	ret

00003224 <__fp_inf>:
    3224:	97 f9       	bld	r25, 7
    3226:	9f 67       	ori	r25, 0x7F	; 127
    3228:	80 e8       	ldi	r24, 0x80	; 128
    322a:	70 e0       	ldi	r23, 0x00	; 0
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	08 95       	ret

00003230 <__fp_nan>:
    3230:	9f ef       	ldi	r25, 0xFF	; 255
    3232:	80 ec       	ldi	r24, 0xC0	; 192
    3234:	08 95       	ret

00003236 <__fp_pscA>:
    3236:	00 24       	eor	r0, r0
    3238:	0a 94       	dec	r0
    323a:	16 16       	cp	r1, r22
    323c:	17 06       	cpc	r1, r23
    323e:	18 06       	cpc	r1, r24
    3240:	09 06       	cpc	r0, r25
    3242:	08 95       	ret

00003244 <__fp_pscB>:
    3244:	00 24       	eor	r0, r0
    3246:	0a 94       	dec	r0
    3248:	12 16       	cp	r1, r18
    324a:	13 06       	cpc	r1, r19
    324c:	14 06       	cpc	r1, r20
    324e:	05 06       	cpc	r0, r21
    3250:	08 95       	ret

00003252 <__fp_round>:
    3252:	09 2e       	mov	r0, r25
    3254:	03 94       	inc	r0
    3256:	00 0c       	add	r0, r0
    3258:	11 f4       	brne	.+4      	; 0x325e <__fp_round+0xc>
    325a:	88 23       	and	r24, r24
    325c:	52 f0       	brmi	.+20     	; 0x3272 <__fp_round+0x20>
    325e:	bb 0f       	add	r27, r27
    3260:	40 f4       	brcc	.+16     	; 0x3272 <__fp_round+0x20>
    3262:	bf 2b       	or	r27, r31
    3264:	11 f4       	brne	.+4      	; 0x326a <__fp_round+0x18>
    3266:	60 ff       	sbrs	r22, 0
    3268:	04 c0       	rjmp	.+8      	; 0x3272 <__fp_round+0x20>
    326a:	6f 5f       	subi	r22, 0xFF	; 255
    326c:	7f 4f       	sbci	r23, 0xFF	; 255
    326e:	8f 4f       	sbci	r24, 0xFF	; 255
    3270:	9f 4f       	sbci	r25, 0xFF	; 255
    3272:	08 95       	ret

00003274 <__fp_split3>:
    3274:	57 fd       	sbrc	r21, 7
    3276:	90 58       	subi	r25, 0x80	; 128
    3278:	44 0f       	add	r20, r20
    327a:	55 1f       	adc	r21, r21
    327c:	59 f0       	breq	.+22     	; 0x3294 <__fp_splitA+0x10>
    327e:	5f 3f       	cpi	r21, 0xFF	; 255
    3280:	71 f0       	breq	.+28     	; 0x329e <__fp_splitA+0x1a>
    3282:	47 95       	ror	r20

00003284 <__fp_splitA>:
    3284:	88 0f       	add	r24, r24
    3286:	97 fb       	bst	r25, 7
    3288:	99 1f       	adc	r25, r25
    328a:	61 f0       	breq	.+24     	; 0x32a4 <__fp_splitA+0x20>
    328c:	9f 3f       	cpi	r25, 0xFF	; 255
    328e:	79 f0       	breq	.+30     	; 0x32ae <__fp_splitA+0x2a>
    3290:	87 95       	ror	r24
    3292:	08 95       	ret
    3294:	12 16       	cp	r1, r18
    3296:	13 06       	cpc	r1, r19
    3298:	14 06       	cpc	r1, r20
    329a:	55 1f       	adc	r21, r21
    329c:	f2 cf       	rjmp	.-28     	; 0x3282 <__fp_split3+0xe>
    329e:	46 95       	lsr	r20
    32a0:	f1 df       	rcall	.-30     	; 0x3284 <__fp_splitA>
    32a2:	08 c0       	rjmp	.+16     	; 0x32b4 <__fp_splitA+0x30>
    32a4:	16 16       	cp	r1, r22
    32a6:	17 06       	cpc	r1, r23
    32a8:	18 06       	cpc	r1, r24
    32aa:	99 1f       	adc	r25, r25
    32ac:	f1 cf       	rjmp	.-30     	; 0x3290 <__fp_splitA+0xc>
    32ae:	86 95       	lsr	r24
    32b0:	71 05       	cpc	r23, r1
    32b2:	61 05       	cpc	r22, r1
    32b4:	08 94       	sec
    32b6:	08 95       	ret

000032b8 <__fp_zero>:
    32b8:	e8 94       	clt

000032ba <__fp_szero>:
    32ba:	bb 27       	eor	r27, r27
    32bc:	66 27       	eor	r22, r22
    32be:	77 27       	eor	r23, r23
    32c0:	cb 01       	movw	r24, r22
    32c2:	97 f9       	bld	r25, 7
    32c4:	08 95       	ret

000032c6 <__gesf2>:
    32c6:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__fp_cmp>
    32ca:	08 f4       	brcc	.+2      	; 0x32ce <__gesf2+0x8>
    32cc:	8f ef       	ldi	r24, 0xFF	; 255
    32ce:	08 95       	ret

000032d0 <__mulsf3>:
    32d0:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__mulsf3x>
    32d4:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__fp_round>
    32d8:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fp_pscA>
    32dc:	38 f0       	brcs	.+14     	; 0x32ec <__mulsf3+0x1c>
    32de:	0e 94 22 19 	call	0x3244	; 0x3244 <__fp_pscB>
    32e2:	20 f0       	brcs	.+8      	; 0x32ec <__mulsf3+0x1c>
    32e4:	95 23       	and	r25, r21
    32e6:	11 f0       	breq	.+4      	; 0x32ec <__mulsf3+0x1c>
    32e8:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_inf>
    32ec:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__fp_nan>
    32f0:	11 24       	eor	r1, r1
    32f2:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__fp_szero>

000032f6 <__mulsf3x>:
    32f6:	0e 94 3a 19 	call	0x3274	; 0x3274 <__fp_split3>
    32fa:	70 f3       	brcs	.-36     	; 0x32d8 <__mulsf3+0x8>

000032fc <__mulsf3_pse>:
    32fc:	95 9f       	mul	r25, r21
    32fe:	c1 f3       	breq	.-16     	; 0x32f0 <__mulsf3+0x20>
    3300:	95 0f       	add	r25, r21
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	55 1f       	adc	r21, r21
    3306:	62 9f       	mul	r22, r18
    3308:	f0 01       	movw	r30, r0
    330a:	72 9f       	mul	r23, r18
    330c:	bb 27       	eor	r27, r27
    330e:	f0 0d       	add	r31, r0
    3310:	b1 1d       	adc	r27, r1
    3312:	63 9f       	mul	r22, r19
    3314:	aa 27       	eor	r26, r26
    3316:	f0 0d       	add	r31, r0
    3318:	b1 1d       	adc	r27, r1
    331a:	aa 1f       	adc	r26, r26
    331c:	64 9f       	mul	r22, r20
    331e:	66 27       	eor	r22, r22
    3320:	b0 0d       	add	r27, r0
    3322:	a1 1d       	adc	r26, r1
    3324:	66 1f       	adc	r22, r22
    3326:	82 9f       	mul	r24, r18
    3328:	22 27       	eor	r18, r18
    332a:	b0 0d       	add	r27, r0
    332c:	a1 1d       	adc	r26, r1
    332e:	62 1f       	adc	r22, r18
    3330:	73 9f       	mul	r23, r19
    3332:	b0 0d       	add	r27, r0
    3334:	a1 1d       	adc	r26, r1
    3336:	62 1f       	adc	r22, r18
    3338:	83 9f       	mul	r24, r19
    333a:	a0 0d       	add	r26, r0
    333c:	61 1d       	adc	r22, r1
    333e:	22 1f       	adc	r18, r18
    3340:	74 9f       	mul	r23, r20
    3342:	33 27       	eor	r19, r19
    3344:	a0 0d       	add	r26, r0
    3346:	61 1d       	adc	r22, r1
    3348:	23 1f       	adc	r18, r19
    334a:	84 9f       	mul	r24, r20
    334c:	60 0d       	add	r22, r0
    334e:	21 1d       	adc	r18, r1
    3350:	82 2f       	mov	r24, r18
    3352:	76 2f       	mov	r23, r22
    3354:	6a 2f       	mov	r22, r26
    3356:	11 24       	eor	r1, r1
    3358:	9f 57       	subi	r25, 0x7F	; 127
    335a:	50 40       	sbci	r21, 0x00	; 0
    335c:	9a f0       	brmi	.+38     	; 0x3384 <__mulsf3_pse+0x88>
    335e:	f1 f0       	breq	.+60     	; 0x339c <__mulsf3_pse+0xa0>
    3360:	88 23       	and	r24, r24
    3362:	4a f0       	brmi	.+18     	; 0x3376 <__mulsf3_pse+0x7a>
    3364:	ee 0f       	add	r30, r30
    3366:	ff 1f       	adc	r31, r31
    3368:	bb 1f       	adc	r27, r27
    336a:	66 1f       	adc	r22, r22
    336c:	77 1f       	adc	r23, r23
    336e:	88 1f       	adc	r24, r24
    3370:	91 50       	subi	r25, 0x01	; 1
    3372:	50 40       	sbci	r21, 0x00	; 0
    3374:	a9 f7       	brne	.-22     	; 0x3360 <__mulsf3_pse+0x64>
    3376:	9e 3f       	cpi	r25, 0xFE	; 254
    3378:	51 05       	cpc	r21, r1
    337a:	80 f0       	brcs	.+32     	; 0x339c <__mulsf3_pse+0xa0>
    337c:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_inf>
    3380:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__fp_szero>
    3384:	5f 3f       	cpi	r21, 0xFF	; 255
    3386:	e4 f3       	brlt	.-8      	; 0x3380 <__mulsf3_pse+0x84>
    3388:	98 3e       	cpi	r25, 0xE8	; 232
    338a:	d4 f3       	brlt	.-12     	; 0x3380 <__mulsf3_pse+0x84>
    338c:	86 95       	lsr	r24
    338e:	77 95       	ror	r23
    3390:	67 95       	ror	r22
    3392:	b7 95       	ror	r27
    3394:	f7 95       	ror	r31
    3396:	e7 95       	ror	r30
    3398:	9f 5f       	subi	r25, 0xFF	; 255
    339a:	c1 f7       	brne	.-16     	; 0x338c <__mulsf3_pse+0x90>
    339c:	fe 2b       	or	r31, r30
    339e:	88 0f       	add	r24, r24
    33a0:	91 1d       	adc	r25, r1
    33a2:	96 95       	lsr	r25
    33a4:	87 95       	ror	r24
    33a6:	97 f9       	bld	r25, 7
    33a8:	08 95       	ret

000033aa <pow>:
    33aa:	fa 01       	movw	r30, r20
    33ac:	ee 0f       	add	r30, r30
    33ae:	ff 1f       	adc	r31, r31
    33b0:	30 96       	adiw	r30, 0x00	; 0
    33b2:	21 05       	cpc	r18, r1
    33b4:	31 05       	cpc	r19, r1
    33b6:	a1 f1       	breq	.+104    	; 0x3420 <pow+0x76>
    33b8:	61 15       	cp	r22, r1
    33ba:	71 05       	cpc	r23, r1
    33bc:	61 f4       	brne	.+24     	; 0x33d6 <pow+0x2c>
    33be:	80 38       	cpi	r24, 0x80	; 128
    33c0:	bf e3       	ldi	r27, 0x3F	; 63
    33c2:	9b 07       	cpc	r25, r27
    33c4:	49 f1       	breq	.+82     	; 0x3418 <pow+0x6e>
    33c6:	68 94       	set
    33c8:	90 38       	cpi	r25, 0x80	; 128
    33ca:	81 05       	cpc	r24, r1
    33cc:	61 f0       	breq	.+24     	; 0x33e6 <pow+0x3c>
    33ce:	80 38       	cpi	r24, 0x80	; 128
    33d0:	bf ef       	ldi	r27, 0xFF	; 255
    33d2:	9b 07       	cpc	r25, r27
    33d4:	41 f0       	breq	.+16     	; 0x33e6 <pow+0x3c>
    33d6:	99 23       	and	r25, r25
    33d8:	4a f5       	brpl	.+82     	; 0x342c <pow+0x82>
    33da:	ff 3f       	cpi	r31, 0xFF	; 255
    33dc:	e1 05       	cpc	r30, r1
    33de:	31 05       	cpc	r19, r1
    33e0:	21 05       	cpc	r18, r1
    33e2:	19 f1       	breq	.+70     	; 0x342a <pow+0x80>
    33e4:	e8 94       	clt
    33e6:	08 94       	sec
    33e8:	e7 95       	ror	r30
    33ea:	d9 01       	movw	r26, r18
    33ec:	aa 23       	and	r26, r26
    33ee:	29 f4       	brne	.+10     	; 0x33fa <pow+0x50>
    33f0:	ab 2f       	mov	r26, r27
    33f2:	be 2f       	mov	r27, r30
    33f4:	f8 5f       	subi	r31, 0xF8	; 248
    33f6:	d0 f3       	brcs	.-12     	; 0x33ec <pow+0x42>
    33f8:	10 c0       	rjmp	.+32     	; 0x341a <pow+0x70>
    33fa:	ff 5f       	subi	r31, 0xFF	; 255
    33fc:	70 f4       	brcc	.+28     	; 0x341a <pow+0x70>
    33fe:	a6 95       	lsr	r26
    3400:	e0 f7       	brcc	.-8      	; 0x33fa <pow+0x50>
    3402:	f7 39       	cpi	r31, 0x97	; 151
    3404:	50 f0       	brcs	.+20     	; 0x341a <pow+0x70>
    3406:	19 f0       	breq	.+6      	; 0x340e <pow+0x64>
    3408:	ff 3a       	cpi	r31, 0xAF	; 175
    340a:	38 f4       	brcc	.+14     	; 0x341a <pow+0x70>
    340c:	9f 77       	andi	r25, 0x7F	; 127
    340e:	9f 93       	push	r25
    3410:	0d d0       	rcall	.+26     	; 0x342c <pow+0x82>
    3412:	0f 90       	pop	r0
    3414:	07 fc       	sbrc	r0, 7
    3416:	90 58       	subi	r25, 0x80	; 128
    3418:	08 95       	ret
    341a:	46 f0       	brts	.+16     	; 0x342c <pow+0x82>
    341c:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__fp_nan>
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	80 e8       	ldi	r24, 0x80	; 128
    3426:	9f e3       	ldi	r25, 0x3F	; 63
    3428:	08 95       	ret
    342a:	4f e7       	ldi	r20, 0x7F	; 127
    342c:	9f 77       	andi	r25, 0x7F	; 127
    342e:	5f 93       	push	r21
    3430:	4f 93       	push	r20
    3432:	3f 93       	push	r19
    3434:	2f 93       	push	r18
    3436:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <log>
    343a:	2f 91       	pop	r18
    343c:	3f 91       	pop	r19
    343e:	4f 91       	pop	r20
    3440:	5f 91       	pop	r21
    3442:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    3446:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <exp>

0000344a <__unordsf2>:
    344a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__fp_cmp>
    344e:	88 0b       	sbc	r24, r24
    3450:	99 0b       	sbc	r25, r25
    3452:	08 95       	ret
    3454:	29 f4       	brne	.+10     	; 0x3460 <__unordsf2+0x16>
    3456:	16 f0       	brts	.+4      	; 0x345c <__unordsf2+0x12>
    3458:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_inf>
    345c:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__fp_zero>
    3460:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__fp_nan>

00003464 <exp>:
    3464:	0e 94 42 19 	call	0x3284	; 0x3284 <__fp_splitA>
    3468:	a8 f3       	brcs	.-22     	; 0x3454 <__unordsf2+0xa>
    346a:	96 38       	cpi	r25, 0x86	; 134
    346c:	a0 f7       	brcc	.-24     	; 0x3456 <__unordsf2+0xc>
    346e:	07 f8       	bld	r0, 7
    3470:	0f 92       	push	r0
    3472:	e8 94       	clt
    3474:	2b e3       	ldi	r18, 0x3B	; 59
    3476:	3a ea       	ldi	r19, 0xAA	; 170
    3478:	48 eb       	ldi	r20, 0xB8	; 184
    347a:	5f e7       	ldi	r21, 0x7F	; 127
    347c:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__mulsf3_pse>
    3480:	0f 92       	push	r0
    3482:	0f 92       	push	r0
    3484:	0f 92       	push	r0
    3486:	4d b7       	in	r20, 0x3d	; 61
    3488:	5e b7       	in	r21, 0x3e	; 62
    348a:	0f 92       	push	r0
    348c:	0e 94 1d 1b 	call	0x363a	; 0x363a <modf>
    3490:	e8 e6       	ldi	r30, 0x68	; 104
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__fp_powser>
    3498:	4f 91       	pop	r20
    349a:	5f 91       	pop	r21
    349c:	ef 91       	pop	r30
    349e:	ff 91       	pop	r31
    34a0:	e5 95       	asr	r30
    34a2:	ee 1f       	adc	r30, r30
    34a4:	ff 1f       	adc	r31, r31
    34a6:	49 f0       	breq	.+18     	; 0x34ba <exp+0x56>
    34a8:	fe 57       	subi	r31, 0x7E	; 126
    34aa:	e0 68       	ori	r30, 0x80	; 128
    34ac:	44 27       	eor	r20, r20
    34ae:	ee 0f       	add	r30, r30
    34b0:	44 1f       	adc	r20, r20
    34b2:	fa 95       	dec	r31
    34b4:	e1 f7       	brne	.-8      	; 0x34ae <exp+0x4a>
    34b6:	41 95       	neg	r20
    34b8:	55 0b       	sbc	r21, r21
    34ba:	0e 94 97 1a 	call	0x352e	; 0x352e <ldexp>
    34be:	0f 90       	pop	r0
    34c0:	07 fe       	sbrs	r0, 7
    34c2:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <inverse>
    34c6:	08 95       	ret

000034c8 <__fp_powser>:
    34c8:	df 93       	push	r29
    34ca:	cf 93       	push	r28
    34cc:	1f 93       	push	r17
    34ce:	0f 93       	push	r16
    34d0:	ff 92       	push	r15
    34d2:	ef 92       	push	r14
    34d4:	df 92       	push	r13
    34d6:	7b 01       	movw	r14, r22
    34d8:	8c 01       	movw	r16, r24
    34da:	68 94       	set
    34dc:	06 c0       	rjmp	.+12     	; 0x34ea <__fp_powser+0x22>
    34de:	da 2e       	mov	r13, r26
    34e0:	ef 01       	movw	r28, r30
    34e2:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__mulsf3x>
    34e6:	fe 01       	movw	r30, r28
    34e8:	e8 94       	clt
    34ea:	a5 91       	lpm	r26, Z+
    34ec:	25 91       	lpm	r18, Z+
    34ee:	35 91       	lpm	r19, Z+
    34f0:	45 91       	lpm	r20, Z+
    34f2:	55 91       	lpm	r21, Z+
    34f4:	a6 f3       	brts	.-24     	; 0x34de <__fp_powser+0x16>
    34f6:	ef 01       	movw	r28, r30
    34f8:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <__addsf3x>
    34fc:	fe 01       	movw	r30, r28
    34fe:	97 01       	movw	r18, r14
    3500:	a8 01       	movw	r20, r16
    3502:	da 94       	dec	r13
    3504:	69 f7       	brne	.-38     	; 0x34e0 <__fp_powser+0x18>
    3506:	df 90       	pop	r13
    3508:	ef 90       	pop	r14
    350a:	ff 90       	pop	r15
    350c:	0f 91       	pop	r16
    350e:	1f 91       	pop	r17
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <inverse>:
    3516:	9b 01       	movw	r18, r22
    3518:	ac 01       	movw	r20, r24
    351a:	60 e0       	ldi	r22, 0x00	; 0
    351c:	70 e0       	ldi	r23, 0x00	; 0
    351e:	80 e8       	ldi	r24, 0x80	; 128
    3520:	9f e3       	ldi	r25, 0x3F	; 63
    3522:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__divsf3>
    3526:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_inf>
    352a:	0c 94 51 1b 	jmp	0x36a2	; 0x36a2 <__fp_mpack>

0000352e <ldexp>:
    352e:	0e 94 42 19 	call	0x3284	; 0x3284 <__fp_splitA>
    3532:	d8 f3       	brcs	.-10     	; 0x352a <inverse+0x14>
    3534:	99 23       	and	r25, r25
    3536:	c9 f3       	breq	.-14     	; 0x352a <inverse+0x14>
    3538:	94 0f       	add	r25, r20
    353a:	51 1d       	adc	r21, r1
    353c:	a3 f3       	brvs	.-24     	; 0x3526 <inverse+0x10>
    353e:	91 50       	subi	r25, 0x01	; 1
    3540:	50 40       	sbci	r21, 0x00	; 0
    3542:	94 f0       	brlt	.+36     	; 0x3568 <ldexp+0x3a>
    3544:	59 f0       	breq	.+22     	; 0x355c <ldexp+0x2e>
    3546:	88 23       	and	r24, r24
    3548:	32 f0       	brmi	.+12     	; 0x3556 <ldexp+0x28>
    354a:	66 0f       	add	r22, r22
    354c:	77 1f       	adc	r23, r23
    354e:	88 1f       	adc	r24, r24
    3550:	91 50       	subi	r25, 0x01	; 1
    3552:	50 40       	sbci	r21, 0x00	; 0
    3554:	c1 f7       	brne	.-16     	; 0x3546 <ldexp+0x18>
    3556:	9e 3f       	cpi	r25, 0xFE	; 254
    3558:	51 05       	cpc	r21, r1
    355a:	2c f7       	brge	.-54     	; 0x3526 <inverse+0x10>
    355c:	88 0f       	add	r24, r24
    355e:	91 1d       	adc	r25, r1
    3560:	96 95       	lsr	r25
    3562:	87 95       	ror	r24
    3564:	97 f9       	bld	r25, 7
    3566:	08 95       	ret
    3568:	5f 3f       	cpi	r21, 0xFF	; 255
    356a:	ac f0       	brlt	.+42     	; 0x3596 <ldexp+0x68>
    356c:	98 3e       	cpi	r25, 0xE8	; 232
    356e:	9c f0       	brlt	.+38     	; 0x3596 <ldexp+0x68>
    3570:	bb 27       	eor	r27, r27
    3572:	86 95       	lsr	r24
    3574:	77 95       	ror	r23
    3576:	67 95       	ror	r22
    3578:	b7 95       	ror	r27
    357a:	08 f4       	brcc	.+2      	; 0x357e <ldexp+0x50>
    357c:	b1 60       	ori	r27, 0x01	; 1
    357e:	93 95       	inc	r25
    3580:	c1 f7       	brne	.-16     	; 0x3572 <ldexp+0x44>
    3582:	bb 0f       	add	r27, r27
    3584:	58 f7       	brcc	.-42     	; 0x355c <ldexp+0x2e>
    3586:	11 f4       	brne	.+4      	; 0x358c <ldexp+0x5e>
    3588:	60 ff       	sbrs	r22, 0
    358a:	e8 cf       	rjmp	.-48     	; 0x355c <ldexp+0x2e>
    358c:	6f 5f       	subi	r22, 0xFF	; 255
    358e:	7f 4f       	sbci	r23, 0xFF	; 255
    3590:	8f 4f       	sbci	r24, 0xFF	; 255
    3592:	9f 4f       	sbci	r25, 0xFF	; 255
    3594:	e3 cf       	rjmp	.-58     	; 0x355c <ldexp+0x2e>
    3596:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__fp_szero>
    359a:	16 f0       	brts	.+4      	; 0x35a0 <ldexp+0x72>
    359c:	0c 94 51 1b 	jmp	0x36a2	; 0x36a2 <__fp_mpack>
    35a0:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__fp_nan>
    35a4:	68 94       	set
    35a6:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_inf>

000035aa <log>:
    35aa:	0e 94 42 19 	call	0x3284	; 0x3284 <__fp_splitA>
    35ae:	a8 f3       	brcs	.-22     	; 0x359a <ldexp+0x6c>
    35b0:	99 23       	and	r25, r25
    35b2:	c1 f3       	breq	.-16     	; 0x35a4 <ldexp+0x76>
    35b4:	ae f3       	brts	.-22     	; 0x35a0 <ldexp+0x72>
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	1f 93       	push	r17
    35bc:	0f 93       	push	r16
    35be:	ff 92       	push	r15
    35c0:	c9 2f       	mov	r28, r25
    35c2:	dd 27       	eor	r29, r29
    35c4:	88 23       	and	r24, r24
    35c6:	2a f0       	brmi	.+10     	; 0x35d2 <log+0x28>
    35c8:	21 97       	sbiw	r28, 0x01	; 1
    35ca:	66 0f       	add	r22, r22
    35cc:	77 1f       	adc	r23, r23
    35ce:	88 1f       	adc	r24, r24
    35d0:	da f7       	brpl	.-10     	; 0x35c8 <log+0x1e>
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	40 e8       	ldi	r20, 0x80	; 128
    35d8:	5f eb       	ldi	r21, 0xBF	; 191
    35da:	9f e3       	ldi	r25, 0x3F	; 63
    35dc:	88 39       	cpi	r24, 0x98	; 152
    35de:	20 f0       	brcs	.+8      	; 0x35e8 <log+0x3e>
    35e0:	80 3e       	cpi	r24, 0xE0	; 224
    35e2:	38 f0       	brcs	.+14     	; 0x35f2 <log+0x48>
    35e4:	21 96       	adiw	r28, 0x01	; 1
    35e6:	8f 77       	andi	r24, 0x7F	; 127
    35e8:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    35ec:	e0 e9       	ldi	r30, 0x90	; 144
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	04 c0       	rjmp	.+8      	; 0x35fa <log+0x50>
    35f2:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    35f6:	ed eb       	ldi	r30, 0xBD	; 189
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__fp_powser>
    35fe:	8b 01       	movw	r16, r22
    3600:	be 01       	movw	r22, r28
    3602:	ec 01       	movw	r28, r24
    3604:	fb 2e       	mov	r15, r27
    3606:	6f 57       	subi	r22, 0x7F	; 127
    3608:	71 09       	sbc	r23, r1
    360a:	75 95       	asr	r23
    360c:	77 1f       	adc	r23, r23
    360e:	88 0b       	sbc	r24, r24
    3610:	99 0b       	sbc	r25, r25
    3612:	0e 94 b3 18 	call	0x3166	; 0x3166 <__floatsisf>
    3616:	28 e1       	ldi	r18, 0x18	; 24
    3618:	32 e7       	ldi	r19, 0x72	; 114
    361a:	41 e3       	ldi	r20, 0x31	; 49
    361c:	5f e3       	ldi	r21, 0x3F	; 63
    361e:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__mulsf3x>
    3622:	af 2d       	mov	r26, r15
    3624:	98 01       	movw	r18, r16
    3626:	ae 01       	movw	r20, r28
    3628:	ff 90       	pop	r15
    362a:	0f 91       	pop	r16
    362c:	1f 91       	pop	r17
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <__addsf3x>
    3636:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__fp_round>

0000363a <modf>:
    363a:	fa 01       	movw	r30, r20
    363c:	dc 01       	movw	r26, r24
    363e:	aa 0f       	add	r26, r26
    3640:	bb 1f       	adc	r27, r27
    3642:	9b 01       	movw	r18, r22
    3644:	ac 01       	movw	r20, r24
    3646:	bf 57       	subi	r27, 0x7F	; 127
    3648:	28 f4       	brcc	.+10     	; 0x3654 <modf+0x1a>
    364a:	22 27       	eor	r18, r18
    364c:	33 27       	eor	r19, r19
    364e:	44 27       	eor	r20, r20
    3650:	50 78       	andi	r21, 0x80	; 128
    3652:	20 c0       	rjmp	.+64     	; 0x3694 <modf+0x5a>
    3654:	b7 51       	subi	r27, 0x17	; 23
    3656:	90 f4       	brcc	.+36     	; 0x367c <modf+0x42>
    3658:	ab 2f       	mov	r26, r27
    365a:	00 24       	eor	r0, r0
    365c:	46 95       	lsr	r20
    365e:	37 95       	ror	r19
    3660:	27 95       	ror	r18
    3662:	01 1c       	adc	r0, r1
    3664:	a3 95       	inc	r26
    3666:	d2 f3       	brmi	.-12     	; 0x365c <modf+0x22>
    3668:	00 20       	and	r0, r0
    366a:	71 f0       	breq	.+28     	; 0x3688 <modf+0x4e>
    366c:	22 0f       	add	r18, r18
    366e:	33 1f       	adc	r19, r19
    3670:	44 1f       	adc	r20, r20
    3672:	b3 95       	inc	r27
    3674:	da f3       	brmi	.-10     	; 0x366c <modf+0x32>
    3676:	0e d0       	rcall	.+28     	; 0x3694 <modf+0x5a>
    3678:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__subsf3>
    367c:	61 30       	cpi	r22, 0x01	; 1
    367e:	71 05       	cpc	r23, r1
    3680:	a0 e8       	ldi	r26, 0x80	; 128
    3682:	8a 07       	cpc	r24, r26
    3684:	b9 46       	sbci	r27, 0x69	; 105
    3686:	30 f4       	brcc	.+12     	; 0x3694 <modf+0x5a>
    3688:	9b 01       	movw	r18, r22
    368a:	ac 01       	movw	r20, r24
    368c:	66 27       	eor	r22, r22
    368e:	77 27       	eor	r23, r23
    3690:	88 27       	eor	r24, r24
    3692:	90 78       	andi	r25, 0x80	; 128
    3694:	30 96       	adiw	r30, 0x00	; 0
    3696:	21 f0       	breq	.+8      	; 0x36a0 <modf+0x66>
    3698:	20 83       	st	Z, r18
    369a:	31 83       	std	Z+1, r19	; 0x01
    369c:	42 83       	std	Z+2, r20	; 0x02
    369e:	53 83       	std	Z+3, r21	; 0x03
    36a0:	08 95       	ret

000036a2 <__fp_mpack>:
    36a2:	9f 3f       	cpi	r25, 0xFF	; 255
    36a4:	31 f0       	breq	.+12     	; 0x36b2 <__fp_mpack_finite+0xc>

000036a6 <__fp_mpack_finite>:
    36a6:	91 50       	subi	r25, 0x01	; 1
    36a8:	20 f4       	brcc	.+8      	; 0x36b2 <__fp_mpack_finite+0xc>
    36aa:	87 95       	ror	r24
    36ac:	77 95       	ror	r23
    36ae:	67 95       	ror	r22
    36b0:	b7 95       	ror	r27
    36b2:	88 0f       	add	r24, r24
    36b4:	91 1d       	adc	r25, r1
    36b6:	96 95       	lsr	r25
    36b8:	87 95       	ror	r24
    36ba:	97 f9       	bld	r25, 7
    36bc:	08 95       	ret

000036be <__udivmodsi4>:
    36be:	a1 e2       	ldi	r26, 0x21	; 33
    36c0:	1a 2e       	mov	r1, r26
    36c2:	aa 1b       	sub	r26, r26
    36c4:	bb 1b       	sub	r27, r27
    36c6:	fd 01       	movw	r30, r26
    36c8:	0d c0       	rjmp	.+26     	; 0x36e4 <__udivmodsi4_ep>

000036ca <__udivmodsi4_loop>:
    36ca:	aa 1f       	adc	r26, r26
    36cc:	bb 1f       	adc	r27, r27
    36ce:	ee 1f       	adc	r30, r30
    36d0:	ff 1f       	adc	r31, r31
    36d2:	a2 17       	cp	r26, r18
    36d4:	b3 07       	cpc	r27, r19
    36d6:	e4 07       	cpc	r30, r20
    36d8:	f5 07       	cpc	r31, r21
    36da:	20 f0       	brcs	.+8      	; 0x36e4 <__udivmodsi4_ep>
    36dc:	a2 1b       	sub	r26, r18
    36de:	b3 0b       	sbc	r27, r19
    36e0:	e4 0b       	sbc	r30, r20
    36e2:	f5 0b       	sbc	r31, r21

000036e4 <__udivmodsi4_ep>:
    36e4:	66 1f       	adc	r22, r22
    36e6:	77 1f       	adc	r23, r23
    36e8:	88 1f       	adc	r24, r24
    36ea:	99 1f       	adc	r25, r25
    36ec:	1a 94       	dec	r1
    36ee:	69 f7       	brne	.-38     	; 0x36ca <__udivmodsi4_loop>
    36f0:	60 95       	com	r22
    36f2:	70 95       	com	r23
    36f4:	80 95       	com	r24
    36f6:	90 95       	com	r25
    36f8:	9b 01       	movw	r18, r22
    36fa:	ac 01       	movw	r20, r24
    36fc:	bd 01       	movw	r22, r26
    36fe:	cf 01       	movw	r24, r30
    3700:	08 95       	ret

00003702 <__tablejump2__>:
    3702:	ee 0f       	add	r30, r30
    3704:	ff 1f       	adc	r31, r31
    3706:	05 90       	lpm	r0, Z+
    3708:	f4 91       	lpm	r31, Z
    370a:	e0 2d       	mov	r30, r0
    370c:	09 94       	ijmp

0000370e <sprintf>:
    370e:	ae e0       	ldi	r26, 0x0E	; 14
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	ed e8       	ldi	r30, 0x8D	; 141
    3714:	fb e1       	ldi	r31, 0x1B	; 27
    3716:	0c 94 36 1e 	jmp	0x3c6c	; 0x3c6c <__prologue_saves__+0x1c>
    371a:	0d 89       	ldd	r16, Y+21	; 0x15
    371c:	1e 89       	ldd	r17, Y+22	; 0x16
    371e:	86 e0       	ldi	r24, 0x06	; 6
    3720:	8c 83       	std	Y+4, r24	; 0x04
    3722:	1a 83       	std	Y+2, r17	; 0x02
    3724:	09 83       	std	Y+1, r16	; 0x01
    3726:	8f ef       	ldi	r24, 0xFF	; 255
    3728:	9f e7       	ldi	r25, 0x7F	; 127
    372a:	9e 83       	std	Y+6, r25	; 0x06
    372c:	8d 83       	std	Y+5, r24	; 0x05
    372e:	ae 01       	movw	r20, r28
    3730:	47 5e       	subi	r20, 0xE7	; 231
    3732:	5f 4f       	sbci	r21, 0xFF	; 255
    3734:	6f 89       	ldd	r22, Y+23	; 0x17
    3736:	78 8d       	ldd	r23, Y+24	; 0x18
    3738:	ce 01       	movw	r24, r28
    373a:	01 96       	adiw	r24, 0x01	; 1
    373c:	0e 94 aa 1b 	call	0x3754	; 0x3754 <vfprintf>
    3740:	2f 81       	ldd	r18, Y+7	; 0x07
    3742:	38 85       	ldd	r19, Y+8	; 0x08
    3744:	02 0f       	add	r16, r18
    3746:	13 1f       	adc	r17, r19
    3748:	f8 01       	movw	r30, r16
    374a:	10 82       	st	Z, r1
    374c:	2e 96       	adiw	r28, 0x0e	; 14
    374e:	e4 e0       	ldi	r30, 0x04	; 4
    3750:	0c 94 52 1e 	jmp	0x3ca4	; 0x3ca4 <__epilogue_restores__+0x1c>

00003754 <vfprintf>:
    3754:	ab e0       	ldi	r26, 0x0B	; 11
    3756:	b0 e0       	ldi	r27, 0x00	; 0
    3758:	e0 eb       	ldi	r30, 0xB0	; 176
    375a:	fb e1       	ldi	r31, 0x1B	; 27
    375c:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__prologue_saves__>
    3760:	7c 01       	movw	r14, r24
    3762:	3b 01       	movw	r6, r22
    3764:	8a 01       	movw	r16, r20
    3766:	fc 01       	movw	r30, r24
    3768:	17 82       	std	Z+7, r1	; 0x07
    376a:	16 82       	std	Z+6, r1	; 0x06
    376c:	83 81       	ldd	r24, Z+3	; 0x03
    376e:	81 ff       	sbrs	r24, 1
    3770:	c8 c1       	rjmp	.+912    	; 0x3b02 <vfprintf+0x3ae>
    3772:	ce 01       	movw	r24, r28
    3774:	01 96       	adiw	r24, 0x01	; 1
    3776:	5c 01       	movw	r10, r24
    3778:	f7 01       	movw	r30, r14
    377a:	93 81       	ldd	r25, Z+3	; 0x03
    377c:	f3 01       	movw	r30, r6
    377e:	93 fd       	sbrc	r25, 3
    3780:	85 91       	lpm	r24, Z+
    3782:	93 ff       	sbrs	r25, 3
    3784:	81 91       	ld	r24, Z+
    3786:	3f 01       	movw	r6, r30
    3788:	88 23       	and	r24, r24
    378a:	09 f4       	brne	.+2      	; 0x378e <vfprintf+0x3a>
    378c:	53 c1       	rjmp	.+678    	; 0x3a34 <vfprintf+0x2e0>
    378e:	85 32       	cpi	r24, 0x25	; 37
    3790:	39 f4       	brne	.+14     	; 0x37a0 <vfprintf+0x4c>
    3792:	93 fd       	sbrc	r25, 3
    3794:	85 91       	lpm	r24, Z+
    3796:	93 ff       	sbrs	r25, 3
    3798:	81 91       	ld	r24, Z+
    379a:	3f 01       	movw	r6, r30
    379c:	85 32       	cpi	r24, 0x25	; 37
    379e:	29 f4       	brne	.+10     	; 0x37aa <vfprintf+0x56>
    37a0:	b7 01       	movw	r22, r14
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <fputc>
    37a8:	e7 cf       	rjmp	.-50     	; 0x3778 <vfprintf+0x24>
    37aa:	91 2c       	mov	r9, r1
    37ac:	21 2c       	mov	r2, r1
    37ae:	31 2c       	mov	r3, r1
    37b0:	ff e1       	ldi	r31, 0x1F	; 31
    37b2:	f3 15       	cp	r31, r3
    37b4:	38 f0       	brcs	.+14     	; 0x37c4 <vfprintf+0x70>
    37b6:	8b 32       	cpi	r24, 0x2B	; 43
    37b8:	11 f1       	breq	.+68     	; 0x37fe <vfprintf+0xaa>
    37ba:	90 f4       	brcc	.+36     	; 0x37e0 <vfprintf+0x8c>
    37bc:	80 32       	cpi	r24, 0x20	; 32
    37be:	09 f1       	breq	.+66     	; 0x3802 <vfprintf+0xae>
    37c0:	83 32       	cpi	r24, 0x23	; 35
    37c2:	29 f1       	breq	.+74     	; 0x380e <vfprintf+0xba>
    37c4:	37 fc       	sbrc	r3, 7
    37c6:	3c c0       	rjmp	.+120    	; 0x3840 <vfprintf+0xec>
    37c8:	20 ed       	ldi	r18, 0xD0	; 208
    37ca:	28 0f       	add	r18, r24
    37cc:	2a 30       	cpi	r18, 0x0A	; 10
    37ce:	50 f5       	brcc	.+84     	; 0x3824 <vfprintf+0xd0>
    37d0:	36 fe       	sbrs	r3, 6
    37d2:	20 c0       	rjmp	.+64     	; 0x3814 <vfprintf+0xc0>
    37d4:	8a e0       	ldi	r24, 0x0A	; 10
    37d6:	98 9e       	mul	r9, r24
    37d8:	20 0d       	add	r18, r0
    37da:	11 24       	eor	r1, r1
    37dc:	92 2e       	mov	r9, r18
    37de:	06 c0       	rjmp	.+12     	; 0x37ec <vfprintf+0x98>
    37e0:	8d 32       	cpi	r24, 0x2D	; 45
    37e2:	91 f0       	breq	.+36     	; 0x3808 <vfprintf+0xb4>
    37e4:	80 33       	cpi	r24, 0x30	; 48
    37e6:	71 f7       	brne	.-36     	; 0x37c4 <vfprintf+0x70>
    37e8:	68 94       	set
    37ea:	30 f8       	bld	r3, 0
    37ec:	f3 01       	movw	r30, r6
    37ee:	93 fd       	sbrc	r25, 3
    37f0:	85 91       	lpm	r24, Z+
    37f2:	93 ff       	sbrs	r25, 3
    37f4:	81 91       	ld	r24, Z+
    37f6:	3f 01       	movw	r6, r30
    37f8:	81 11       	cpse	r24, r1
    37fa:	da cf       	rjmp	.-76     	; 0x37b0 <vfprintf+0x5c>
    37fc:	21 c0       	rjmp	.+66     	; 0x3840 <vfprintf+0xec>
    37fe:	68 94       	set
    3800:	31 f8       	bld	r3, 1
    3802:	68 94       	set
    3804:	32 f8       	bld	r3, 2
    3806:	f2 cf       	rjmp	.-28     	; 0x37ec <vfprintf+0x98>
    3808:	68 94       	set
    380a:	33 f8       	bld	r3, 3
    380c:	ef cf       	rjmp	.-34     	; 0x37ec <vfprintf+0x98>
    380e:	68 94       	set
    3810:	34 f8       	bld	r3, 4
    3812:	ec cf       	rjmp	.-40     	; 0x37ec <vfprintf+0x98>
    3814:	ea e0       	ldi	r30, 0x0A	; 10
    3816:	2e 9e       	mul	r2, r30
    3818:	20 0d       	add	r18, r0
    381a:	11 24       	eor	r1, r1
    381c:	22 2e       	mov	r2, r18
    381e:	68 94       	set
    3820:	35 f8       	bld	r3, 5
    3822:	e4 cf       	rjmp	.-56     	; 0x37ec <vfprintf+0x98>
    3824:	8e 32       	cpi	r24, 0x2E	; 46
    3826:	29 f4       	brne	.+10     	; 0x3832 <vfprintf+0xde>
    3828:	36 fc       	sbrc	r3, 6
    382a:	04 c1       	rjmp	.+520    	; 0x3a34 <vfprintf+0x2e0>
    382c:	68 94       	set
    382e:	36 f8       	bld	r3, 6
    3830:	dd cf       	rjmp	.-70     	; 0x37ec <vfprintf+0x98>
    3832:	8c 36       	cpi	r24, 0x6C	; 108
    3834:	19 f4       	brne	.+6      	; 0x383c <vfprintf+0xe8>
    3836:	68 94       	set
    3838:	37 f8       	bld	r3, 7
    383a:	d8 cf       	rjmp	.-80     	; 0x37ec <vfprintf+0x98>
    383c:	88 36       	cpi	r24, 0x68	; 104
    383e:	b1 f2       	breq	.-84     	; 0x37ec <vfprintf+0x98>
    3840:	98 2f       	mov	r25, r24
    3842:	9f 7d       	andi	r25, 0xDF	; 223
    3844:	95 54       	subi	r25, 0x45	; 69
    3846:	93 30       	cpi	r25, 0x03	; 3
    3848:	e0 f0       	brcs	.+56     	; 0x3882 <vfprintf+0x12e>
    384a:	83 36       	cpi	r24, 0x63	; 99
    384c:	a1 f1       	breq	.+104    	; 0x38b6 <vfprintf+0x162>
    384e:	83 37       	cpi	r24, 0x73	; 115
    3850:	c1 f1       	breq	.+112    	; 0x38c2 <vfprintf+0x16e>
    3852:	83 35       	cpi	r24, 0x53	; 83
    3854:	09 f0       	breq	.+2      	; 0x3858 <vfprintf+0x104>
    3856:	63 c0       	rjmp	.+198    	; 0x391e <vfprintf+0x1ca>
    3858:	28 01       	movw	r4, r16
    385a:	f2 e0       	ldi	r31, 0x02	; 2
    385c:	4f 0e       	add	r4, r31
    385e:	51 1c       	adc	r5, r1
    3860:	f8 01       	movw	r30, r16
    3862:	c0 80       	ld	r12, Z
    3864:	d1 80       	ldd	r13, Z+1	; 0x01
    3866:	69 2d       	mov	r22, r9
    3868:	70 e0       	ldi	r23, 0x00	; 0
    386a:	36 fc       	sbrc	r3, 6
    386c:	02 c0       	rjmp	.+4      	; 0x3872 <vfprintf+0x11e>
    386e:	6f ef       	ldi	r22, 0xFF	; 255
    3870:	7f ef       	ldi	r23, 0xFF	; 255
    3872:	c6 01       	movw	r24, r12
    3874:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <strnlen_P>
    3878:	4c 01       	movw	r8, r24
    387a:	68 94       	set
    387c:	37 f8       	bld	r3, 7
    387e:	82 01       	movw	r16, r4
    3880:	0a c0       	rjmp	.+20     	; 0x3896 <vfprintf+0x142>
    3882:	0c 5f       	subi	r16, 0xFC	; 252
    3884:	1f 4f       	sbci	r17, 0xFF	; 255
    3886:	ff e3       	ldi	r31, 0x3F	; 63
    3888:	f9 83       	std	Y+1, r31	; 0x01
    388a:	88 24       	eor	r8, r8
    388c:	83 94       	inc	r8
    388e:	91 2c       	mov	r9, r1
    3890:	65 01       	movw	r12, r10
    3892:	e8 94       	clt
    3894:	37 f8       	bld	r3, 7
    3896:	33 fe       	sbrs	r3, 3
    3898:	2d c0       	rjmp	.+90     	; 0x38f4 <vfprintf+0x1a0>
    389a:	52 2c       	mov	r5, r2
    389c:	81 14       	cp	r8, r1
    389e:	91 04       	cpc	r9, r1
    38a0:	71 f5       	brne	.+92     	; 0x38fe <vfprintf+0x1aa>
    38a2:	55 20       	and	r5, r5
    38a4:	09 f4       	brne	.+2      	; 0x38a8 <vfprintf+0x154>
    38a6:	68 cf       	rjmp	.-304    	; 0x3778 <vfprintf+0x24>
    38a8:	b7 01       	movw	r22, r14
    38aa:	80 e2       	ldi	r24, 0x20	; 32
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <fputc>
    38b2:	5a 94       	dec	r5
    38b4:	f6 cf       	rjmp	.-20     	; 0x38a2 <vfprintf+0x14e>
    38b6:	f8 01       	movw	r30, r16
    38b8:	80 81       	ld	r24, Z
    38ba:	89 83       	std	Y+1, r24	; 0x01
    38bc:	0e 5f       	subi	r16, 0xFE	; 254
    38be:	1f 4f       	sbci	r17, 0xFF	; 255
    38c0:	e4 cf       	rjmp	.-56     	; 0x388a <vfprintf+0x136>
    38c2:	28 01       	movw	r4, r16
    38c4:	f2 e0       	ldi	r31, 0x02	; 2
    38c6:	4f 0e       	add	r4, r31
    38c8:	51 1c       	adc	r5, r1
    38ca:	f8 01       	movw	r30, r16
    38cc:	c0 80       	ld	r12, Z
    38ce:	d1 80       	ldd	r13, Z+1	; 0x01
    38d0:	69 2d       	mov	r22, r9
    38d2:	70 e0       	ldi	r23, 0x00	; 0
    38d4:	36 fc       	sbrc	r3, 6
    38d6:	02 c0       	rjmp	.+4      	; 0x38dc <vfprintf+0x188>
    38d8:	6f ef       	ldi	r22, 0xFF	; 255
    38da:	7f ef       	ldi	r23, 0xFF	; 255
    38dc:	c6 01       	movw	r24, r12
    38de:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <strnlen>
    38e2:	4c 01       	movw	r8, r24
    38e4:	82 01       	movw	r16, r4
    38e6:	d5 cf       	rjmp	.-86     	; 0x3892 <vfprintf+0x13e>
    38e8:	b7 01       	movw	r22, r14
    38ea:	80 e2       	ldi	r24, 0x20	; 32
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <fputc>
    38f2:	2a 94       	dec	r2
    38f4:	28 14       	cp	r2, r8
    38f6:	19 04       	cpc	r1, r9
    38f8:	09 f0       	breq	.+2      	; 0x38fc <vfprintf+0x1a8>
    38fa:	b0 f7       	brcc	.-20     	; 0x38e8 <vfprintf+0x194>
    38fc:	ce cf       	rjmp	.-100    	; 0x389a <vfprintf+0x146>
    38fe:	f6 01       	movw	r30, r12
    3900:	37 fc       	sbrc	r3, 7
    3902:	85 91       	lpm	r24, Z+
    3904:	37 fe       	sbrs	r3, 7
    3906:	81 91       	ld	r24, Z+
    3908:	6f 01       	movw	r12, r30
    390a:	b7 01       	movw	r22, r14
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <fputc>
    3912:	51 10       	cpse	r5, r1
    3914:	5a 94       	dec	r5
    3916:	f1 e0       	ldi	r31, 0x01	; 1
    3918:	8f 1a       	sub	r8, r31
    391a:	91 08       	sbc	r9, r1
    391c:	bf cf       	rjmp	.-130    	; 0x389c <vfprintf+0x148>
    391e:	84 36       	cpi	r24, 0x64	; 100
    3920:	19 f0       	breq	.+6      	; 0x3928 <vfprintf+0x1d4>
    3922:	89 36       	cpi	r24, 0x69	; 105
    3924:	09 f0       	breq	.+2      	; 0x3928 <vfprintf+0x1d4>
    3926:	77 c0       	rjmp	.+238    	; 0x3a16 <vfprintf+0x2c2>
    3928:	f8 01       	movw	r30, r16
    392a:	37 fe       	sbrs	r3, 7
    392c:	6b c0       	rjmp	.+214    	; 0x3a04 <vfprintf+0x2b0>
    392e:	60 81       	ld	r22, Z
    3930:	71 81       	ldd	r23, Z+1	; 0x01
    3932:	82 81       	ldd	r24, Z+2	; 0x02
    3934:	93 81       	ldd	r25, Z+3	; 0x03
    3936:	0c 5f       	subi	r16, 0xFC	; 252
    3938:	1f 4f       	sbci	r17, 0xFF	; 255
    393a:	f3 2d       	mov	r31, r3
    393c:	ff 76       	andi	r31, 0x6F	; 111
    393e:	3f 2e       	mov	r3, r31
    3940:	97 ff       	sbrs	r25, 7
    3942:	09 c0       	rjmp	.+18     	; 0x3956 <vfprintf+0x202>
    3944:	90 95       	com	r25
    3946:	80 95       	com	r24
    3948:	70 95       	com	r23
    394a:	61 95       	neg	r22
    394c:	7f 4f       	sbci	r23, 0xFF	; 255
    394e:	8f 4f       	sbci	r24, 0xFF	; 255
    3950:	9f 4f       	sbci	r25, 0xFF	; 255
    3952:	68 94       	set
    3954:	37 f8       	bld	r3, 7
    3956:	2a e0       	ldi	r18, 0x0A	; 10
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	a5 01       	movw	r20, r10
    395c:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__ultoa_invert>
    3960:	c8 2e       	mov	r12, r24
    3962:	ca 18       	sub	r12, r10
    3964:	8c 2c       	mov	r8, r12
    3966:	43 2c       	mov	r4, r3
    3968:	36 fe       	sbrs	r3, 6
    396a:	0c c0       	rjmp	.+24     	; 0x3984 <vfprintf+0x230>
    396c:	e8 94       	clt
    396e:	40 f8       	bld	r4, 0
    3970:	c9 14       	cp	r12, r9
    3972:	40 f4       	brcc	.+16     	; 0x3984 <vfprintf+0x230>
    3974:	34 fe       	sbrs	r3, 4
    3976:	05 c0       	rjmp	.+10     	; 0x3982 <vfprintf+0x22e>
    3978:	32 fc       	sbrc	r3, 2
    397a:	03 c0       	rjmp	.+6      	; 0x3982 <vfprintf+0x22e>
    397c:	f3 2d       	mov	r31, r3
    397e:	fe 7e       	andi	r31, 0xEE	; 238
    3980:	4f 2e       	mov	r4, r31
    3982:	89 2c       	mov	r8, r9
    3984:	44 fe       	sbrs	r4, 4
    3986:	95 c0       	rjmp	.+298    	; 0x3ab2 <vfprintf+0x35e>
    3988:	fe 01       	movw	r30, r28
    398a:	ec 0d       	add	r30, r12
    398c:	f1 1d       	adc	r31, r1
    398e:	80 81       	ld	r24, Z
    3990:	80 33       	cpi	r24, 0x30	; 48
    3992:	09 f0       	breq	.+2      	; 0x3996 <vfprintf+0x242>
    3994:	87 c0       	rjmp	.+270    	; 0x3aa4 <vfprintf+0x350>
    3996:	24 2d       	mov	r18, r4
    3998:	29 7e       	andi	r18, 0xE9	; 233
    399a:	42 2e       	mov	r4, r18
    399c:	84 2d       	mov	r24, r4
    399e:	88 70       	andi	r24, 0x08	; 8
    39a0:	58 2e       	mov	r5, r24
    39a2:	43 fc       	sbrc	r4, 3
    39a4:	95 c0       	rjmp	.+298    	; 0x3ad0 <vfprintf+0x37c>
    39a6:	40 fe       	sbrs	r4, 0
    39a8:	8f c0       	rjmp	.+286    	; 0x3ac8 <vfprintf+0x374>
    39aa:	9c 2c       	mov	r9, r12
    39ac:	82 14       	cp	r8, r2
    39ae:	18 f4       	brcc	.+6      	; 0x39b6 <vfprintf+0x262>
    39b0:	2c 0c       	add	r2, r12
    39b2:	92 2c       	mov	r9, r2
    39b4:	98 18       	sub	r9, r8
    39b6:	44 fe       	sbrs	r4, 4
    39b8:	91 c0       	rjmp	.+290    	; 0x3adc <vfprintf+0x388>
    39ba:	b7 01       	movw	r22, r14
    39bc:	80 e3       	ldi	r24, 0x30	; 48
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <fputc>
    39c4:	42 fe       	sbrs	r4, 2
    39c6:	09 c0       	rjmp	.+18     	; 0x39da <vfprintf+0x286>
    39c8:	88 e7       	ldi	r24, 0x78	; 120
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	41 fe       	sbrs	r4, 1
    39ce:	02 c0       	rjmp	.+4      	; 0x39d4 <vfprintf+0x280>
    39d0:	88 e5       	ldi	r24, 0x58	; 88
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	b7 01       	movw	r22, r14
    39d6:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <fputc>
    39da:	c9 14       	cp	r12, r9
    39dc:	08 f4       	brcc	.+2      	; 0x39e0 <vfprintf+0x28c>
    39de:	8a c0       	rjmp	.+276    	; 0x3af4 <vfprintf+0x3a0>
    39e0:	ca 94       	dec	r12
    39e2:	d1 2c       	mov	r13, r1
    39e4:	9f ef       	ldi	r25, 0xFF	; 255
    39e6:	c9 1a       	sub	r12, r25
    39e8:	d9 0a       	sbc	r13, r25
    39ea:	ca 0c       	add	r12, r10
    39ec:	db 1c       	adc	r13, r11
    39ee:	f6 01       	movw	r30, r12
    39f0:	82 91       	ld	r24, -Z
    39f2:	6f 01       	movw	r12, r30
    39f4:	b7 01       	movw	r22, r14
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <fputc>
    39fc:	ac 14       	cp	r10, r12
    39fe:	bd 04       	cpc	r11, r13
    3a00:	b1 f7       	brne	.-20     	; 0x39ee <vfprintf+0x29a>
    3a02:	4f cf       	rjmp	.-354    	; 0x38a2 <vfprintf+0x14e>
    3a04:	60 81       	ld	r22, Z
    3a06:	71 81       	ldd	r23, Z+1	; 0x01
    3a08:	07 2e       	mov	r0, r23
    3a0a:	00 0c       	add	r0, r0
    3a0c:	88 0b       	sbc	r24, r24
    3a0e:	99 0b       	sbc	r25, r25
    3a10:	0e 5f       	subi	r16, 0xFE	; 254
    3a12:	1f 4f       	sbci	r17, 0xFF	; 255
    3a14:	92 cf       	rjmp	.-220    	; 0x393a <vfprintf+0x1e6>
    3a16:	d3 2c       	mov	r13, r3
    3a18:	e8 94       	clt
    3a1a:	d4 f8       	bld	r13, 4
    3a1c:	2a e0       	ldi	r18, 0x0A	; 10
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	85 37       	cpi	r24, 0x75	; 117
    3a22:	39 f1       	breq	.+78     	; 0x3a72 <vfprintf+0x31e>
    3a24:	23 2d       	mov	r18, r3
    3a26:	29 7f       	andi	r18, 0xF9	; 249
    3a28:	d2 2e       	mov	r13, r18
    3a2a:	8f 36       	cpi	r24, 0x6F	; 111
    3a2c:	01 f1       	breq	.+64     	; 0x3a6e <vfprintf+0x31a>
    3a2e:	48 f4       	brcc	.+18     	; 0x3a42 <vfprintf+0x2ee>
    3a30:	88 35       	cpi	r24, 0x58	; 88
    3a32:	a9 f0       	breq	.+42     	; 0x3a5e <vfprintf+0x30a>
    3a34:	f7 01       	movw	r30, r14
    3a36:	86 81       	ldd	r24, Z+6	; 0x06
    3a38:	97 81       	ldd	r25, Z+7	; 0x07
    3a3a:	2b 96       	adiw	r28, 0x0b	; 11
    3a3c:	e2 e1       	ldi	r30, 0x12	; 18
    3a3e:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__epilogue_restores__>
    3a42:	80 37       	cpi	r24, 0x70	; 112
    3a44:	49 f0       	breq	.+18     	; 0x3a58 <vfprintf+0x304>
    3a46:	88 37       	cpi	r24, 0x78	; 120
    3a48:	a9 f7       	brne	.-22     	; 0x3a34 <vfprintf+0x2e0>
    3a4a:	d4 fe       	sbrs	r13, 4
    3a4c:	02 c0       	rjmp	.+4      	; 0x3a52 <vfprintf+0x2fe>
    3a4e:	68 94       	set
    3a50:	d2 f8       	bld	r13, 2
    3a52:	20 e1       	ldi	r18, 0x10	; 16
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	0d c0       	rjmp	.+26     	; 0x3a72 <vfprintf+0x31e>
    3a58:	68 94       	set
    3a5a:	d4 f8       	bld	r13, 4
    3a5c:	f6 cf       	rjmp	.-20     	; 0x3a4a <vfprintf+0x2f6>
    3a5e:	34 fe       	sbrs	r3, 4
    3a60:	03 c0       	rjmp	.+6      	; 0x3a68 <vfprintf+0x314>
    3a62:	82 2f       	mov	r24, r18
    3a64:	86 60       	ori	r24, 0x06	; 6
    3a66:	d8 2e       	mov	r13, r24
    3a68:	20 e1       	ldi	r18, 0x10	; 16
    3a6a:	32 e0       	ldi	r19, 0x02	; 2
    3a6c:	02 c0       	rjmp	.+4      	; 0x3a72 <vfprintf+0x31e>
    3a6e:	28 e0       	ldi	r18, 0x08	; 8
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	f8 01       	movw	r30, r16
    3a74:	d7 fe       	sbrs	r13, 7
    3a76:	0f c0       	rjmp	.+30     	; 0x3a96 <vfprintf+0x342>
    3a78:	60 81       	ld	r22, Z
    3a7a:	71 81       	ldd	r23, Z+1	; 0x01
    3a7c:	82 81       	ldd	r24, Z+2	; 0x02
    3a7e:	93 81       	ldd	r25, Z+3	; 0x03
    3a80:	0c 5f       	subi	r16, 0xFC	; 252
    3a82:	1f 4f       	sbci	r17, 0xFF	; 255
    3a84:	a5 01       	movw	r20, r10
    3a86:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__ultoa_invert>
    3a8a:	c8 2e       	mov	r12, r24
    3a8c:	ca 18       	sub	r12, r10
    3a8e:	3d 2c       	mov	r3, r13
    3a90:	e8 94       	clt
    3a92:	37 f8       	bld	r3, 7
    3a94:	67 cf       	rjmp	.-306    	; 0x3964 <vfprintf+0x210>
    3a96:	60 81       	ld	r22, Z
    3a98:	71 81       	ldd	r23, Z+1	; 0x01
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	0e 5f       	subi	r16, 0xFE	; 254
    3aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa2:	f0 cf       	rjmp	.-32     	; 0x3a84 <vfprintf+0x330>
    3aa4:	42 fc       	sbrc	r4, 2
    3aa6:	02 c0       	rjmp	.+4      	; 0x3aac <vfprintf+0x358>
    3aa8:	83 94       	inc	r8
    3aaa:	78 cf       	rjmp	.-272    	; 0x399c <vfprintf+0x248>
    3aac:	83 94       	inc	r8
    3aae:	83 94       	inc	r8
    3ab0:	75 cf       	rjmp	.-278    	; 0x399c <vfprintf+0x248>
    3ab2:	84 2d       	mov	r24, r4
    3ab4:	86 78       	andi	r24, 0x86	; 134
    3ab6:	09 f4       	brne	.+2      	; 0x3aba <vfprintf+0x366>
    3ab8:	71 cf       	rjmp	.-286    	; 0x399c <vfprintf+0x248>
    3aba:	f6 cf       	rjmp	.-20     	; 0x3aa8 <vfprintf+0x354>
    3abc:	b7 01       	movw	r22, r14
    3abe:	80 e2       	ldi	r24, 0x20	; 32
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <fputc>
    3ac6:	83 94       	inc	r8
    3ac8:	82 14       	cp	r8, r2
    3aca:	c0 f3       	brcs	.-16     	; 0x3abc <vfprintf+0x368>
    3acc:	51 2c       	mov	r5, r1
    3ace:	73 cf       	rjmp	.-282    	; 0x39b6 <vfprintf+0x262>
    3ad0:	52 2c       	mov	r5, r2
    3ad2:	58 18       	sub	r5, r8
    3ad4:	82 14       	cp	r8, r2
    3ad6:	08 f4       	brcc	.+2      	; 0x3ada <vfprintf+0x386>
    3ad8:	6e cf       	rjmp	.-292    	; 0x39b6 <vfprintf+0x262>
    3ada:	f8 cf       	rjmp	.-16     	; 0x3acc <vfprintf+0x378>
    3adc:	84 2d       	mov	r24, r4
    3ade:	86 78       	andi	r24, 0x86	; 134
    3ae0:	09 f4       	brne	.+2      	; 0x3ae4 <vfprintf+0x390>
    3ae2:	7b cf       	rjmp	.-266    	; 0x39da <vfprintf+0x286>
    3ae4:	8b e2       	ldi	r24, 0x2B	; 43
    3ae6:	41 fe       	sbrs	r4, 1
    3ae8:	80 e2       	ldi	r24, 0x20	; 32
    3aea:	47 fc       	sbrc	r4, 7
    3aec:	8d e2       	ldi	r24, 0x2D	; 45
    3aee:	b7 01       	movw	r22, r14
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	71 cf       	rjmp	.-286    	; 0x39d6 <vfprintf+0x282>
    3af4:	b7 01       	movw	r22, r14
    3af6:	80 e3       	ldi	r24, 0x30	; 48
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <fputc>
    3afe:	9a 94       	dec	r9
    3b00:	6c cf       	rjmp	.-296    	; 0x39da <vfprintf+0x286>
    3b02:	8f ef       	ldi	r24, 0xFF	; 255
    3b04:	9f ef       	ldi	r25, 0xFF	; 255
    3b06:	99 cf       	rjmp	.-206    	; 0x3a3a <vfprintf+0x2e6>

00003b08 <strnlen_P>:
    3b08:	fc 01       	movw	r30, r24
    3b0a:	05 90       	lpm	r0, Z+
    3b0c:	61 50       	subi	r22, 0x01	; 1
    3b0e:	70 40       	sbci	r23, 0x00	; 0
    3b10:	01 10       	cpse	r0, r1
    3b12:	d8 f7       	brcc	.-10     	; 0x3b0a <strnlen_P+0x2>
    3b14:	80 95       	com	r24
    3b16:	90 95       	com	r25
    3b18:	8e 0f       	add	r24, r30
    3b1a:	9f 1f       	adc	r25, r31
    3b1c:	08 95       	ret

00003b1e <strnlen>:
    3b1e:	fc 01       	movw	r30, r24
    3b20:	61 50       	subi	r22, 0x01	; 1
    3b22:	70 40       	sbci	r23, 0x00	; 0
    3b24:	01 90       	ld	r0, Z+
    3b26:	01 10       	cpse	r0, r1
    3b28:	d8 f7       	brcc	.-10     	; 0x3b20 <strnlen+0x2>
    3b2a:	80 95       	com	r24
    3b2c:	90 95       	com	r25
    3b2e:	8e 0f       	add	r24, r30
    3b30:	9f 1f       	adc	r25, r31
    3b32:	08 95       	ret

00003b34 <fputc>:
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	18 2f       	mov	r17, r24
    3b3e:	09 2f       	mov	r16, r25
    3b40:	eb 01       	movw	r28, r22
    3b42:	8b 81       	ldd	r24, Y+3	; 0x03
    3b44:	81 fd       	sbrc	r24, 1
    3b46:	09 c0       	rjmp	.+18     	; 0x3b5a <fputc+0x26>
    3b48:	1f ef       	ldi	r17, 0xFF	; 255
    3b4a:	0f ef       	ldi	r16, 0xFF	; 255
    3b4c:	81 2f       	mov	r24, r17
    3b4e:	90 2f       	mov	r25, r16
    3b50:	df 91       	pop	r29
    3b52:	cf 91       	pop	r28
    3b54:	1f 91       	pop	r17
    3b56:	0f 91       	pop	r16
    3b58:	08 95       	ret
    3b5a:	82 ff       	sbrs	r24, 2
    3b5c:	14 c0       	rjmp	.+40     	; 0x3b86 <fputc+0x52>
    3b5e:	2e 81       	ldd	r18, Y+6	; 0x06
    3b60:	3f 81       	ldd	r19, Y+7	; 0x07
    3b62:	8c 81       	ldd	r24, Y+4	; 0x04
    3b64:	9d 81       	ldd	r25, Y+5	; 0x05
    3b66:	28 17       	cp	r18, r24
    3b68:	39 07       	cpc	r19, r25
    3b6a:	3c f4       	brge	.+14     	; 0x3b7a <fputc+0x46>
    3b6c:	e8 81       	ld	r30, Y
    3b6e:	f9 81       	ldd	r31, Y+1	; 0x01
    3b70:	cf 01       	movw	r24, r30
    3b72:	01 96       	adiw	r24, 0x01	; 1
    3b74:	99 83       	std	Y+1, r25	; 0x01
    3b76:	88 83       	st	Y, r24
    3b78:	10 83       	st	Z, r17
    3b7a:	8e 81       	ldd	r24, Y+6	; 0x06
    3b7c:	9f 81       	ldd	r25, Y+7	; 0x07
    3b7e:	01 96       	adiw	r24, 0x01	; 1
    3b80:	9f 83       	std	Y+7, r25	; 0x07
    3b82:	8e 83       	std	Y+6, r24	; 0x06
    3b84:	e3 cf       	rjmp	.-58     	; 0x3b4c <fputc+0x18>
    3b86:	e8 85       	ldd	r30, Y+8	; 0x08
    3b88:	f9 85       	ldd	r31, Y+9	; 0x09
    3b8a:	81 2f       	mov	r24, r17
    3b8c:	09 95       	icall
    3b8e:	89 2b       	or	r24, r25
    3b90:	a1 f3       	breq	.-24     	; 0x3b7a <fputc+0x46>
    3b92:	da cf       	rjmp	.-76     	; 0x3b48 <fputc+0x14>

00003b94 <__ultoa_invert>:
    3b94:	fa 01       	movw	r30, r20
    3b96:	aa 27       	eor	r26, r26
    3b98:	28 30       	cpi	r18, 0x08	; 8
    3b9a:	51 f1       	breq	.+84     	; 0x3bf0 <__ultoa_invert+0x5c>
    3b9c:	20 31       	cpi	r18, 0x10	; 16
    3b9e:	81 f1       	breq	.+96     	; 0x3c00 <__ultoa_invert+0x6c>
    3ba0:	e8 94       	clt
    3ba2:	6f 93       	push	r22
    3ba4:	6e 7f       	andi	r22, 0xFE	; 254
    3ba6:	6e 5f       	subi	r22, 0xFE	; 254
    3ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    3baa:	8f 4f       	sbci	r24, 0xFF	; 255
    3bac:	9f 4f       	sbci	r25, 0xFF	; 255
    3bae:	af 4f       	sbci	r26, 0xFF	; 255
    3bb0:	b1 e0       	ldi	r27, 0x01	; 1
    3bb2:	3e d0       	rcall	.+124    	; 0x3c30 <__ultoa_invert+0x9c>
    3bb4:	b4 e0       	ldi	r27, 0x04	; 4
    3bb6:	3c d0       	rcall	.+120    	; 0x3c30 <__ultoa_invert+0x9c>
    3bb8:	67 0f       	add	r22, r23
    3bba:	78 1f       	adc	r23, r24
    3bbc:	89 1f       	adc	r24, r25
    3bbe:	9a 1f       	adc	r25, r26
    3bc0:	a1 1d       	adc	r26, r1
    3bc2:	68 0f       	add	r22, r24
    3bc4:	79 1f       	adc	r23, r25
    3bc6:	8a 1f       	adc	r24, r26
    3bc8:	91 1d       	adc	r25, r1
    3bca:	a1 1d       	adc	r26, r1
    3bcc:	6a 0f       	add	r22, r26
    3bce:	71 1d       	adc	r23, r1
    3bd0:	81 1d       	adc	r24, r1
    3bd2:	91 1d       	adc	r25, r1
    3bd4:	a1 1d       	adc	r26, r1
    3bd6:	20 d0       	rcall	.+64     	; 0x3c18 <__ultoa_invert+0x84>
    3bd8:	09 f4       	brne	.+2      	; 0x3bdc <__ultoa_invert+0x48>
    3bda:	68 94       	set
    3bdc:	3f 91       	pop	r19
    3bde:	2a e0       	ldi	r18, 0x0A	; 10
    3be0:	26 9f       	mul	r18, r22
    3be2:	11 24       	eor	r1, r1
    3be4:	30 19       	sub	r19, r0
    3be6:	30 5d       	subi	r19, 0xD0	; 208
    3be8:	31 93       	st	Z+, r19
    3bea:	de f6       	brtc	.-74     	; 0x3ba2 <__ultoa_invert+0xe>
    3bec:	cf 01       	movw	r24, r30
    3bee:	08 95       	ret
    3bf0:	46 2f       	mov	r20, r22
    3bf2:	47 70       	andi	r20, 0x07	; 7
    3bf4:	40 5d       	subi	r20, 0xD0	; 208
    3bf6:	41 93       	st	Z+, r20
    3bf8:	b3 e0       	ldi	r27, 0x03	; 3
    3bfa:	0f d0       	rcall	.+30     	; 0x3c1a <__ultoa_invert+0x86>
    3bfc:	c9 f7       	brne	.-14     	; 0x3bf0 <__ultoa_invert+0x5c>
    3bfe:	f6 cf       	rjmp	.-20     	; 0x3bec <__ultoa_invert+0x58>
    3c00:	46 2f       	mov	r20, r22
    3c02:	4f 70       	andi	r20, 0x0F	; 15
    3c04:	40 5d       	subi	r20, 0xD0	; 208
    3c06:	4a 33       	cpi	r20, 0x3A	; 58
    3c08:	18 f0       	brcs	.+6      	; 0x3c10 <__ultoa_invert+0x7c>
    3c0a:	49 5d       	subi	r20, 0xD9	; 217
    3c0c:	31 fd       	sbrc	r19, 1
    3c0e:	40 52       	subi	r20, 0x20	; 32
    3c10:	41 93       	st	Z+, r20
    3c12:	02 d0       	rcall	.+4      	; 0x3c18 <__ultoa_invert+0x84>
    3c14:	a9 f7       	brne	.-22     	; 0x3c00 <__ultoa_invert+0x6c>
    3c16:	ea cf       	rjmp	.-44     	; 0x3bec <__ultoa_invert+0x58>
    3c18:	b4 e0       	ldi	r27, 0x04	; 4
    3c1a:	a6 95       	lsr	r26
    3c1c:	97 95       	ror	r25
    3c1e:	87 95       	ror	r24
    3c20:	77 95       	ror	r23
    3c22:	67 95       	ror	r22
    3c24:	ba 95       	dec	r27
    3c26:	c9 f7       	brne	.-14     	; 0x3c1a <__ultoa_invert+0x86>
    3c28:	00 97       	sbiw	r24, 0x00	; 0
    3c2a:	61 05       	cpc	r22, r1
    3c2c:	71 05       	cpc	r23, r1
    3c2e:	08 95       	ret
    3c30:	9b 01       	movw	r18, r22
    3c32:	ac 01       	movw	r20, r24
    3c34:	0a 2e       	mov	r0, r26
    3c36:	06 94       	lsr	r0
    3c38:	57 95       	ror	r21
    3c3a:	47 95       	ror	r20
    3c3c:	37 95       	ror	r19
    3c3e:	27 95       	ror	r18
    3c40:	ba 95       	dec	r27
    3c42:	c9 f7       	brne	.-14     	; 0x3c36 <__ultoa_invert+0xa2>
    3c44:	62 0f       	add	r22, r18
    3c46:	73 1f       	adc	r23, r19
    3c48:	84 1f       	adc	r24, r20
    3c4a:	95 1f       	adc	r25, r21
    3c4c:	a0 1d       	adc	r26, r0
    3c4e:	08 95       	ret

00003c50 <__prologue_saves__>:
    3c50:	2f 92       	push	r2
    3c52:	3f 92       	push	r3
    3c54:	4f 92       	push	r4
    3c56:	5f 92       	push	r5
    3c58:	6f 92       	push	r6
    3c5a:	7f 92       	push	r7
    3c5c:	8f 92       	push	r8
    3c5e:	9f 92       	push	r9
    3c60:	af 92       	push	r10
    3c62:	bf 92       	push	r11
    3c64:	cf 92       	push	r12
    3c66:	df 92       	push	r13
    3c68:	ef 92       	push	r14
    3c6a:	ff 92       	push	r15
    3c6c:	0f 93       	push	r16
    3c6e:	1f 93       	push	r17
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
    3c74:	cd b7       	in	r28, 0x3d	; 61
    3c76:	de b7       	in	r29, 0x3e	; 62
    3c78:	ca 1b       	sub	r28, r26
    3c7a:	db 0b       	sbc	r29, r27
    3c7c:	0f b6       	in	r0, 0x3f	; 63
    3c7e:	f8 94       	cli
    3c80:	de bf       	out	0x3e, r29	; 62
    3c82:	0f be       	out	0x3f, r0	; 63
    3c84:	cd bf       	out	0x3d, r28	; 61
    3c86:	09 94       	ijmp

00003c88 <__epilogue_restores__>:
    3c88:	2a 88       	ldd	r2, Y+18	; 0x12
    3c8a:	39 88       	ldd	r3, Y+17	; 0x11
    3c8c:	48 88       	ldd	r4, Y+16	; 0x10
    3c8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c90:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c92:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c94:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c96:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c98:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c9a:	b9 84       	ldd	r11, Y+9	; 0x09
    3c9c:	c8 84       	ldd	r12, Y+8	; 0x08
    3c9e:	df 80       	ldd	r13, Y+7	; 0x07
    3ca0:	ee 80       	ldd	r14, Y+6	; 0x06
    3ca2:	fd 80       	ldd	r15, Y+5	; 0x05
    3ca4:	0c 81       	ldd	r16, Y+4	; 0x04
    3ca6:	1b 81       	ldd	r17, Y+3	; 0x03
    3ca8:	aa 81       	ldd	r26, Y+2	; 0x02
    3caa:	b9 81       	ldd	r27, Y+1	; 0x01
    3cac:	ce 0f       	add	r28, r30
    3cae:	d1 1d       	adc	r29, r1
    3cb0:	0f b6       	in	r0, 0x3f	; 63
    3cb2:	f8 94       	cli
    3cb4:	de bf       	out	0x3e, r29	; 62
    3cb6:	0f be       	out	0x3f, r0	; 63
    3cb8:	cd bf       	out	0x3d, r28	; 61
    3cba:	ed 01       	movw	r28, r26
    3cbc:	08 95       	ret

00003cbe <_exit>:
    3cbe:	f8 94       	cli

00003cc0 <__stop_program>:
    3cc0:	ff cf       	rjmp	.-2      	; 0x3cc0 <__stop_program>
